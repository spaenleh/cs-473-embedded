
lab_4_full.elf:     file format elf32-littlenios2
lab_4_full.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x000111a0 memsz 0x000111a0 flags r-x
    LOAD off    0x000121c0 vaddr 0x101111c0 paddr 0x10112cac align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014798 vaddr 0x10114798 paddr 0x10114798 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010be4  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  10110e28  10110e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  101111c0  10112cac  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10114798  10114798  00014798  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  101148f8  101148f8  00013cac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013cac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f68  00000000  00000000  00013cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024dc3  00000000  00000000  00014c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096fb  00000000  00000000  000399fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000be49  00000000  00000000  000430f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024c0  00000000  00000000  0004ef40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003992  00000000  00000000  00051400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b0d  00000000  00000000  00054d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006c8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001920  00000000  00000000  0006c900  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000715ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000715d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000715dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000715de  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000715df  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000715ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000715f5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00071600  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0007160a  2**0
                  CONTENTS, READONLY
 26 .jdi          000058d5  00000000  00000000  00071639  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027fccf  00000000  00000000  00076f0e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10110e28 l    d  .rodata	00000000 .rodata
101111c0 l    d  .rwdata	00000000 .rwdata
10114798 l    d  .bss	00000000 .bss
101148f8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/Desktop/shared/lab4_project/sw/nios/lab_4_full_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 demo_i2c.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
1010134c l     F .text	00000034 i2c_usleep
10101380 l     F .text	00000044 wait_end_of_transfer
101013c4 l     F .text	00000070 set_data_control
10101434 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10110f06 l     O .rodata	00000010 zeroes.4404
10104118 l     F .text	000000bc __sbprintf
10110f16 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10104328 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10105e58 l     F .text	00000008 __fp_unlock
10105e6c l     F .text	0000019c __sinit.part.1
10106008 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
101111c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10111604 l     O .rwdata	00000020 lc_ctype_charset
101115e4 l     O .rwdata	00000020 lc_message_charset
10111624 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10110f48 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1010956c l     F .text	000000fc __sprint_r.part.0
1011107c l     O .rodata	00000010 blanks.4348
1011106c l     O .rodata	00000010 zeroes.4349
1010aaf8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010e600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e70c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e738 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010e904 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010e9f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1010ebc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112c9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1010ee40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010ef74 l     F .text	00000034 alt_dev_reg
10111c0c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f24c l     F .text	0000020c altera_avalon_jtag_uart_irq
1010f458 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010fd5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
101101d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10110310 l     F .text	0000003c alt_get_errno
1011034c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
101147cc g     O .bss	00000004 alt_instruction_exception_handler
10101d80 g     F .text	00000018 putchar
10108a48 g     F .text	00000074 _mprec_log10
10108b34 g     F .text	0000008c __any_on
1010b1ec g     F .text	00000054 _isatty_r
10110f54 g     O .rodata	00000028 __mprec_tinytens
1010eb00 g     F .text	0000007c alt_main
10101d98 g     F .text	000000c0 _puts_r
10100764 g     F .text	00000100 new_cam_init
101147f8 g     O .bss	00000100 alt_irq
1010b240 g     F .text	00000060 _lseek_r
10112cac g       *ABS*	00000000 __flash_rwdata_start
1010d12c g     F .text	00000088 .hidden __eqdf2
101148f8 g       *ABS*	00000000 __alt_heap_start
10101d3c g     F .text	0000003c printf
1010b300 g     F .text	0000009c _wcrtomb_r
1010942c g     F .text	0000005c __sseek
101061a8 g     F .text	00000010 __sinit
1010abb4 g     F .text	00000140 __swbuf_r
10106c70 g     F .text	0000007c _setlocale_r
10106010 g     F .text	00000068 __sfmoreglue
1010eba0 g     F .text	00000024 __malloc_unlock
10100864 g     F .text	000000e8 cam_write
10107940 g     F .text	0000015c memmove
10106190 g     F .text	00000018 _cleanup
10107bc4 g     F .text	000000a8 _Balloc
101003b8 g     F .text	00000140 main_i2c
1010d1b4 g     F .text	000000dc .hidden __gtdf2
10110708 g     F .text	00000024 altera_nios2_gen2_irq_init
101015a8 g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
1010b190 g     F .text	0000005c _fstat_r
101147b0 g     O .bss	00000004 errno
101093a8 g     F .text	00000008 __seofread
101147b8 g     O .bss	00000004 alt_argv
1011ac6c g       *ABS*	00000000 _gp
1010ee10 g     F .text	00000030 usleep
10101230 g     F .text	00000070 send_reset
101006d8 g     F .text	0000008c clear_frame
10111a8c g     O .rwdata	00000180 alt_fd_list
10101d78 g     F .text	00000008 _putchar_r
1011072c g     F .text	00000090 alt_find_dev
101077f8 g     F .text	00000148 memcpy
10105e60 g     F .text	0000000c _cleanup_r
1010e418 g     F .text	000000dc .hidden __floatsidf
1010181c g     F .text	00000194 i2c_write_array
10110294 g     F .text	0000007c alt_io_redirect
1010d290 g     F .text	000000f4 .hidden __ltdf2
10110e28 g       *ABS*	00000000 __DTOR_END__
10101e58 g     F .text	00000014 puts
101109f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010928c g     F .text	00000074 __fpclassifyd
101089a4 g     F .text	000000a4 __ratio
1010aadc g     F .text	0000001c __vfiprintf_internal
1010f650 g     F .text	0000021c altera_avalon_jtag_uart_read
10101d0c g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10101c50 g     F .text	00000064 .hidden __udivsi3
1010e860 g     F .text	000000a4 isatty
10110fa4 g     O .rodata	000000c8 __mprec_tens
10106cec g     F .text	0000000c __locale_charset
10110968 g     F .text	00000090 alt_icache_flush
101147ac g     O .bss	00000004 __malloc_top_pad
10112c74 g     O .rwdata	00000004 __mb_cur_max
10106d1c g     F .text	0000000c _localeconv_r
10107fd0 g     F .text	0000003c __i2b
1010662c g     F .text	000004bc __sfvwrite_r
10109300 g     F .text	00000054 _sbrk_r
1010b2a0 g     F .text	00000060 _read_r
10112c94 g     O .rwdata	00000004 alt_max_fd
1010ae84 g     F .text	000000f0 _fclose_r
10105e28 g     F .text	00000030 fflush
101147a8 g     O .bss	00000004 __malloc_max_sbrked_mem
1010094c g     F .text	000008e4 LCD_init
1010bf98 g     F .text	000008ac .hidden __adddf3
1010874c g     F .text	0000010c __b2d
1010ba60 g     F .text	00000538 .hidden __umoddi3
1010ea2c g     F .text	000000d4 lseek
10112c6c g     O .rwdata	00000004 _global_impure_ptr
10108d28 g     F .text	00000564 _realloc_r
101148f8 g       *ABS*	00000000 __bss_end
101100e0 g     F .text	000000f0 alt_iic_isr_register
10110600 g     F .text	00000108 alt_tick
1010b4e8 g     F .text	00000578 .hidden __udivdi3
1010b0ec g     F .text	00000024 _fputwc_r
10110f7c g     O .rodata	00000028 __mprec_bigtens
10107db4 g     F .text	00000104 __s2b
1010e4f4 g     F .text	000000a8 .hidden __floatunsidf
1010848c g     F .text	00000060 __mcmp
101061c8 g     F .text	00000018 __fp_lock_all
10110094 g     F .text	0000004c alt_ic_irq_enabled
10110564 g     F .text	0000009c alt_alarm_stop
101005f8 g     F .text	000000e0 fill_square
101147c0 g     O .bss	00000004 alt_irq_active
101000fc g     F .exceptions	000000d4 alt_irq_handler
10111a64 g     O .rwdata	00000028 alt_dev_null
1010fd14 g     F .text	00000048 alt_dcache_flush_all
10107eb8 g     F .text	00000068 __hi0bits
1010e398 g     F .text	00000080 .hidden __fixdfsi
10112cac g       *ABS*	00000000 __ram_rwdata_end
10112c8c g     O .rwdata	00000008 alt_dev_list
1010ee7c g     F .text	000000f8 write
10108bc0 g     F .text	000000a0 _putc_r
101111c0 g       *ABS*	00000000 __ram_rodata_end
1010e774 g     F .text	000000b0 fstat
10101498 g     F .text	0000002c i2c_inst
1010d290 g     F .text	000000f4 .hidden __ledf2
10108204 g     F .text	00000140 __pow5mult
10109680 g     F .text	0000145c ___vfiprintf_internal_r
101147a0 g     O .bss	00000004 __nlocale_changed
10101cb4 g     F .text	00000058 .hidden __umodsi3
101148f8 g       *ABS*	00000000 end
1010f18c g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10110e28 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010e59c g     F .text	00000064 .hidden __clzsi2
1010f86c g     F .text	00000224 altera_avalon_jtag_uart_write
101061b8 g     F .text	00000004 __sfp_lock_acquire
10107714 g     F .text	000000e4 memchr
10101f04 g     F .text	000021f8 ___vfprintf_internal_r
1010631c g     F .text	00000310 _free_r
10106cf8 g     F .text	00000010 __locale_mb_cur_max
10110c74 g     F .text	00000180 __call_exitprocs
1011479c g     O .bss	00000004 __mlocale_changed
10112c78 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
101147c4 g     O .bss	00000004 _alt_tick_rate
10108344 g     F .text	00000148 __lshift
101147c8 g     O .bss	00000004 _alt_nticks
1010ec00 g     F .text	000000fc read
1010efe0 g     F .text	00000048 alt_sys_init
10101528 g     F .text	00000080 i2c_configure
10110b5c g     F .text	00000118 __register_exitproc
1010800c g     F .text	000001f8 __multiply
1010f4f8 g     F .text	00000068 altera_avalon_jtag_uart_close
101111c0 g       *ABS*	00000000 __ram_rwdata_start
10110e28 g       *ABS*	00000000 __ram_rodata_start
101147d0 g     O .bss	00000028 __malloc_current_mallinfo
10108858 g     F .text	0000014c __d2b
1010f028 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101108c4 g     F .text	000000a4 alt_get_fd
1010fbbc g     F .text	00000158 alt_busy_sleep
1010ad6c g     F .text	00000054 _close_r
10110ae0 g     F .text	0000007c memcmp
1010f0e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
101148f8 g       *ABS*	00000000 __alt_stack_base
1010f138 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
101041d4 g     F .text	00000154 __swsetup_r
1010c844 g     F .text	000008e8 .hidden __divdf3
10106078 g     F .text	00000118 __sfp
10108abc g     F .text	00000078 __copybits
1011165c g     O .rwdata	00000408 __malloc_av_
101061c4 g     F .text	00000004 __sinit_lock_release
1010d384 g     F .text	00000718 .hidden __muldf3
10109354 g     F .text	00000054 __sread
101107bc g     F .text	00000108 alt_find_file
1010fd98 g     F .text	000000a4 alt_dev_llist_insert
10100290 g     F .text	00000088 trdb_d5m_write
1010eb7c g     F .text	00000024 __malloc_lock
1010ed60 g     F .text	000000b0 sbrk
10105dcc g     F .text	0000005c _fflush_r
1010adc0 g     F .text	000000c4 _calloc_r
10100564 g     F .text	00000094 fill_frame
10114798 g       *ABS*	00000000 __bss_start
10107a9c g     F .text	00000128 memset
101004f8 g     F .text	0000006c main
101012a0 g     F .text	00000068 delay_ms
101147bc g     O .bss	00000004 alt_envp
101147a4 g     O .bss	00000004 __malloc_max_total_mem
1010f088 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101016d4 g     F .text	00000148 i2c_read
1010acf4 g     F .text	00000018 __swbuf
10109488 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
1010af74 g     F .text	00000014 fclose
10104528 g     F .text	00001688 _dtoa_r
10106f08 g     F .text	0000080c _malloc_r
1010b45c g     F .text	00000030 __ascii_wctomb
10112c98 g     O .rwdata	00000004 alt_errno
10106ae8 g     F .text	000000c4 _fwalk
10108c60 g     F .text	000000c8 putc
10101b58 g     F .text	00000084 .hidden __divsi3
101061f8 g     F .text	00000124 _malloc_trim_r
10110e28 g       *ABS*	00000000 __CTOR_END__
10109490 g     F .text	000000dc strcmp
10110e28 g       *ABS*	00000000 __flash_rodata_start
10110e28 g       *ABS*	00000000 __DTOR_LIST__
1010d12c g     F .text	00000088 .hidden __nedf2
1010efa8 g     F .text	00000038 alt_irq_init
1010ecfc g     F .text	00000064 alt_release_fd
1011108c g     O .rodata	00000100 .hidden __clz_tab
10114798 g     O .bss	00000004 _PathLocale
10110a94 g     F .text	00000014 atexit
1010ad0c g     F .text	00000060 _write_r
10106d28 g     F .text	00000018 setlocale
10112c70 g     O .rwdata	00000004 _impure_ptr
101147b4 g     O .bss	00000004 alt_argc
10105bb0 g     F .text	0000021c __sflush_r
1010fe9c g     F .text	00000060 _do_dtors
10106d14 g     F .text	00000008 __locale_cjk_lang
101014c4 g     F .text	00000064 i2c_init
10100020 g       .exceptions	00000000 alt_irq_entry
101086e8 g     F .text	00000064 __ulp
101061e0 g     F .text	00000018 __fp_unlock_all
10112c84 g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
10106d40 g     F .text	0000000c localeconv
1010ff30 g     F .text	00000050 alt_ic_isr_register
10112cac g       *ABS*	00000000 _edata
101148f8 g       *ABS*	00000000 _end
1010af88 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
1010f560 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10100318 g     F .text	000000a0 trdb_d5m_read
10110008 g     F .text	0000008c alt_ic_irq_disable
101093b0 g     F .text	0000007c __swrite
10112c7c g     O .rwdata	00000004 __malloc_trim_threshold
10106d08 g     F .text	0000000c __locale_msgcharset
10110aa8 g     F .text	00000038 exit
10106bac g     F .text	000000c4 _fwalk_reent
101084ec g     F .text	000001fc __mdiff
10101bdc g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
101061bc g     F .text	00000004 __sfp_lock_release
10110df4 g     F .text	00000034 _exit
1010fa90 g     F .text	0000012c alt_alarm_start
10106d4c g     F .text	000001bc __smakebuf_r
101019b0 g     F .text	000001a8 i2c_read_array
10101e6c g     F .text	00000098 strlen
10110410 g     F .text	00000154 open
1010d1b4 g     F .text	000000dc .hidden __gedf2
10112c80 g     O .rwdata	00000004 __wctomb
10109668 g     F .text	00000018 __sprint_r
1010fefc g     F .text	00000034 alt_icache_flush_all
10112ca0 g     O .rwdata	00000004 alt_priority_mask
1010ff80 g     F .text	00000088 alt_ic_irq_enable
101040fc g     F .text	0000001c __vfprintf_internal
10101308 g     F .text	00000044 delay_clk
1010b48c g     F .text	0000005c _wctomb_r
1010da9c g     F .text	000008fc .hidden __subdf3
10107f20 g     F .text	000000b0 __lo0bits
10112ca4 g     O .rwdata	00000008 alt_alarm_list
1010fe3c g     F .text	00000060 _do_ctors
1010b39c g     F .text	000000c0 wcrtomb
1010e63c g     F .text	000000d0 close
1010e96c g     F .text	00000084 alt_load
1010b110 g     F .text	00000080 fputwc
101061c0 g     F .text	00000004 __sinit_lock_acquire
10107c94 g     F .text	00000120 __multadd
10107c6c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	1091fe04 	addi	r2,r2,18424
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	1091fe04 	addi	r2,r2,18424
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6d817 	ldw	r2,-25760(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6d817 	ldw	r2,-25760(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6ab1b14 	ori	gp,gp,44140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	1091e614 	ori	r2,r2,18328

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d23e14 	ori	r3,r3,18680

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010e96c0 	call	1010e96c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010eb000 	call	1010eb00 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <alt_after_alt_main>

10100290 <trdb_d5m_write>:
#define I2C_FREQ              (50000000) /* Clock frequency driving the i2c core: 50 MHz in this example (ADAPT TO YOUR DESIGN) */
#define TRDB_D5M_I2C_ADDRESS  0x0//I2C_0_BASE

#define TRDB_D5M_0_I2C_0_BASE 0x0 //I2C_0_BASE   /* i2c base address from system.h (ADAPT TO YOUR DESIGN) */

bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
10100290:	defff804 	addi	sp,sp,-32
10100294:	dfc00715 	stw	ra,28(sp)
10100298:	df000615 	stw	fp,24(sp)
1010029c:	df000604 	addi	fp,sp,24
101002a0:	e13ffd15 	stw	r4,-12(fp)
101002a4:	2807883a 	mov	r3,r5
101002a8:	3005883a 	mov	r2,r6
101002ac:	e0fffe05 	stb	r3,-8(fp)
101002b0:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
101002b4:	e0bfff0b 	ldhu	r2,-4(fp)
101002b8:	1004d23a 	srli	r2,r2,8
101002bc:	e0bffc05 	stb	r2,-16(fp)
101002c0:	e0bfff0b 	ldhu	r2,-4(fp)
101002c4:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
101002c8:	e0fffe03 	ldbu	r3,-8(fp)
101002cc:	e13ffc04 	addi	r4,fp,-16
101002d0:	00800084 	movi	r2,2
101002d4:	d8800015 	stw	r2,0(sp)
101002d8:	200f883a 	mov	r7,r4
101002dc:	180d883a 	mov	r6,r3
101002e0:	000b883a 	mov	r5,zero
101002e4:	e13ffd17 	ldw	r4,-12(fp)
101002e8:	010181c0 	call	1010181c <i2c_write_array>
101002ec:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
101002f0:	e0bffb17 	ldw	r2,-20(fp)
101002f4:	10000226 	beq	r2,zero,10100300 <trdb_d5m_write+0x70>
        return false;
101002f8:	0005883a 	mov	r2,zero
101002fc:	00000106 	br	10100304 <trdb_d5m_write+0x74>
    } else {
        return true;
10100300:	00800044 	movi	r2,1
    }
}
10100304:	e037883a 	mov	sp,fp
10100308:	dfc00117 	ldw	ra,4(sp)
1010030c:	df000017 	ldw	fp,0(sp)
10100310:	dec00204 	addi	sp,sp,8
10100314:	f800283a 	ret

10100318 <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
10100318:	defff804 	addi	sp,sp,-32
1010031c:	dfc00715 	stw	ra,28(sp)
10100320:	df000615 	stw	fp,24(sp)
10100324:	df000604 	addi	fp,sp,24
10100328:	e13ffd15 	stw	r4,-12(fp)
1010032c:	2805883a 	mov	r2,r5
10100330:	e1bfff15 	stw	r6,-4(fp)
10100334:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
10100338:	e03ffc05 	stb	zero,-16(fp)
1010033c:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10100340:	e0fffe03 	ldbu	r3,-8(fp)
10100344:	e13ffc04 	addi	r4,fp,-16
10100348:	00800084 	movi	r2,2
1010034c:	d8800015 	stw	r2,0(sp)
10100350:	200f883a 	mov	r7,r4
10100354:	180d883a 	mov	r6,r3
10100358:	000b883a 	mov	r5,zero
1010035c:	e13ffd17 	ldw	r4,-12(fp)
10100360:	01019b00 	call	101019b0 <i2c_read_array>
10100364:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10100368:	e0bffb17 	ldw	r2,-20(fp)
1010036c:	10000226 	beq	r2,zero,10100378 <trdb_d5m_read+0x60>
        return false;
10100370:	0005883a 	mov	r2,zero
10100374:	00000b06 	br	101003a4 <trdb_d5m_read+0x8c>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
10100378:	e0bffc03 	ldbu	r2,-16(fp)
1010037c:	10803fcc 	andi	r2,r2,255
10100380:	1004923a 	slli	r2,r2,8
10100384:	1007883a 	mov	r3,r2
10100388:	e0bffc43 	ldbu	r2,-15(fp)
1010038c:	10803fcc 	andi	r2,r2,255
10100390:	1885883a 	add	r2,r3,r2
10100394:	1007883a 	mov	r3,r2
10100398:	e0bfff17 	ldw	r2,-4(fp)
1010039c:	10c0000d 	sth	r3,0(r2)
        return true;
101003a0:	00800044 	movi	r2,1
    }
}
101003a4:	e037883a 	mov	sp,fp
101003a8:	dfc00117 	ldw	ra,4(sp)
101003ac:	df000017 	ldw	fp,0(sp)
101003b0:	dec00204 	addi	sp,sp,8
101003b4:	f800283a 	ret

101003b8 <main_i2c>:

//int main(void) {
bool main_i2c(void){
101003b8:	defffc04 	addi	sp,sp,-16
101003bc:	dfc00315 	stw	ra,12(sp)
101003c0:	df000215 	stw	fp,8(sp)
101003c4:	df000204 	addi	fp,sp,8
	i2c_dev i2c = i2c_inst((void *) TRDB_D5M_0_I2C_0_BASE);
101003c8:	0009883a 	mov	r4,zero
101003cc:	01014980 	call	10101498 <i2c_inst>
101003d0:	e0bfff15 	stw	r2,-4(fp)
    i2c_init(&i2c, I2C_FREQ);
101003d4:	e0bfff04 	addi	r2,fp,-4
101003d8:	0140bef4 	movhi	r5,763
101003dc:	297c2004 	addi	r5,r5,-3968
101003e0:	1009883a 	mov	r4,r2
101003e4:	01014c40 	call	101014c4 <i2c_init>

    bool success = true;
101003e8:	00800044 	movi	r2,1
101003ec:	e0bffe05 	stb	r2,-8(fp)

    /* write the 16-bit value 54 to register 1 */
    success &= trdb_d5m_write(&i2c, 1, 54);
101003f0:	e0bfff04 	addi	r2,fp,-4
101003f4:	01800d84 	movi	r6,54
101003f8:	01400044 	movi	r5,1
101003fc:	1009883a 	mov	r4,r2
10100400:	01002900 	call	10100290 <trdb_d5m_write>
10100404:	e0fffe03 	ldbu	r3,-8(fp)
10100408:	10803fcc 	andi	r2,r2,255
1010040c:	1884703a 	and	r2,r3,r2
10100410:	1004c03a 	cmpne	r2,r2,zero
10100414:	e0bffe05 	stb	r2,-8(fp)
    success &= trdb_d5m_write(&i2c, 2, 16);
10100418:	e0bfff04 	addi	r2,fp,-4
1010041c:	01800404 	movi	r6,16
10100420:	01400084 	movi	r5,2
10100424:	1009883a 	mov	r4,r2
10100428:	01002900 	call	10100290 <trdb_d5m_write>
1010042c:	e0fffe03 	ldbu	r3,-8(fp)
10100430:	10803fcc 	andi	r2,r2,255
10100434:	1884703a 	and	r2,r3,r2
10100438:	1004c03a 	cmpne	r2,r2,zero
1010043c:	e0bffe05 	stb	r2,-8(fp)
    success &= trdb_d5m_write(&i2c, 3, 1919);
10100440:	e0bfff04 	addi	r2,fp,-4
10100444:	0181dfc4 	movi	r6,1919
10100448:	014000c4 	movi	r5,3
1010044c:	1009883a 	mov	r4,r2
10100450:	01002900 	call	10100290 <trdb_d5m_write>
10100454:	e0fffe03 	ldbu	r3,-8(fp)
10100458:	10803fcc 	andi	r2,r2,255
1010045c:	1884703a 	and	r2,r3,r2
10100460:	1004c03a 	cmpne	r2,r2,zero
10100464:	e0bffe05 	stb	r2,-8(fp)
    success &= trdb_d5m_write(&i2c, 4, 2559);
10100468:	e0bfff04 	addi	r2,fp,-4
1010046c:	01827fc4 	movi	r6,2559
10100470:	01400104 	movi	r5,4
10100474:	1009883a 	mov	r4,r2
10100478:	01002900 	call	10100290 <trdb_d5m_write>
1010047c:	e0fffe03 	ldbu	r3,-8(fp)
10100480:	10803fcc 	andi	r2,r2,255
10100484:	1884703a 	and	r2,r3,r2
10100488:	1004c03a 	cmpne	r2,r2,zero
1010048c:	e0bffe05 	stb	r2,-8(fp)
    success &= trdb_d5m_write(&i2c, 34, 51);
10100490:	e0bfff04 	addi	r2,fp,-4
10100494:	01800cc4 	movi	r6,51
10100498:	01400884 	movi	r5,34
1010049c:	1009883a 	mov	r4,r2
101004a0:	01002900 	call	10100290 <trdb_d5m_write>
101004a4:	e0fffe03 	ldbu	r3,-8(fp)
101004a8:	10803fcc 	andi	r2,r2,255
101004ac:	1884703a 	and	r2,r3,r2
101004b0:	1004c03a 	cmpne	r2,r2,zero
101004b4:	e0bffe05 	stb	r2,-8(fp)
    success &= trdb_d5m_write(&i2c, 35, 51);
101004b8:	e0bfff04 	addi	r2,fp,-4
101004bc:	01800cc4 	movi	r6,51
101004c0:	014008c4 	movi	r5,35
101004c4:	1009883a 	mov	r4,r2
101004c8:	01002900 	call	10100290 <trdb_d5m_write>
101004cc:	e0fffe03 	ldbu	r3,-8(fp)
101004d0:	10803fcc 	andi	r2,r2,255
101004d4:	1884703a 	and	r2,r3,r2
101004d8:	1004c03a 	cmpne	r2,r2,zero
101004dc:	e0bffe05 	stb	r2,-8(fp)

    return success;
101004e0:	e0bffe03 	ldbu	r2,-8(fp)
        return EXIT_SUCCESS;
    } else {
        return EXIT_FAILURE;
    }
    */
}
101004e4:	e037883a 	mov	sp,fp
101004e8:	dfc00117 	ldw	ra,4(sp)
101004ec:	df000017 	ldw	fp,0(sp)
101004f0:	dec00204 	addi	sp,sp,8
101004f4:	f800283a 	ret

101004f8 <main>:
void new_cam_init();
void cam_write(uint8_t command);


int main()
{
101004f8:	defffe04 	addi	sp,sp,-8
101004fc:	dfc00115 	stw	ra,4(sp)
10100500:	df000015 	stw	fp,0(sp)
10100504:	d839883a 	mov	fp,sp
	printf("Hello from Nios II!\n");
10100508:	01040474 	movhi	r4,4113
1010050c:	21038a04 	addi	r4,r4,3624
10100510:	0101e580 	call	10101e58 <puts>

	// write in the SDRAM with the alterafs library
	clear_frame(0);
10100514:	0009883a 	mov	r4,zero
10100518:	01006d80 	call	101006d8 <clear_frame>
	clear_frame(NPIX);
1010051c:	01000174 	movhi	r4,5
10100520:	212c0004 	addi	r4,r4,-20480
10100524:	01006d80 	call	101006d8 <clear_frame>

//	CAM_init();
	new_cam_init();
10100528:	01007640 	call	10100764 <new_cam_init>
	LCD_init();
1010052c:	010094c0 	call	1010094c <LCD_init>

	//test cam
	cam_write(0b00001111);
10100530:	010003c4 	movi	r4,15
10100534:	01008640 	call	10100864 <cam_write>
	cam_write(0b00010111);
10100538:	010005c4 	movi	r4,23
1010053c:	01008640 	call	10100864 <cam_write>


	//IOWR_8DIRECT(D5M_TOP_0_BASE, 0, 0b00001100); //Start frame 01 and enable avalon master (also enable clkgen en cam)
//	IOWR_8DIRECT(D5M_TOP_0_BASE, 0, 0b00001111);
	// Display bit is at 1 and reset bit is at 0
	IOWR_16DIRECT(ADRR, REG_S_INSTR, 0b10000000);
10100540:	00c02004 	movi	r3,128
10100544:	00840034 	movhi	r2,4096
10100548:	10820304 	addi	r2,r2,2060
1010054c:	10c0002d 	sthio	r3,0(r2)
//	uint8_t frame_cmd = 0b00001111;

	while(1){
//		delay_ms(100);
		cam_write(0b00001111);
10100550:	010003c4 	movi	r4,15
10100554:	01008640 	call	10100864 <cam_write>
//		delay_ms(100);
		cam_write(0b00010111);
10100558:	010005c4 	movi	r4,23
1010055c:	01008640 	call	10100864 <cam_write>
//		IOWR_8DIRECT(D5M_TOP_0_BASE, 0, frame_cmd);
//

		// delay_ms(100);
		// IOWR_16DIRECT(ADRR, REG_S_INSTR, 0b00000000);
	}
10100560:	003ffb06 	br	10100550 <main+0x58>

10100564 <fill_frame>:
	return 0;
}

void fill_frame(int offset, int color){
10100564:	defffb04 	addi	sp,sp,-20
10100568:	dfc00415 	stw	ra,16(sp)
1010056c:	df000315 	stw	fp,12(sp)
10100570:	df000304 	addi	fp,sp,12
10100574:	e13ffe15 	stw	r4,-8(fp)
10100578:	e17fff15 	stw	r5,-4(fp)
	printf("writing frame with offset %d\n", offset);
1010057c:	e17ffe17 	ldw	r5,-8(fp)
10100580:	01040474 	movhi	r4,4113
10100584:	21038f04 	addi	r4,r4,3644
10100588:	0101d3c0 	call	10101d3c <printf>
	for(int i=0; i< NPIX;i++) {
1010058c:	e03ffd15 	stw	zero,-12(fp)
10100590:	00000c06 	br	101005c4 <fill_frame+0x60>
		IOWR_32DIRECT(HPS_0_BRIDGES_BASE + offset + i*4, 0, color);
10100594:	e0bffd17 	ldw	r2,-12(fp)
10100598:	1085883a 	add	r2,r2,r2
1010059c:	1085883a 	add	r2,r2,r2
101005a0:	1007883a 	mov	r3,r2
101005a4:	e0bffe17 	ldw	r2,-8(fp)
101005a8:	1885883a 	add	r2,r3,r2
101005ac:	1007883a 	mov	r3,r2
101005b0:	e0bfff17 	ldw	r2,-4(fp)
101005b4:	18800035 	stwio	r2,0(r3)
	return 0;
}

void fill_frame(int offset, int color){
	printf("writing frame with offset %d\n", offset);
	for(int i=0; i< NPIX;i++) {
101005b8:	e0bffd17 	ldw	r2,-12(fp)
101005bc:	10800044 	addi	r2,r2,1
101005c0:	e0bffd15 	stw	r2,-12(fp)
101005c4:	e0fffd17 	ldw	r3,-12(fp)
101005c8:	00800174 	movhi	r2,5
101005cc:	10abffc4 	addi	r2,r2,-20481
101005d0:	10fff00e 	bge	r2,r3,10100594 <fill_frame+0x30>
		IOWR_32DIRECT(HPS_0_BRIDGES_BASE + offset + i*4, 0, color);
	}
	printf("Finished filling memory\n");
101005d4:	01040474 	movhi	r4,4113
101005d8:	21039704 	addi	r4,r4,3676
101005dc:	0101e580 	call	10101e58 <puts>
}
101005e0:	0001883a 	nop
101005e4:	e037883a 	mov	sp,fp
101005e8:	dfc00117 	ldw	ra,4(sp)
101005ec:	df000017 	ldw	fp,0(sp)
101005f0:	dec00204 	addi	sp,sp,8
101005f4:	f800283a 	ret

101005f8 <fill_square>:

void fill_square(int col, int line, int color){
101005f8:	defffa04 	addi	sp,sp,-24
101005fc:	df000515 	stw	fp,20(sp)
10100600:	df000504 	addi	fp,sp,20
10100604:	e13ffd15 	stw	r4,-12(fp)
10100608:	e17ffe15 	stw	r5,-8(fp)
1010060c:	e1bfff15 	stw	r6,-4(fp)
	int i, j;
	for(i=20*col; i<20*(col+1); i++){
10100610:	e0bffd17 	ldw	r2,-12(fp)
10100614:	10800524 	muli	r2,r2,20
10100618:	e0bffb15 	stw	r2,-20(fp)
1010061c:	00002406 	br	101006b0 <fill_square+0xb8>
		for(j=20*line; j<20*(line+1); j++){
10100620:	e0bffe17 	ldw	r2,-8(fp)
10100624:	10800524 	muli	r2,r2,20
10100628:	e0bffc15 	stw	r2,-16(fp)
1010062c:	00001806 	br	10100690 <fill_square+0x98>
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE + 0 + (i+320*j)*4, 0, color);
10100630:	e0bffc17 	ldw	r2,-16(fp)
10100634:	10c05024 	muli	r3,r2,320
10100638:	e0bffb17 	ldw	r2,-20(fp)
1010063c:	1885883a 	add	r2,r3,r2
10100640:	1085883a 	add	r2,r2,r2
10100644:	1085883a 	add	r2,r2,r2
10100648:	1007883a 	mov	r3,r2
1010064c:	e0bfff17 	ldw	r2,-4(fp)
10100650:	18800035 	stwio	r2,0(r3)
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE + NPIX + (i+320*j)*4, 0, color);
10100654:	e0bffc17 	ldw	r2,-16(fp)
10100658:	10c05024 	muli	r3,r2,320
1010065c:	e0bffb17 	ldw	r2,-20(fp)
10100660:	1887883a 	add	r3,r3,r2
10100664:	00800074 	movhi	r2,1
10100668:	108b0004 	addi	r2,r2,11264
1010066c:	1885883a 	add	r2,r3,r2
10100670:	1085883a 	add	r2,r2,r2
10100674:	1085883a 	add	r2,r2,r2
10100678:	1007883a 	mov	r3,r2
1010067c:	e0bfff17 	ldw	r2,-4(fp)
10100680:	18800035 	stwio	r2,0(r3)
}

void fill_square(int col, int line, int color){
	int i, j;
	for(i=20*col; i<20*(col+1); i++){
		for(j=20*line; j<20*(line+1); j++){
10100684:	e0bffc17 	ldw	r2,-16(fp)
10100688:	10800044 	addi	r2,r2,1
1010068c:	e0bffc15 	stw	r2,-16(fp)
10100690:	e0bffe17 	ldw	r2,-8(fp)
10100694:	10800044 	addi	r2,r2,1
10100698:	10800524 	muli	r2,r2,20
1010069c:	e0fffc17 	ldw	r3,-16(fp)
101006a0:	18bfe316 	blt	r3,r2,10100630 <fill_square+0x38>
	printf("Finished filling memory\n");
}

void fill_square(int col, int line, int color){
	int i, j;
	for(i=20*col; i<20*(col+1); i++){
101006a4:	e0bffb17 	ldw	r2,-20(fp)
101006a8:	10800044 	addi	r2,r2,1
101006ac:	e0bffb15 	stw	r2,-20(fp)
101006b0:	e0bffd17 	ldw	r2,-12(fp)
101006b4:	10800044 	addi	r2,r2,1
101006b8:	10800524 	muli	r2,r2,20
101006bc:	e0fffb17 	ldw	r3,-20(fp)
101006c0:	18bfd716 	blt	r3,r2,10100620 <fill_square+0x28>
		for(j=20*line; j<20*(line+1); j++){
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE + 0 + (i+320*j)*4, 0, color);
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE + NPIX + (i+320*j)*4, 0, color);
		}
	}
}
101006c4:	0001883a 	nop
101006c8:	e037883a 	mov	sp,fp
101006cc:	df000017 	ldw	fp,0(sp)
101006d0:	dec00104 	addi	sp,sp,4
101006d4:	f800283a 	ret

101006d8 <clear_frame>:

void clear_frame(int offset){
101006d8:	defffc04 	addi	sp,sp,-16
101006dc:	dfc00315 	stw	ra,12(sp)
101006e0:	df000215 	stw	fp,8(sp)
101006e4:	df000204 	addi	fp,sp,8
101006e8:	e13fff15 	stw	r4,-4(fp)
	printf("writing frame with offset %d\n", offset);
101006ec:	e17fff17 	ldw	r5,-4(fp)
101006f0:	01040474 	movhi	r4,4113
101006f4:	21038f04 	addi	r4,r4,3644
101006f8:	0101d3c0 	call	10101d3c <printf>
	for(int i=0; i< NPIX;i++) {
101006fc:	e03ffe15 	stw	zero,-8(fp)
10100700:	00000b06 	br	10100730 <clear_frame+0x58>
		IOWR_32DIRECT(HPS_0_BRIDGES_BASE + offset + i*4, 0, 0x00);
10100704:	e0bffe17 	ldw	r2,-8(fp)
10100708:	1085883a 	add	r2,r2,r2
1010070c:	1085883a 	add	r2,r2,r2
10100710:	1007883a 	mov	r3,r2
10100714:	e0bfff17 	ldw	r2,-4(fp)
10100718:	1885883a 	add	r2,r3,r2
1010071c:	0007883a 	mov	r3,zero
10100720:	10c00035 	stwio	r3,0(r2)
	}
}

void clear_frame(int offset){
	printf("writing frame with offset %d\n", offset);
	for(int i=0; i< NPIX;i++) {
10100724:	e0bffe17 	ldw	r2,-8(fp)
10100728:	10800044 	addi	r2,r2,1
1010072c:	e0bffe15 	stw	r2,-8(fp)
10100730:	e0fffe17 	ldw	r3,-8(fp)
10100734:	00800174 	movhi	r2,5
10100738:	10abffc4 	addi	r2,r2,-20481
1010073c:	10fff10e 	bge	r2,r3,10100704 <clear_frame+0x2c>
		IOWR_32DIRECT(HPS_0_BRIDGES_BASE + offset + i*4, 0, 0x00);
	}
	printf("Finished clearing memory\n");
10100740:	01040474 	movhi	r4,4113
10100744:	21039d04 	addi	r4,r4,3700
10100748:	0101e580 	call	10101e58 <puts>
}
1010074c:	0001883a 	nop
10100750:	e037883a 	mov	sp,fp
10100754:	dfc00117 	ldw	ra,4(sp)
10100758:	df000017 	ldw	fp,0(sp)
1010075c:	dec00204 	addi	sp,sp,8
10100760:	f800283a 	ret

10100764 <new_cam_init>:
	IOWR_8DIRECT(D5M_TOP_0_BASE, 12, 0x00);
}
*/


void new_cam_init(){
10100764:	deffff04 	addi	sp,sp,-4
10100768:	df000015 	stw	fp,0(sp)
1010076c:	d839883a 	mov	fp,sp
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 0, 0b00000000);
10100770:	0007883a 	mov	r3,zero
10100774:	00840034 	movhi	r2,4096
10100778:	10820404 	addi	r2,r2,2064
1010077c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 0, 0b00000100);
10100780:	00c00104 	movi	r3,4
10100784:	00840034 	movhi	r2,4096
10100788:	10820404 	addi	r2,r2,2064
1010078c:	10c00025 	stbio	r3,0(r2)

	IOWR_8DIRECT(D5M_SIMU_0_BASE, 1, 0x55);
10100790:	00c01544 	movi	r3,85
10100794:	00840034 	movhi	r2,4096
10100798:	10820444 	addi	r2,r2,2065
1010079c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 2, 0x55);
101007a0:	00c01544 	movi	r3,85
101007a4:	00840034 	movhi	r2,4096
101007a8:	10820484 	addi	r2,r2,2066
101007ac:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 3, 0x55);
101007b0:	00c01544 	movi	r3,85
101007b4:	00840034 	movhi	r2,4096
101007b8:	108204c4 	addi	r2,r2,2067
101007bc:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 4, 0x56);
101007c0:	00c01584 	movi	r3,86
101007c4:	00840034 	movhi	r2,4096
101007c8:	10820504 	addi	r2,r2,2068
101007cc:	10c00025 	stbio	r3,0(r2)

	IOWR_8DIRECT(D5M_SIMU_0_BASE, 5, 0x00);
101007d0:	0007883a 	mov	r3,zero
101007d4:	00840034 	movhi	r2,4096
101007d8:	10820544 	addi	r2,r2,2069
101007dc:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 6, 0x00);
101007e0:	0007883a 	mov	r3,zero
101007e4:	00840034 	movhi	r2,4096
101007e8:	10820584 	addi	r2,r2,2070
101007ec:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 7, 0x00);
101007f0:	0007883a 	mov	r3,zero
101007f4:	00840034 	movhi	r2,4096
101007f8:	108205c4 	addi	r2,r2,2071
101007fc:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 8, 0x00);
10100800:	0007883a 	mov	r3,zero
10100804:	00840034 	movhi	r2,4096
10100808:	10820604 	addi	r2,r2,2072
1010080c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 9, 0x00);
10100810:	0007883a 	mov	r3,zero
10100814:	00840034 	movhi	r2,4096
10100818:	10820644 	addi	r2,r2,2073
1010081c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 10, 0x00);
10100820:	0007883a 	mov	r3,zero
10100824:	00840034 	movhi	r2,4096
10100828:	10820684 	addi	r2,r2,2074
1010082c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 11, 0x00);
10100830:	0007883a 	mov	r3,zero
10100834:	00840034 	movhi	r2,4096
10100838:	108206c4 	addi	r2,r2,2075
1010083c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 12, 0x00);
10100840:	0007883a 	mov	r3,zero
10100844:	00840034 	movhi	r2,4096
10100848:	10820704 	addi	r2,r2,2076
1010084c:	10c00025 	stbio	r3,0(r2)

}
10100850:	0001883a 	nop
10100854:	e037883a 	mov	sp,fp
10100858:	df000017 	ldw	fp,0(sp)
1010085c:	dec00104 	addi	sp,sp,4
10100860:	f800283a 	ret

10100864 <cam_write>:


void cam_write(uint8_t command){
10100864:	defffc04 	addi	sp,sp,-16
10100868:	dfc00315 	stw	ra,12(sp)
1010086c:	df000215 	stw	fp,8(sp)
10100870:	df000204 	addi	fp,sp,8
10100874:	2005883a 	mov	r2,r4
10100878:	e0bfff05 	stb	r2,-4(fp)
	uint8_t tmp;
	printf("write frame %d\n", command>>3);
1010087c:	e0bfff03 	ldbu	r2,-4(fp)
10100880:	1004d0fa 	srli	r2,r2,3
10100884:	10803fcc 	andi	r2,r2,255
10100888:	100b883a 	mov	r5,r2
1010088c:	01040474 	movhi	r4,4113
10100890:	2103a404 	addi	r4,r4,3728
10100894:	0101d3c0 	call	10101d3c <printf>
	IOWR_8DIRECT(D5M_SIMU_0_BASE, 0, command);
10100898:	e0ffff03 	ldbu	r3,-4(fp)
1010089c:	00840034 	movhi	r2,4096
101008a0:	10820404 	addi	r2,r2,2064
101008a4:	10c00025 	stbio	r3,0(r2)
//	IOWR_8DIRECT(D5M_TOP_0_BASE, 0, command);

	tmp = IORD_8DIRECT(D5M_SIMU_0_BASE, 0);
101008a8:	00840034 	movhi	r2,4096
101008ac:	10820404 	addi	r2,r2,2064
101008b0:	10800023 	ldbuio	r2,0(r2)
101008b4:	10803fcc 	andi	r2,r2,255
101008b8:	e0bffe05 	stb	r2,-8(fp)
//	tmp = IORD_8DIRECT(D5M_TOP_0_BASE, 0);

	if((tmp&0b00100000) != 0)
101008bc:	e0bffe03 	ldbu	r2,-8(fp)
101008c0:	1080080c 	andi	r2,r2,32
101008c4:	10000926 	beq	r2,zero,101008ec <cam_write+0x88>
	{
		printf("busy\n");
101008c8:	01040474 	movhi	r4,4113
101008cc:	2103a804 	addi	r4,r4,3744
101008d0:	0101e580 	call	10101e58 <puts>
	}

	while((IORD_8DIRECT(D5M_SIMU_0_BASE, 0)&0b00100000) != 0x00)
101008d4:	00000506 	br	101008ec <cam_write+0x88>
//	while((IORD_8DIRECT(D5M_TOP_0_BASE, 0)&0b00100000) != 0x00)
	{
		delay_clk(1000000);
101008d8:	010003f4 	movhi	r4,15
101008dc:	21109004 	addi	r4,r4,16960
101008e0:	01013080 	call	10101308 <delay_clk>
		printf(".");
101008e4:	01000b84 	movi	r4,46
101008e8:	0101d800 	call	10101d80 <putchar>
	if((tmp&0b00100000) != 0)
	{
		printf("busy\n");
	}

	while((IORD_8DIRECT(D5M_SIMU_0_BASE, 0)&0b00100000) != 0x00)
101008ec:	00840034 	movhi	r2,4096
101008f0:	10820404 	addi	r2,r2,2064
101008f4:	10800023 	ldbuio	r2,0(r2)
101008f8:	10803fcc 	andi	r2,r2,255
101008fc:	1080080c 	andi	r2,r2,32
10100900:	103ff51e 	bne	r2,zero,101008d8 <cam_write+0x74>
//	while((IORD_8DIRECT(D5M_TOP_0_BASE, 0)&0b00100000) != 0x00)
	{
		delay_clk(1000000);
		printf(".");
	}
	tmp = IORD_8DIRECT(D5M_SIMU_0_BASE, 0);
10100904:	00840034 	movhi	r2,4096
10100908:	10820404 	addi	r2,r2,2064
1010090c:	10800023 	ldbuio	r2,0(r2)
10100910:	10803fcc 	andi	r2,r2,255
10100914:	e0bffe05 	stb	r2,-8(fp)
//	tmp = IORD_8DIRECT(D5M_TOP_0_BASE, 0);
	printf("\nend write frame %d\n", command>>3);
10100918:	e0bfff03 	ldbu	r2,-4(fp)
1010091c:	1004d0fa 	srli	r2,r2,3
10100920:	10803fcc 	andi	r2,r2,255
10100924:	100b883a 	mov	r5,r2
10100928:	01040474 	movhi	r4,4113
1010092c:	2103aa04 	addi	r4,r4,3752
10100930:	0101d3c0 	call	10101d3c <printf>
}
10100934:	0001883a 	nop
10100938:	e037883a 	mov	sp,fp
1010093c:	dfc00117 	ldw	ra,4(sp)
10100940:	df000017 	ldw	fp,0(sp)
10100944:	dec00204 	addi	sp,sp,8
10100948:	f800283a 	ret

1010094c <LCD_init>:

void LCD_init(){
1010094c:	defffe04 	addi	sp,sp,-8
10100950:	dfc00115 	stw	ra,4(sp)
10100954:	df000015 	stw	fp,0(sp)
10100958:	d839883a 	mov	fp,sp
	send_reset();
1010095c:	01012300 	call	10101230 <send_reset>
	// Exit sleep
	IOWR_16DIRECT(ADRR, REG_CMD, 0x11);
10100960:	00c00444 	movi	r3,17
10100964:	00840034 	movhi	r2,4096
10100968:	10820204 	addi	r2,r2,2056
1010096c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100970:	01000504 	movi	r4,20
10100974:	01013080 	call	10101308 <delay_clk>

	// Power CTRL B
	IOWR_16DIRECT(ADRR, REG_CMD, 0xCF);
10100978:	00c033c4 	movi	r3,207
1010097c:	00840034 	movhi	r2,4096
10100980:	10820204 	addi	r2,r2,2056
10100984:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100988:	01000504 	movi	r4,20
1010098c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100990:	0007883a 	mov	r3,zero
10100994:	00840034 	movhi	r2,4096
10100998:	10820284 	addi	r2,r2,2058
1010099c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101009a0:	01000504 	movi	r4,20
101009a4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x81);
101009a8:	00c02044 	movi	r3,129
101009ac:	00840034 	movhi	r2,4096
101009b0:	10820284 	addi	r2,r2,2058
101009b4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101009b8:	01000504 	movi	r4,20
101009bc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0xC0); // 0x30 selon datasheet
101009c0:	00c03004 	movi	r3,192
101009c4:	00840034 	movhi	r2,4096
101009c8:	10820284 	addi	r2,r2,2058
101009cc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101009d0:	01000504 	movi	r4,20
101009d4:	01013080 	call	10101308 <delay_clk>

	// power on sequence control
	IOWR_16DIRECT(ADRR, REG_CMD, 0xED);
101009d8:	00c03b44 	movi	r3,237
101009dc:	00840034 	movhi	r2,4096
101009e0:	10820204 	addi	r2,r2,2056
101009e4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101009e8:	01000504 	movi	r4,20
101009ec:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x64);
101009f0:	00c01904 	movi	r3,100
101009f4:	00840034 	movhi	r2,4096
101009f8:	10820284 	addi	r2,r2,2058
101009fc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a00:	01000504 	movi	r4,20
10100a04:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x03);
10100a08:	00c000c4 	movi	r3,3
10100a0c:	00840034 	movhi	r2,4096
10100a10:	10820284 	addi	r2,r2,2058
10100a14:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a18:	01000504 	movi	r4,20
10100a1c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x12);
10100a20:	00c00484 	movi	r3,18
10100a24:	00840034 	movhi	r2,4096
10100a28:	10820284 	addi	r2,r2,2058
10100a2c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a30:	01000504 	movi	r4,20
10100a34:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x81);
10100a38:	00c02044 	movi	r3,129
10100a3c:	00840034 	movhi	r2,4096
10100a40:	10820284 	addi	r2,r2,2058
10100a44:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a48:	01000504 	movi	r4,20
10100a4c:	01013080 	call	10101308 <delay_clk>
	// Driver timing control A
	IOWR_16DIRECT(ADRR, REG_CMD, 0xE8);
10100a50:	00c03a04 	movi	r3,232
10100a54:	00840034 	movhi	r2,4096
10100a58:	10820204 	addi	r2,r2,2056
10100a5c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a60:	01000504 	movi	r4,20
10100a64:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x85);
10100a68:	00c02144 	movi	r3,133
10100a6c:	00840034 	movhi	r2,4096
10100a70:	10820284 	addi	r2,r2,2058
10100a74:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a78:	01000504 	movi	r4,20
10100a7c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x01);
10100a80:	00c00044 	movi	r3,1
10100a84:	00840034 	movhi	r2,4096
10100a88:	10820284 	addi	r2,r2,2058
10100a8c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100a90:	01000504 	movi	r4,20
10100a94:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x798); // should not be a problem since we have 16bits
10100a98:	00c1e604 	movi	r3,1944
10100a9c:	00840034 	movhi	r2,4096
10100aa0:	10820284 	addi	r2,r2,2058
10100aa4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100aa8:	01000504 	movi	r4,20
10100aac:	01013080 	call	10101308 <delay_clk>
	// Power control A
	IOWR_16DIRECT(ADRR, REG_CMD, 0xCB);
10100ab0:	00c032c4 	movi	r3,203
10100ab4:	00840034 	movhi	r2,4096
10100ab8:	10820204 	addi	r2,r2,2056
10100abc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ac0:	01000504 	movi	r4,20
10100ac4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x39);
10100ac8:	00c00e44 	movi	r3,57
10100acc:	00840034 	movhi	r2,4096
10100ad0:	10820284 	addi	r2,r2,2058
10100ad4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ad8:	01000504 	movi	r4,20
10100adc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x2C);
10100ae0:	00c00b04 	movi	r3,44
10100ae4:	00840034 	movhi	r2,4096
10100ae8:	10820284 	addi	r2,r2,2058
10100aec:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100af0:	01000504 	movi	r4,20
10100af4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100af8:	0007883a 	mov	r3,zero
10100afc:	00840034 	movhi	r2,4096
10100b00:	10820284 	addi	r2,r2,2058
10100b04:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b08:	01000504 	movi	r4,20
10100b0c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x34);
10100b10:	00c00d04 	movi	r3,52
10100b14:	00840034 	movhi	r2,4096
10100b18:	10820284 	addi	r2,r2,2058
10100b1c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b20:	01000504 	movi	r4,20
10100b24:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x02);
10100b28:	00c00084 	movi	r3,2
10100b2c:	00840034 	movhi	r2,4096
10100b30:	10820284 	addi	r2,r2,2058
10100b34:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b38:	01000504 	movi	r4,20
10100b3c:	01013080 	call	10101308 <delay_clk>
	// pump ratio control
	IOWR_16DIRECT(ADRR, REG_CMD, 0xF7);
10100b40:	00c03dc4 	movi	r3,247
10100b44:	00840034 	movhi	r2,4096
10100b48:	10820204 	addi	r2,r2,2056
10100b4c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b50:	01000504 	movi	r4,20
10100b54:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x20);
10100b58:	00c00804 	movi	r3,32
10100b5c:	00840034 	movhi	r2,4096
10100b60:	10820284 	addi	r2,r2,2058
10100b64:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b68:	01000504 	movi	r4,20
10100b6c:	01013080 	call	10101308 <delay_clk>
	// Driver timing control B
	IOWR_16DIRECT(ADRR, REG_CMD, 0xEA);
10100b70:	00c03a84 	movi	r3,234
10100b74:	00840034 	movhi	r2,4096
10100b78:	10820204 	addi	r2,r2,2056
10100b7c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b80:	01000504 	movi	r4,20
10100b84:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100b88:	0007883a 	mov	r3,zero
10100b8c:	00840034 	movhi	r2,4096
10100b90:	10820284 	addi	r2,r2,2058
10100b94:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100b98:	01000504 	movi	r4,20
10100b9c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100ba0:	0007883a 	mov	r3,zero
10100ba4:	00840034 	movhi	r2,4096
10100ba8:	10820284 	addi	r2,r2,2058
10100bac:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100bb0:	01000504 	movi	r4,20
10100bb4:	01013080 	call	10101308 <delay_clk>
	// Frame control
	IOWR_16DIRECT(ADRR, REG_CMD, 0xB1);
10100bb8:	00c02c44 	movi	r3,177
10100bbc:	00840034 	movhi	r2,4096
10100bc0:	10820204 	addi	r2,r2,2056
10100bc4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100bc8:	01000504 	movi	r4,20
10100bcc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100bd0:	0007883a 	mov	r3,zero
10100bd4:	00840034 	movhi	r2,4096
10100bd8:	10820284 	addi	r2,r2,2058
10100bdc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100be0:	01000504 	movi	r4,20
10100be4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x1B);
10100be8:	00c006c4 	movi	r3,27
10100bec:	00840034 	movhi	r2,4096
10100bf0:	10820284 	addi	r2,r2,2058
10100bf4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100bf8:	01000504 	movi	r4,20
10100bfc:	01013080 	call	10101308 <delay_clk>
	// Display function control
	IOWR_16DIRECT(ADRR, REG_CMD, 0xB6);
10100c00:	00c02d84 	movi	r3,182
10100c04:	00840034 	movhi	r2,4096
10100c08:	10820204 	addi	r2,r2,2056
10100c0c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c10:	01000504 	movi	r4,20
10100c14:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0A);
10100c18:	00c00284 	movi	r3,10
10100c1c:	00840034 	movhi	r2,4096
10100c20:	10820284 	addi	r2,r2,2058
10100c24:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c28:	01000504 	movi	r4,20
10100c2c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0xA2);
10100c30:	00c02884 	movi	r3,162
10100c34:	00840034 	movhi	r2,4096
10100c38:	10820284 	addi	r2,r2,2058
10100c3c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c40:	01000504 	movi	r4,20
10100c44:	01013080 	call	10101308 <delay_clk>
	// Power control 1
	IOWR_16DIRECT(ADRR, REG_CMD, 0xC0);
10100c48:	00c03004 	movi	r3,192
10100c4c:	00840034 	movhi	r2,4096
10100c50:	10820204 	addi	r2,r2,2056
10100c54:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c58:	01000504 	movi	r4,20
10100c5c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x05);
10100c60:	00c00144 	movi	r3,5
10100c64:	00840034 	movhi	r2,4096
10100c68:	10820284 	addi	r2,r2,2058
10100c6c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c70:	01000504 	movi	r4,20
10100c74:	01013080 	call	10101308 <delay_clk>
	// Power control 2
	IOWR_16DIRECT(ADRR, REG_CMD, 0xC1);
10100c78:	00c03044 	movi	r3,193
10100c7c:	00840034 	movhi	r2,4096
10100c80:	10820204 	addi	r2,r2,2056
10100c84:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100c88:	01000504 	movi	r4,20
10100c8c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x11);
10100c90:	00c00444 	movi	r3,17
10100c94:	00840034 	movhi	r2,4096
10100c98:	10820284 	addi	r2,r2,2058
10100c9c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ca0:	01000504 	movi	r4,20
10100ca4:	01013080 	call	10101308 <delay_clk>
	// VCM control 1
	IOWR_16DIRECT(ADRR, REG_CMD, 0xC5);
10100ca8:	00c03144 	movi	r3,197
10100cac:	00840034 	movhi	r2,4096
10100cb0:	10820204 	addi	r2,r2,2056
10100cb4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100cb8:	01000504 	movi	r4,20
10100cbc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x45);
10100cc0:	00c01144 	movi	r3,69
10100cc4:	00840034 	movhi	r2,4096
10100cc8:	10820284 	addi	r2,r2,2058
10100ccc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100cd0:	01000504 	movi	r4,20
10100cd4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x45);
10100cd8:	00c01144 	movi	r3,69
10100cdc:	00840034 	movhi	r2,4096
10100ce0:	10820284 	addi	r2,r2,2058
10100ce4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ce8:	01000504 	movi	r4,20
10100cec:	01013080 	call	10101308 <delay_clk>
	// VCM control 2
	IOWR_16DIRECT(ADRR, REG_CMD, 0xC7);
10100cf0:	00c031c4 	movi	r3,199
10100cf4:	00840034 	movhi	r2,4096
10100cf8:	10820204 	addi	r2,r2,2056
10100cfc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d00:	01000504 	movi	r4,20
10100d04:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0xA2);
10100d08:	00c02884 	movi	r3,162
10100d0c:	00840034 	movhi	r2,4096
10100d10:	10820284 	addi	r2,r2,2058
10100d14:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d18:	01000504 	movi	r4,20
10100d1c:	01013080 	call	10101308 <delay_clk>
	// Memory access control
	IOWR_16DIRECT(ADRR, REG_CMD, 0x36);
10100d20:	00c00d84 	movi	r3,54
10100d24:	00840034 	movhi	r2,4096
10100d28:	10820204 	addi	r2,r2,2056
10100d2c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d30:	01000504 	movi	r4,20
10100d34:	01013080 	call	10101308 <delay_clk>
	// bit MV rotates the screen 90*
	IOWR_16DIRECT(ADRR, REG_DATA, 0b01101000); // BGR order
10100d38:	00c01a04 	movi	r3,104
10100d3c:	00840034 	movhi	r2,4096
10100d40:	10820284 	addi	r2,r2,2058
10100d44:	10c0002d 	sthio	r3,0(r2)
	//	IOWR_16DIRECT(ADRR, REG_DATA, 0x08); // BGR order
	delay_clk(DELAY);
10100d48:	01000504 	movi	r4,20
10100d4c:	01013080 	call	10101308 <delay_clk>
	// Enable 3G
	IOWR_16DIRECT(ADRR, REG_CMD, 0xF2);
10100d50:	00c03c84 	movi	r3,242
10100d54:	00840034 	movhi	r2,4096
10100d58:	10820204 	addi	r2,r2,2056
10100d5c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d60:	01000504 	movi	r4,20
10100d64:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00); // Disable 3Gamma correction
10100d68:	0007883a 	mov	r3,zero
10100d6c:	00840034 	movhi	r2,4096
10100d70:	10820284 	addi	r2,r2,2058
10100d74:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d78:	01000504 	movi	r4,20
10100d7c:	01013080 	call	10101308 <delay_clk>

	// here comes the gamma correction positive
	IOWR_16DIRECT(ADRR, REG_CMD, 0xE0);
10100d80:	00c03804 	movi	r3,224
10100d84:	00840034 	movhi	r2,4096
10100d88:	10820204 	addi	r2,r2,2056
10100d8c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100d90:	01000504 	movi	r4,20
10100d94:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0F);
10100d98:	00c003c4 	movi	r3,15
10100d9c:	00840034 	movhi	r2,4096
10100da0:	10820284 	addi	r2,r2,2058
10100da4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100da8:	01000504 	movi	r4,20
10100dac:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x26);
10100db0:	00c00984 	movi	r3,38
10100db4:	00840034 	movhi	r2,4096
10100db8:	10820284 	addi	r2,r2,2058
10100dbc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100dc0:	01000504 	movi	r4,20
10100dc4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x24);
10100dc8:	00c00904 	movi	r3,36
10100dcc:	00840034 	movhi	r2,4096
10100dd0:	10820284 	addi	r2,r2,2058
10100dd4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100dd8:	01000504 	movi	r4,20
10100ddc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0B);
10100de0:	00c002c4 	movi	r3,11
10100de4:	00840034 	movhi	r2,4096
10100de8:	10820284 	addi	r2,r2,2058
10100dec:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100df0:	01000504 	movi	r4,20
10100df4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0E);
10100df8:	00c00384 	movi	r3,14
10100dfc:	00840034 	movhi	r2,4096
10100e00:	10820284 	addi	r2,r2,2058
10100e04:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e08:	01000504 	movi	r4,20
10100e0c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x08);
10100e10:	00c00204 	movi	r3,8
10100e14:	00840034 	movhi	r2,4096
10100e18:	10820284 	addi	r2,r2,2058
10100e1c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e20:	01000504 	movi	r4,20
10100e24:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x4B);
10100e28:	00c012c4 	movi	r3,75
10100e2c:	00840034 	movhi	r2,4096
10100e30:	10820284 	addi	r2,r2,2058
10100e34:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e38:	01000504 	movi	r4,20
10100e3c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0xA8);
10100e40:	00c02a04 	movi	r3,168
10100e44:	00840034 	movhi	r2,4096
10100e48:	10820284 	addi	r2,r2,2058
10100e4c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e50:	01000504 	movi	r4,20
10100e54:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x3B);
10100e58:	00c00ec4 	movi	r3,59
10100e5c:	00840034 	movhi	r2,4096
10100e60:	10820284 	addi	r2,r2,2058
10100e64:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e68:	01000504 	movi	r4,20
10100e6c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0A);
10100e70:	00c00284 	movi	r3,10
10100e74:	00840034 	movhi	r2,4096
10100e78:	10820284 	addi	r2,r2,2058
10100e7c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e80:	01000504 	movi	r4,20
10100e84:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x14);
10100e88:	00c00504 	movi	r3,20
10100e8c:	00840034 	movhi	r2,4096
10100e90:	10820284 	addi	r2,r2,2058
10100e94:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100e98:	01000504 	movi	r4,20
10100e9c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x06);
10100ea0:	00c00184 	movi	r3,6
10100ea4:	00840034 	movhi	r2,4096
10100ea8:	10820284 	addi	r2,r2,2058
10100eac:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100eb0:	01000504 	movi	r4,20
10100eb4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x10);
10100eb8:	00c00404 	movi	r3,16
10100ebc:	00840034 	movhi	r2,4096
10100ec0:	10820284 	addi	r2,r2,2058
10100ec4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ec8:	01000504 	movi	r4,20
10100ecc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x09);
10100ed0:	00c00244 	movi	r3,9
10100ed4:	00840034 	movhi	r2,4096
10100ed8:	10820284 	addi	r2,r2,2058
10100edc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ee0:	01000504 	movi	r4,20
10100ee4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100ee8:	0007883a 	mov	r3,zero
10100eec:	00840034 	movhi	r2,4096
10100ef0:	10820284 	addi	r2,r2,2058
10100ef4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100ef8:	01000504 	movi	r4,20
10100efc:	01013080 	call	10101308 <delay_clk>

	// here comes the gamma correction negative
	IOWR_16DIRECT(ADRR, REG_CMD, 0xE1);
10100f00:	00c03844 	movi	r3,225
10100f04:	00840034 	movhi	r2,4096
10100f08:	10820204 	addi	r2,r2,2056
10100f0c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f10:	01000504 	movi	r4,20
10100f14:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10100f18:	0007883a 	mov	r3,zero
10100f1c:	00840034 	movhi	r2,4096
10100f20:	10820284 	addi	r2,r2,2058
10100f24:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f28:	01000504 	movi	r4,20
10100f2c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x1C);
10100f30:	00c00704 	movi	r3,28
10100f34:	00840034 	movhi	r2,4096
10100f38:	10820284 	addi	r2,r2,2058
10100f3c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f40:	01000504 	movi	r4,20
10100f44:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x20);
10100f48:	00c00804 	movi	r3,32
10100f4c:	00840034 	movhi	r2,4096
10100f50:	10820284 	addi	r2,r2,2058
10100f54:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f58:	01000504 	movi	r4,20
10100f5c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x04);
10100f60:	00c00104 	movi	r3,4
10100f64:	00840034 	movhi	r2,4096
10100f68:	10820284 	addi	r2,r2,2058
10100f6c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f70:	01000504 	movi	r4,20
10100f74:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x10);
10100f78:	00c00404 	movi	r3,16
10100f7c:	00840034 	movhi	r2,4096
10100f80:	10820284 	addi	r2,r2,2058
10100f84:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100f88:	01000504 	movi	r4,20
10100f8c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x08);
10100f90:	00c00204 	movi	r3,8
10100f94:	00840034 	movhi	r2,4096
10100f98:	10820284 	addi	r2,r2,2058
10100f9c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100fa0:	01000504 	movi	r4,20
10100fa4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x34);
10100fa8:	00c00d04 	movi	r3,52
10100fac:	00840034 	movhi	r2,4096
10100fb0:	10820284 	addi	r2,r2,2058
10100fb4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100fb8:	01000504 	movi	r4,20
10100fbc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x47);
10100fc0:	00c011c4 	movi	r3,71
10100fc4:	00840034 	movhi	r2,4096
10100fc8:	10820284 	addi	r2,r2,2058
10100fcc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100fd0:	01000504 	movi	r4,20
10100fd4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x44);
10100fd8:	00c01104 	movi	r3,68
10100fdc:	00840034 	movhi	r2,4096
10100fe0:	10820284 	addi	r2,r2,2058
10100fe4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10100fe8:	01000504 	movi	r4,20
10100fec:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x05);
10100ff0:	00c00144 	movi	r3,5
10100ff4:	00840034 	movhi	r2,4096
10100ff8:	10820284 	addi	r2,r2,2058
10100ffc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101000:	01000504 	movi	r4,20
10101004:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0B);
10101008:	00c002c4 	movi	r3,11
1010100c:	00840034 	movhi	r2,4096
10101010:	10820284 	addi	r2,r2,2058
10101014:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101018:	01000504 	movi	r4,20
1010101c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x09);
10101020:	00c00244 	movi	r3,9
10101024:	00840034 	movhi	r2,4096
10101028:	10820284 	addi	r2,r2,2058
1010102c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101030:	01000504 	movi	r4,20
10101034:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x2F);
10101038:	00c00bc4 	movi	r3,47
1010103c:	00840034 	movhi	r2,4096
10101040:	10820284 	addi	r2,r2,2058
10101044:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101048:	01000504 	movi	r4,20
1010104c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x36);
10101050:	00c00d84 	movi	r3,54
10101054:	00840034 	movhi	r2,4096
10101058:	10820284 	addi	r2,r2,2058
1010105c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101060:	01000504 	movi	r4,20
10101064:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x0F);
10101068:	00c003c4 	movi	r3,15
1010106c:	00840034 	movhi	r2,4096
10101070:	10820284 	addi	r2,r2,2058
10101074:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101078:	01000504 	movi	r4,20
1010107c:	01013080 	call	10101308 <delay_clk>
	//	IOWR_16DIRECT(ADRR, REG_DATA, 0x3F);
	//	delay_clk(DELAY);

	//	horizontal
	// Column address set
	IOWR_16DIRECT(ADRR, REG_CMD, 0x2A);
10101080:	00c00a84 	movi	r3,42
10101084:	00840034 	movhi	r2,4096
10101088:	10820204 	addi	r2,r2,2056
1010108c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101090:	01000504 	movi	r4,20
10101094:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10101098:	0007883a 	mov	r3,zero
1010109c:	00840034 	movhi	r2,4096
101010a0:	10820284 	addi	r2,r2,2058
101010a4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101010a8:	01000504 	movi	r4,20
101010ac:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
101010b0:	0007883a 	mov	r3,zero
101010b4:	00840034 	movhi	r2,4096
101010b8:	10820284 	addi	r2,r2,2058
101010bc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101010c0:	01000504 	movi	r4,20
101010c4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x01);
101010c8:	00c00044 	movi	r3,1
101010cc:	00840034 	movhi	r2,4096
101010d0:	10820284 	addi	r2,r2,2058
101010d4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101010d8:	01000504 	movi	r4,20
101010dc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x3F);
101010e0:	00c00fc4 	movi	r3,63
101010e4:	00840034 	movhi	r2,4096
101010e8:	10820284 	addi	r2,r2,2058
101010ec:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101010f0:	01000504 	movi	r4,20
101010f4:	01013080 	call	10101308 <delay_clk>

	// Page address set
	IOWR_16DIRECT(ADRR, REG_CMD, 0x2B);
101010f8:	00c00ac4 	movi	r3,43
101010fc:	00840034 	movhi	r2,4096
10101100:	10820204 	addi	r2,r2,2056
10101104:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101108:	01000504 	movi	r4,20
1010110c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10101110:	0007883a 	mov	r3,zero
10101114:	00840034 	movhi	r2,4096
10101118:	10820284 	addi	r2,r2,2058
1010111c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101120:	01000504 	movi	r4,20
10101124:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10101128:	0007883a 	mov	r3,zero
1010112c:	00840034 	movhi	r2,4096
10101130:	10820284 	addi	r2,r2,2058
10101134:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101138:	01000504 	movi	r4,20
1010113c:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
10101140:	0007883a 	mov	r3,zero
10101144:	00840034 	movhi	r2,4096
10101148:	10820284 	addi	r2,r2,2058
1010114c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101150:	01000504 	movi	r4,20
10101154:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0xEF);
10101158:	00c03bc4 	movi	r3,239
1010115c:	00840034 	movhi	r2,4096
10101160:	10820284 	addi	r2,r2,2058
10101164:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101168:	01000504 	movi	r4,20
1010116c:	01013080 	call	10101308 <delay_clk>
	// COLMOD : pixel format set
	IOWR_16DIRECT(ADRR, REG_CMD, 0x3A);
10101170:	00c00e84 	movi	r3,58
10101174:	00840034 	movhi	r2,4096
10101178:	10820204 	addi	r2,r2,2056
1010117c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101180:	01000504 	movi	r4,20
10101184:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x55);
10101188:	00c01544 	movi	r3,85
1010118c:	00840034 	movhi	r2,4096
10101190:	10820284 	addi	r2,r2,2058
10101194:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101198:	01000504 	movi	r4,20
1010119c:	01013080 	call	10101308 <delay_clk>
	// Interface control
	IOWR_16DIRECT(ADRR, REG_CMD, 0xF6);
101011a0:	00c03d84 	movi	r3,246
101011a4:	00840034 	movhi	r2,4096
101011a8:	10820204 	addi	r2,r2,2056
101011ac:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101011b0:	01000504 	movi	r4,20
101011b4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x01);
101011b8:	00c00044 	movi	r3,1
101011bc:	00840034 	movhi	r2,4096
101011c0:	10820284 	addi	r2,r2,2058
101011c4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101011c8:	01000504 	movi	r4,20
101011cc:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x30);
101011d0:	00c00c04 	movi	r3,48
101011d4:	00840034 	movhi	r2,4096
101011d8:	10820284 	addi	r2,r2,2058
101011dc:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101011e0:	01000504 	movi	r4,20
101011e4:	01013080 	call	10101308 <delay_clk>
	IOWR_16DIRECT(ADRR, REG_DATA, 0x00);
101011e8:	0007883a 	mov	r3,zero
101011ec:	00840034 	movhi	r2,4096
101011f0:	10820284 	addi	r2,r2,2058
101011f4:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
101011f8:	01000504 	movi	r4,20
101011fc:	01013080 	call	10101308 <delay_clk>
	// display on
	IOWR_16DIRECT(ADRR, REG_CMD, 0x29);
10101200:	00c00a44 	movi	r3,41
10101204:	00840034 	movhi	r2,4096
10101208:	10820204 	addi	r2,r2,2056
1010120c:	10c0002d 	sthio	r3,0(r2)
	delay_clk(DELAY);
10101210:	01000504 	movi	r4,20
10101214:	01013080 	call	10101308 <delay_clk>

}
10101218:	0001883a 	nop
1010121c:	e037883a 	mov	sp,fp
10101220:	dfc00117 	ldw	ra,4(sp)
10101224:	df000017 	ldw	fp,0(sp)
10101228:	dec00204 	addi	sp,sp,8
1010122c:	f800283a 	ret

10101230 <send_reset>:

void send_reset(){
10101230:	defffe04 	addi	sp,sp,-8
10101234:	dfc00115 	stw	ra,4(sp)
10101238:	df000015 	stw	fp,0(sp)
1010123c:	d839883a 	mov	fp,sp
	//uint16_t value = IORD_16DIRECT()
	IOWR_16DIRECT(ADRR, REG_S_INSTR, 0b00000000);
10101240:	0007883a 	mov	r3,zero
10101244:	00840034 	movhi	r2,4096
10101248:	10820304 	addi	r2,r2,2060
1010124c:	10c0002d 	sthio	r3,0(r2)
	delay_ms(1);
10101250:	01000044 	movi	r4,1
10101254:	01012a00 	call	101012a0 <delay_ms>
	IOWR_16DIRECT(ADRR, REG_S_INSTR, 0b01000000);
10101258:	00c01004 	movi	r3,64
1010125c:	00840034 	movhi	r2,4096
10101260:	10820304 	addi	r2,r2,2060
10101264:	10c0002d 	sthio	r3,0(r2)
	delay_ms(10);
10101268:	01000284 	movi	r4,10
1010126c:	01012a00 	call	101012a0 <delay_ms>
	IOWR_16DIRECT(ADRR, REG_S_INSTR, 0b00000000);
10101270:	0007883a 	mov	r3,zero
10101274:	00840034 	movhi	r2,4096
10101278:	10820304 	addi	r2,r2,2060
1010127c:	10c0002d 	sthio	r3,0(r2)
	delay_ms(120);
10101280:	01001e04 	movi	r4,120
10101284:	01012a00 	call	101012a0 <delay_ms>
}
10101288:	0001883a 	nop
1010128c:	e037883a 	mov	sp,fp
10101290:	dfc00117 	ldw	ra,4(sp)
10101294:	df000017 	ldw	fp,0(sp)
10101298:	dec00204 	addi	sp,sp,8
1010129c:	f800283a 	ret

101012a0 <delay_ms>:

// wait for duration ms
void delay_ms(int duration){
101012a0:	defffc04 	addi	sp,sp,-16
101012a4:	df000315 	stw	fp,12(sp)
101012a8:	df000304 	addi	fp,sp,12
101012ac:	e13fff15 	stw	r4,-4(fp)
	int i, j;
	for(j=0; j<200; j++){
101012b0:	e03ffe15 	stw	zero,-8(fp)
101012b4:	00000c06 	br	101012e8 <delay_ms+0x48>
		for(i=0; i<50*duration; i++);
101012b8:	e03ffd15 	stw	zero,-12(fp)
101012bc:	00000306 	br	101012cc <delay_ms+0x2c>
101012c0:	e0bffd17 	ldw	r2,-12(fp)
101012c4:	10800044 	addi	r2,r2,1
101012c8:	e0bffd15 	stw	r2,-12(fp)
101012cc:	e0bfff17 	ldw	r2,-4(fp)
101012d0:	10800ca4 	muli	r2,r2,50
101012d4:	e0fffd17 	ldw	r3,-12(fp)
101012d8:	18bff916 	blt	r3,r2,101012c0 <delay_ms+0x20>
}

// wait for duration ms
void delay_ms(int duration){
	int i, j;
	for(j=0; j<200; j++){
101012dc:	e0bffe17 	ldw	r2,-8(fp)
101012e0:	10800044 	addi	r2,r2,1
101012e4:	e0bffe15 	stw	r2,-8(fp)
101012e8:	e0bffe17 	ldw	r2,-8(fp)
101012ec:	10803210 	cmplti	r2,r2,200
101012f0:	103ff11e 	bne	r2,zero,101012b8 <delay_ms+0x18>
		for(i=0; i<50*duration; i++);
	}
}
101012f4:	0001883a 	nop
101012f8:	e037883a 	mov	sp,fp
101012fc:	df000017 	ldw	fp,0(sp)
10101300:	dec00104 	addi	sp,sp,4
10101304:	f800283a 	ret

10101308 <delay_clk>:

// wait for duration ms
void delay_clk(int number){
10101308:	defffd04 	addi	sp,sp,-12
1010130c:	df000215 	stw	fp,8(sp)
10101310:	df000204 	addi	fp,sp,8
10101314:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0; i<number; i++);
10101318:	e03ffe15 	stw	zero,-8(fp)
1010131c:	00000306 	br	1010132c <delay_clk+0x24>
10101320:	e0bffe17 	ldw	r2,-8(fp)
10101324:	10800044 	addi	r2,r2,1
10101328:	e0bffe15 	stw	r2,-8(fp)
1010132c:	e0fffe17 	ldw	r3,-8(fp)
10101330:	e0bfff17 	ldw	r2,-4(fp)
10101334:	18bffa16 	blt	r3,r2,10101320 <delay_clk+0x18>
}
10101338:	0001883a 	nop
1010133c:	e037883a 	mov	sp,fp
10101340:	df000017 	ldw	fp,0(sp)
10101344:	dec00104 	addi	sp,sp,4
10101348:	f800283a 	ret

1010134c <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
1010134c:	defffd04 	addi	sp,sp,-12
10101350:	dfc00215 	stw	ra,8(sp)
10101354:	df000115 	stw	fp,4(sp)
10101358:	df000104 	addi	fp,sp,4
1010135c:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10101360:	e13fff17 	ldw	r4,-4(fp)
10101364:	010ee100 	call	1010ee10 <usleep>
#endif
}
10101368:	0001883a 	nop
1010136c:	e037883a 	mov	sp,fp
10101370:	dfc00117 	ldw	ra,4(sp)
10101374:	df000017 	ldw	fp,0(sp)
10101378:	dec00204 	addi	sp,sp,8
1010137c:	f800283a 	ret

10101380 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
10101380:	defffe04 	addi	sp,sp,-8
10101384:	df000115 	stw	fp,4(sp)
10101388:	df000104 	addi	fp,sp,4
1010138c:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
10101390:	0001883a 	nop
10101394:	e0bfff17 	ldw	r2,-4(fp)
10101398:	10800017 	ldw	r2,0(r2)
1010139c:	10800084 	addi	r2,r2,2
101013a0:	10800023 	ldbuio	r2,0(r2)
101013a4:	10803fcc 	andi	r2,r2,255
101013a8:	1080020c 	andi	r2,r2,8
101013ac:	103ff91e 	bne	r2,zero,10101394 <wait_end_of_transfer+0x14>
}
101013b0:	0001883a 	nop
101013b4:	e037883a 	mov	sp,fp
101013b8:	df000017 	ldw	fp,0(sp)
101013bc:	dec00104 	addi	sp,sp,4
101013c0:	f800283a 	ret

101013c4 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
101013c4:	defffb04 	addi	sp,sp,-20
101013c8:	dfc00415 	stw	ra,16(sp)
101013cc:	df000315 	stw	fp,12(sp)
101013d0:	df000304 	addi	fp,sp,12
101013d4:	e13ffd15 	stw	r4,-12(fp)
101013d8:	2807883a 	mov	r3,r5
101013dc:	3005883a 	mov	r2,r6
101013e0:	e0fffe05 	stb	r3,-8(fp)
101013e4:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
101013e8:	e13ffd17 	ldw	r4,-12(fp)
101013ec:	01013800 	call	10101380 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
101013f0:	e0bffd17 	ldw	r2,-12(fp)
101013f4:	10800017 	ldw	r2,0(r2)
101013f8:	e0fffe03 	ldbu	r3,-8(fp)
101013fc:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10101400:	e0bffd17 	ldw	r2,-12(fp)
10101404:	10800017 	ldw	r2,0(r2)
10101408:	10800044 	addi	r2,r2,1
1010140c:	e0ffff03 	ldbu	r3,-4(fp)
10101410:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10101414:	e13ffd17 	ldw	r4,-12(fp)
10101418:	01013800 	call	10101380 <wait_end_of_transfer>
}
1010141c:	0001883a 	nop
10101420:	e037883a 	mov	sp,fp
10101424:	dfc00117 	ldw	ra,4(sp)
10101428:	df000017 	ldw	fp,0(sp)
1010142c:	dec00204 	addi	sp,sp,8
10101430:	f800283a 	ret

10101434 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10101434:	defffc04 	addi	sp,sp,-16
10101438:	dfc00315 	stw	ra,12(sp)
1010143c:	df000215 	stw	fp,8(sp)
10101440:	df000204 	addi	fp,sp,8
10101444:	e13ffe15 	stw	r4,-8(fp)
10101448:	2805883a 	mov	r2,r5
1010144c:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10101450:	e13ffe17 	ldw	r4,-8(fp)
10101454:	01013800 	call	10101380 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
10101458:	e0bffe17 	ldw	r2,-8(fp)
1010145c:	10800017 	ldw	r2,0(r2)
10101460:	10800044 	addi	r2,r2,1
10101464:	e0ffff03 	ldbu	r3,-4(fp)
10101468:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
1010146c:	e13ffe17 	ldw	r4,-8(fp)
10101470:	01013800 	call	10101380 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10101474:	e0bffe17 	ldw	r2,-8(fp)
10101478:	10800017 	ldw	r2,0(r2)
1010147c:	10800023 	ldbuio	r2,0(r2)
10101480:	10803fcc 	andi	r2,r2,255
}
10101484:	e037883a 	mov	sp,fp
10101488:	dfc00117 	ldw	ra,4(sp)
1010148c:	df000017 	ldw	fp,0(sp)
10101490:	dec00204 	addi	sp,sp,8
10101494:	f800283a 	ret

10101498 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
10101498:	defffd04 	addi	sp,sp,-12
1010149c:	df000215 	stw	fp,8(sp)
101014a0:	df000204 	addi	fp,sp,8
101014a4:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
101014a8:	e0bfff17 	ldw	r2,-4(fp)
101014ac:	e0bffe15 	stw	r2,-8(fp)

    return dev;
101014b0:	e0bffe17 	ldw	r2,-8(fp)
}
101014b4:	e037883a 	mov	sp,fp
101014b8:	df000017 	ldw	fp,0(sp)
101014bc:	dec00104 	addi	sp,sp,4
101014c0:	f800283a 	ret

101014c4 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
101014c4:	defffb04 	addi	sp,sp,-20
101014c8:	dfc00415 	stw	ra,16(sp)
101014cc:	df000315 	stw	fp,12(sp)
101014d0:	dc000215 	stw	r16,8(sp)
101014d4:	df000304 	addi	fp,sp,12
101014d8:	e13ffd15 	stw	r4,-12(fp)
101014dc:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
101014e0:	e0bffd17 	ldw	r2,-12(fp)
101014e4:	10800017 	ldw	r2,0(r2)
101014e8:	140000c4 	addi	r16,r2,3
101014ec:	e0bffe17 	ldw	r2,-8(fp)
101014f0:	014001b4 	movhi	r5,6
101014f4:	2946a004 	addi	r5,r5,6784
101014f8:	1009883a 	mov	r4,r2
101014fc:	0101c500 	call	10101c50 <__udivsi3>
10101500:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10101504:	0104e204 	movi	r4,5000
10101508:	010134c0 	call	1010134c <i2c_usleep>
}
1010150c:	0001883a 	nop
10101510:	e6ffff04 	addi	sp,fp,-4
10101514:	dfc00217 	ldw	ra,8(sp)
10101518:	df000117 	ldw	fp,4(sp)
1010151c:	dc000017 	ldw	r16,0(sp)
10101520:	dec00304 	addi	sp,sp,12
10101524:	f800283a 	ret

10101528 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
10101528:	defffc04 	addi	sp,sp,-16
1010152c:	df000315 	stw	fp,12(sp)
10101530:	df000304 	addi	fp,sp,12
10101534:	e13ffe15 	stw	r4,-8(fp)
10101538:	2805883a 	mov	r2,r5
1010153c:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10101540:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10101544:	e0bfff03 	ldbu	r2,-4(fp)
10101548:	10000426 	beq	r2,zero,1010155c <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
1010154c:	e0bffd17 	ldw	r2,-12(fp)
10101550:	10800814 	ori	r2,r2,32
10101554:	e0bffd15 	stw	r2,-12(fp)
10101558:	00000406 	br	1010156c <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
1010155c:	e0fffd17 	ldw	r3,-12(fp)
10101560:	00bff7c4 	movi	r2,-33
10101564:	1884703a 	and	r2,r3,r2
10101568:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010156c:	e0bffe17 	ldw	r2,-8(fp)
10101570:	10800017 	ldw	r2,0(r2)
10101574:	10800044 	addi	r2,r2,1
10101578:	00c00084 	movi	r3,2
1010157c:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
10101580:	e0bffe17 	ldw	r2,-8(fp)
10101584:	10800017 	ldw	r2,0(r2)
10101588:	10800044 	addi	r2,r2,1
1010158c:	e0fffd17 	ldw	r3,-12(fp)
10101590:	10c00025 	stbio	r3,0(r2)
}
10101594:	0001883a 	nop
10101598:	e037883a 	mov	sp,fp
1010159c:	df000017 	ldw	fp,0(sp)
101015a0:	dec00104 	addi	sp,sp,4
101015a4:	f800283a 	ret

101015a8 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
101015a8:	defffa04 	addi	sp,sp,-24
101015ac:	dfc00515 	stw	ra,20(sp)
101015b0:	df000415 	stw	fp,16(sp)
101015b4:	df000404 	addi	fp,sp,16
101015b8:	e13ffc15 	stw	r4,-16(fp)
101015bc:	2809883a 	mov	r4,r5
101015c0:	3007883a 	mov	r3,r6
101015c4:	3805883a 	mov	r2,r7
101015c8:	e13ffd05 	stb	r4,-12(fp)
101015cc:	e0fffe05 	stb	r3,-8(fp)
101015d0:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101015d4:	e0bffd03 	ldbu	r2,-12(fp)
101015d8:	10803f8c 	andi	r2,r2,254
101015dc:	01800504 	movi	r6,20
101015e0:	100b883a 	mov	r5,r2
101015e4:	e13ffc17 	ldw	r4,-16(fp)
101015e8:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101015ec:	e0bffc17 	ldw	r2,-16(fp)
101015f0:	10800017 	ldw	r2,0(r2)
101015f4:	10800084 	addi	r2,r2,2
101015f8:	10800023 	ldbuio	r2,0(r2)
101015fc:	10803fcc 	andi	r2,r2,255
10101600:	1080004c 	andi	r2,r2,1
10101604:	10000726 	beq	r2,zero,10101624 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101608:	e0bffc17 	ldw	r2,-16(fp)
1010160c:	10800017 	ldw	r2,0(r2)
10101610:	10800044 	addi	r2,r2,1
10101614:	00c00084 	movi	r3,2
10101618:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
1010161c:	00800044 	movi	r2,1
10101620:	00002706 	br	101016c0 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101624:	e0bffe03 	ldbu	r2,-8(fp)
10101628:	01800404 	movi	r6,16
1010162c:	100b883a 	mov	r5,r2
10101630:	e13ffc17 	ldw	r4,-16(fp)
10101634:	01013c40 	call	101013c4 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101638:	e0bffc17 	ldw	r2,-16(fp)
1010163c:	10800017 	ldw	r2,0(r2)
10101640:	10800084 	addi	r2,r2,2
10101644:	10800023 	ldbuio	r2,0(r2)
10101648:	10803fcc 	andi	r2,r2,255
1010164c:	1080004c 	andi	r2,r2,1
10101650:	10000726 	beq	r2,zero,10101670 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101654:	e0bffc17 	ldw	r2,-16(fp)
10101658:	10800017 	ldw	r2,0(r2)
1010165c:	10800044 	addi	r2,r2,1
10101660:	00c00084 	movi	r3,2
10101664:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101668:	00800084 	movi	r2,2
1010166c:	00001406 	br	101016c0 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101670:	e0bfff03 	ldbu	r2,-4(fp)
10101674:	01800484 	movi	r6,18
10101678:	100b883a 	mov	r5,r2
1010167c:	e13ffc17 	ldw	r4,-16(fp)
10101680:	01013c40 	call	101013c4 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101684:	e0bffc17 	ldw	r2,-16(fp)
10101688:	10800017 	ldw	r2,0(r2)
1010168c:	10800084 	addi	r2,r2,2
10101690:	10800023 	ldbuio	r2,0(r2)
10101694:	10803fcc 	andi	r2,r2,255
10101698:	1080004c 	andi	r2,r2,1
1010169c:	10000726 	beq	r2,zero,101016bc <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101016a0:	e0bffc17 	ldw	r2,-16(fp)
101016a4:	10800017 	ldw	r2,0(r2)
101016a8:	10800044 	addi	r2,r2,1
101016ac:	00c00084 	movi	r3,2
101016b0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101016b4:	00800084 	movi	r2,2
101016b8:	00000106 	br	101016c0 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
101016bc:	0005883a 	mov	r2,zero
}
101016c0:	e037883a 	mov	sp,fp
101016c4:	dfc00117 	ldw	ra,4(sp)
101016c8:	df000017 	ldw	fp,0(sp)
101016cc:	dec00204 	addi	sp,sp,8
101016d0:	f800283a 	ret

101016d4 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
101016d4:	defffa04 	addi	sp,sp,-24
101016d8:	dfc00515 	stw	ra,20(sp)
101016dc:	df000415 	stw	fp,16(sp)
101016e0:	df000404 	addi	fp,sp,16
101016e4:	e13ffc15 	stw	r4,-16(fp)
101016e8:	2807883a 	mov	r3,r5
101016ec:	3005883a 	mov	r2,r6
101016f0:	e1ffff15 	stw	r7,-4(fp)
101016f4:	e0fffd05 	stb	r3,-12(fp)
101016f8:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101016fc:	e0bffd03 	ldbu	r2,-12(fp)
10101700:	10803f8c 	andi	r2,r2,254
10101704:	01800504 	movi	r6,20
10101708:	100b883a 	mov	r5,r2
1010170c:	e13ffc17 	ldw	r4,-16(fp)
10101710:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101714:	e0bffc17 	ldw	r2,-16(fp)
10101718:	10800017 	ldw	r2,0(r2)
1010171c:	10800084 	addi	r2,r2,2
10101720:	10800023 	ldbuio	r2,0(r2)
10101724:	10803fcc 	andi	r2,r2,255
10101728:	1080004c 	andi	r2,r2,1
1010172c:	10000726 	beq	r2,zero,1010174c <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101730:	e0bffc17 	ldw	r2,-16(fp)
10101734:	10800017 	ldw	r2,0(r2)
10101738:	10800044 	addi	r2,r2,1
1010173c:	00c00084 	movi	r3,2
10101740:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101744:	00800044 	movi	r2,1
10101748:	00002f06 	br	10101808 <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
1010174c:	e0bffe03 	ldbu	r2,-8(fp)
10101750:	01800404 	movi	r6,16
10101754:	100b883a 	mov	r5,r2
10101758:	e13ffc17 	ldw	r4,-16(fp)
1010175c:	01013c40 	call	101013c4 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101760:	e0bffc17 	ldw	r2,-16(fp)
10101764:	10800017 	ldw	r2,0(r2)
10101768:	10800084 	addi	r2,r2,2
1010176c:	10800023 	ldbuio	r2,0(r2)
10101770:	10803fcc 	andi	r2,r2,255
10101774:	1080004c 	andi	r2,r2,1
10101778:	10000726 	beq	r2,zero,10101798 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010177c:	e0bffc17 	ldw	r2,-16(fp)
10101780:	10800017 	ldw	r2,0(r2)
10101784:	10800044 	addi	r2,r2,1
10101788:	00c00084 	movi	r3,2
1010178c:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101790:	00800084 	movi	r2,2
10101794:	00001c06 	br	10101808 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101798:	e0bffd03 	ldbu	r2,-12(fp)
1010179c:	10800054 	ori	r2,r2,1
101017a0:	10803fcc 	andi	r2,r2,255
101017a4:	01800504 	movi	r6,20
101017a8:	100b883a 	mov	r5,r2
101017ac:	e13ffc17 	ldw	r4,-16(fp)
101017b0:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101017b4:	e0bffc17 	ldw	r2,-16(fp)
101017b8:	10800017 	ldw	r2,0(r2)
101017bc:	10800084 	addi	r2,r2,2
101017c0:	10800023 	ldbuio	r2,0(r2)
101017c4:	10803fcc 	andi	r2,r2,255
101017c8:	1080004c 	andi	r2,r2,1
101017cc:	10000726 	beq	r2,zero,101017ec <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101017d0:	e0bffc17 	ldw	r2,-16(fp)
101017d4:	10800017 	ldw	r2,0(r2)
101017d8:	10800044 	addi	r2,r2,1
101017dc:	00c00084 	movi	r3,2
101017e0:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101017e4:	00800044 	movi	r2,1
101017e8:	00000706 	br	10101808 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
101017ec:	014002c4 	movi	r5,11
101017f0:	e13ffc17 	ldw	r4,-16(fp)
101017f4:	01014340 	call	10101434 <get_data_set_control>
101017f8:	1007883a 	mov	r3,r2
101017fc:	e0bfff17 	ldw	r2,-4(fp)
10101800:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10101804:	0005883a 	mov	r2,zero
}
10101808:	e037883a 	mov	sp,fp
1010180c:	dfc00117 	ldw	ra,4(sp)
10101810:	df000017 	ldw	fp,0(sp)
10101814:	dec00204 	addi	sp,sp,8
10101818:	f800283a 	ret

1010181c <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
1010181c:	defff904 	addi	sp,sp,-28
10101820:	dfc00615 	stw	ra,24(sp)
10101824:	df000515 	stw	fp,20(sp)
10101828:	df000504 	addi	fp,sp,20
1010182c:	e13ffc15 	stw	r4,-16(fp)
10101830:	2807883a 	mov	r3,r5
10101834:	3005883a 	mov	r2,r6
10101838:	e1ffff15 	stw	r7,-4(fp)
1010183c:	e0fffd05 	stb	r3,-12(fp)
10101840:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101844:	e0bffd03 	ldbu	r2,-12(fp)
10101848:	10803f8c 	andi	r2,r2,254
1010184c:	01800504 	movi	r6,20
10101850:	100b883a 	mov	r5,r2
10101854:	e13ffc17 	ldw	r4,-16(fp)
10101858:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010185c:	e0bffc17 	ldw	r2,-16(fp)
10101860:	10800017 	ldw	r2,0(r2)
10101864:	10800084 	addi	r2,r2,2
10101868:	10800023 	ldbuio	r2,0(r2)
1010186c:	10803fcc 	andi	r2,r2,255
10101870:	1080004c 	andi	r2,r2,1
10101874:	10000726 	beq	r2,zero,10101894 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101878:	e0bffc17 	ldw	r2,-16(fp)
1010187c:	10800017 	ldw	r2,0(r2)
10101880:	10800044 	addi	r2,r2,1
10101884:	00c00084 	movi	r3,2
10101888:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
1010188c:	00800044 	movi	r2,1
10101890:	00004206 	br	1010199c <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101894:	e0bffe03 	ldbu	r2,-8(fp)
10101898:	01800404 	movi	r6,16
1010189c:	100b883a 	mov	r5,r2
101018a0:	e13ffc17 	ldw	r4,-16(fp)
101018a4:	01013c40 	call	101013c4 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101018a8:	e0bffc17 	ldw	r2,-16(fp)
101018ac:	10800017 	ldw	r2,0(r2)
101018b0:	10800084 	addi	r2,r2,2
101018b4:	10800023 	ldbuio	r2,0(r2)
101018b8:	10803fcc 	andi	r2,r2,255
101018bc:	1080004c 	andi	r2,r2,1
101018c0:	10000726 	beq	r2,zero,101018e0 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101018c4:	e0bffc17 	ldw	r2,-16(fp)
101018c8:	10800017 	ldw	r2,0(r2)
101018cc:	10800044 	addi	r2,r2,1
101018d0:	00c00084 	movi	r3,2
101018d4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101018d8:	00800084 	movi	r2,2
101018dc:	00002f06 	br	1010199c <i2c_write_array+0x180>
    }

    unsigned int i = 0;
101018e0:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
101018e4:	e03ffb15 	stw	zero,-20(fp)
101018e8:	00002806 	br	1010198c <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
101018ec:	e0800217 	ldw	r2,8(fp)
101018f0:	10bfffc4 	addi	r2,r2,-1
101018f4:	e0fffb17 	ldw	r3,-20(fp)
101018f8:	18800a2e 	bgeu	r3,r2,10101924 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
101018fc:	e0ffff17 	ldw	r3,-4(fp)
10101900:	e0bffb17 	ldw	r2,-20(fp)
10101904:	1885883a 	add	r2,r3,r2
10101908:	10800003 	ldbu	r2,0(r2)
1010190c:	10803fcc 	andi	r2,r2,255
10101910:	01800404 	movi	r6,16
10101914:	100b883a 	mov	r5,r2
10101918:	e13ffc17 	ldw	r4,-16(fp)
1010191c:	01013c40 	call	101013c4 <set_data_control>
10101920:	00000906 	br	10101948 <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101924:	e0ffff17 	ldw	r3,-4(fp)
10101928:	e0bffb17 	ldw	r2,-20(fp)
1010192c:	1885883a 	add	r2,r3,r2
10101930:	10800003 	ldbu	r2,0(r2)
10101934:	10803fcc 	andi	r2,r2,255
10101938:	01800484 	movi	r6,18
1010193c:	100b883a 	mov	r5,r2
10101940:	e13ffc17 	ldw	r4,-16(fp)
10101944:	01013c40 	call	101013c4 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101948:	e0bffc17 	ldw	r2,-16(fp)
1010194c:	10800017 	ldw	r2,0(r2)
10101950:	10800084 	addi	r2,r2,2
10101954:	10800023 	ldbuio	r2,0(r2)
10101958:	10803fcc 	andi	r2,r2,255
1010195c:	1080004c 	andi	r2,r2,1
10101960:	10000726 	beq	r2,zero,10101980 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101964:	e0bffc17 	ldw	r2,-16(fp)
10101968:	10800017 	ldw	r2,0(r2)
1010196c:	10800044 	addi	r2,r2,1
10101970:	00c00084 	movi	r3,2
10101974:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
10101978:	00800084 	movi	r2,2
1010197c:	00000706 	br	1010199c <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101980:	e0bffb17 	ldw	r2,-20(fp)
10101984:	10800044 	addi	r2,r2,1
10101988:	e0bffb15 	stw	r2,-20(fp)
1010198c:	e0fffb17 	ldw	r3,-20(fp)
10101990:	e0800217 	ldw	r2,8(fp)
10101994:	18bfd536 	bltu	r3,r2,101018ec <i2c_write_array+0xd0>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
10101998:	0005883a 	mov	r2,zero
}
1010199c:	e037883a 	mov	sp,fp
101019a0:	dfc00117 	ldw	ra,4(sp)
101019a4:	df000017 	ldw	fp,0(sp)
101019a8:	dec00204 	addi	sp,sp,8
101019ac:	f800283a 	ret

101019b0 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
101019b0:	defff804 	addi	sp,sp,-32
101019b4:	dfc00715 	stw	ra,28(sp)
101019b8:	df000615 	stw	fp,24(sp)
101019bc:	dc000515 	stw	r16,20(sp)
101019c0:	df000604 	addi	fp,sp,24
101019c4:	e13ffb15 	stw	r4,-20(fp)
101019c8:	2807883a 	mov	r3,r5
101019cc:	3005883a 	mov	r2,r6
101019d0:	e1fffe15 	stw	r7,-8(fp)
101019d4:	e0fffc05 	stb	r3,-16(fp)
101019d8:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101019dc:	e0bffc03 	ldbu	r2,-16(fp)
101019e0:	10803f8c 	andi	r2,r2,254
101019e4:	01800504 	movi	r6,20
101019e8:	100b883a 	mov	r5,r2
101019ec:	e13ffb17 	ldw	r4,-20(fp)
101019f0:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101019f4:	e0bffb17 	ldw	r2,-20(fp)
101019f8:	10800017 	ldw	r2,0(r2)
101019fc:	10800084 	addi	r2,r2,2
10101a00:	10800023 	ldbuio	r2,0(r2)
10101a04:	10803fcc 	andi	r2,r2,255
10101a08:	1080004c 	andi	r2,r2,1
10101a0c:	10000726 	beq	r2,zero,10101a2c <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101a10:	e0bffb17 	ldw	r2,-20(fp)
10101a14:	10800017 	ldw	r2,0(r2)
10101a18:	10800044 	addi	r2,r2,1
10101a1c:	00c00084 	movi	r3,2
10101a20:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101a24:	00800044 	movi	r2,1
10101a28:	00004506 	br	10101b40 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101a2c:	e0bffd03 	ldbu	r2,-12(fp)
10101a30:	01800404 	movi	r6,16
10101a34:	100b883a 	mov	r5,r2
10101a38:	e13ffb17 	ldw	r4,-20(fp)
10101a3c:	01013c40 	call	101013c4 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101a40:	e0bffb17 	ldw	r2,-20(fp)
10101a44:	10800017 	ldw	r2,0(r2)
10101a48:	10800084 	addi	r2,r2,2
10101a4c:	10800023 	ldbuio	r2,0(r2)
10101a50:	10803fcc 	andi	r2,r2,255
10101a54:	1080004c 	andi	r2,r2,1
10101a58:	10000726 	beq	r2,zero,10101a78 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101a5c:	e0bffb17 	ldw	r2,-20(fp)
10101a60:	10800017 	ldw	r2,0(r2)
10101a64:	10800044 	addi	r2,r2,1
10101a68:	00c00084 	movi	r3,2
10101a6c:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101a70:	00800084 	movi	r2,2
10101a74:	00003206 	br	10101b40 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101a78:	e0bffc03 	ldbu	r2,-16(fp)
10101a7c:	10800054 	ori	r2,r2,1
10101a80:	10803fcc 	andi	r2,r2,255
10101a84:	01800504 	movi	r6,20
10101a88:	100b883a 	mov	r5,r2
10101a8c:	e13ffb17 	ldw	r4,-20(fp)
10101a90:	01013c40 	call	101013c4 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101a94:	e0bffb17 	ldw	r2,-20(fp)
10101a98:	10800017 	ldw	r2,0(r2)
10101a9c:	10800084 	addi	r2,r2,2
10101aa0:	10800023 	ldbuio	r2,0(r2)
10101aa4:	10803fcc 	andi	r2,r2,255
10101aa8:	1080004c 	andi	r2,r2,1
10101aac:	10000726 	beq	r2,zero,10101acc <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101ab0:	e0bffb17 	ldw	r2,-20(fp)
10101ab4:	10800017 	ldw	r2,0(r2)
10101ab8:	10800044 	addi	r2,r2,1
10101abc:	00c00084 	movi	r3,2
10101ac0:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101ac4:	00800044 	movi	r2,1
10101ac8:	00001d06 	br	10101b40 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10101acc:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10101ad0:	e03ffa15 	stw	zero,-24(fp)
10101ad4:	00001606 	br	10101b30 <i2c_read_array+0x180>
        if (i < size - 1) {
10101ad8:	e0800217 	ldw	r2,8(fp)
10101adc:	10bfffc4 	addi	r2,r2,-1
10101ae0:	e0fffa17 	ldw	r3,-24(fp)
10101ae4:	1880082e 	bgeu	r3,r2,10101b08 <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
10101ae8:	e0fffe17 	ldw	r3,-8(fp)
10101aec:	e0bffa17 	ldw	r2,-24(fp)
10101af0:	18a1883a 	add	r16,r3,r2
10101af4:	01400204 	movi	r5,8
10101af8:	e13ffb17 	ldw	r4,-20(fp)
10101afc:	01014340 	call	10101434 <get_data_set_control>
10101b00:	80800005 	stb	r2,0(r16)
10101b04:	00000706 	br	10101b24 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101b08:	e0fffe17 	ldw	r3,-8(fp)
10101b0c:	e0bffa17 	ldw	r2,-24(fp)
10101b10:	18a1883a 	add	r16,r3,r2
10101b14:	014002c4 	movi	r5,11
10101b18:	e13ffb17 	ldw	r4,-20(fp)
10101b1c:	01014340 	call	10101434 <get_data_set_control>
10101b20:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101b24:	e0bffa17 	ldw	r2,-24(fp)
10101b28:	10800044 	addi	r2,r2,1
10101b2c:	e0bffa15 	stw	r2,-24(fp)
10101b30:	e0fffa17 	ldw	r3,-24(fp)
10101b34:	e0800217 	ldw	r2,8(fp)
10101b38:	18bfe736 	bltu	r3,r2,10101ad8 <i2c_read_array+0x128>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10101b3c:	0005883a 	mov	r2,zero
}
10101b40:	e6ffff04 	addi	sp,fp,-4
10101b44:	dfc00217 	ldw	ra,8(sp)
10101b48:	df000117 	ldw	fp,4(sp)
10101b4c:	dc000017 	ldw	r16,0(sp)
10101b50:	dec00304 	addi	sp,sp,12
10101b54:	f800283a 	ret

10101b58 <__divsi3>:
10101b58:	20001b16 	blt	r4,zero,10101bc8 <__divsi3+0x70>
10101b5c:	000f883a 	mov	r7,zero
10101b60:	28001616 	blt	r5,zero,10101bbc <__divsi3+0x64>
10101b64:	200d883a 	mov	r6,r4
10101b68:	29001a2e 	bgeu	r5,r4,10101bd4 <__divsi3+0x7c>
10101b6c:	00800804 	movi	r2,32
10101b70:	00c00044 	movi	r3,1
10101b74:	00000106 	br	10101b7c <__divsi3+0x24>
10101b78:	10000d26 	beq	r2,zero,10101bb0 <__divsi3+0x58>
10101b7c:	294b883a 	add	r5,r5,r5
10101b80:	10bfffc4 	addi	r2,r2,-1
10101b84:	18c7883a 	add	r3,r3,r3
10101b88:	293ffb36 	bltu	r5,r4,10101b78 <__divsi3+0x20>
10101b8c:	0005883a 	mov	r2,zero
10101b90:	18000726 	beq	r3,zero,10101bb0 <__divsi3+0x58>
10101b94:	0005883a 	mov	r2,zero
10101b98:	31400236 	bltu	r6,r5,10101ba4 <__divsi3+0x4c>
10101b9c:	314dc83a 	sub	r6,r6,r5
10101ba0:	10c4b03a 	or	r2,r2,r3
10101ba4:	1806d07a 	srli	r3,r3,1
10101ba8:	280ad07a 	srli	r5,r5,1
10101bac:	183ffa1e 	bne	r3,zero,10101b98 <__divsi3+0x40>
10101bb0:	38000126 	beq	r7,zero,10101bb8 <__divsi3+0x60>
10101bb4:	0085c83a 	sub	r2,zero,r2
10101bb8:	f800283a 	ret
10101bbc:	014bc83a 	sub	r5,zero,r5
10101bc0:	39c0005c 	xori	r7,r7,1
10101bc4:	003fe706 	br	10101b64 <__divsi3+0xc>
10101bc8:	0109c83a 	sub	r4,zero,r4
10101bcc:	01c00044 	movi	r7,1
10101bd0:	003fe306 	br	10101b60 <__divsi3+0x8>
10101bd4:	00c00044 	movi	r3,1
10101bd8:	003fee06 	br	10101b94 <__divsi3+0x3c>

10101bdc <__modsi3>:
10101bdc:	20001716 	blt	r4,zero,10101c3c <__modsi3+0x60>
10101be0:	000f883a 	mov	r7,zero
10101be4:	2005883a 	mov	r2,r4
10101be8:	28001216 	blt	r5,zero,10101c34 <__modsi3+0x58>
10101bec:	2900162e 	bgeu	r5,r4,10101c48 <__modsi3+0x6c>
10101bf0:	01800804 	movi	r6,32
10101bf4:	00c00044 	movi	r3,1
10101bf8:	00000106 	br	10101c00 <__modsi3+0x24>
10101bfc:	30000a26 	beq	r6,zero,10101c28 <__modsi3+0x4c>
10101c00:	294b883a 	add	r5,r5,r5
10101c04:	31bfffc4 	addi	r6,r6,-1
10101c08:	18c7883a 	add	r3,r3,r3
10101c0c:	293ffb36 	bltu	r5,r4,10101bfc <__modsi3+0x20>
10101c10:	18000526 	beq	r3,zero,10101c28 <__modsi3+0x4c>
10101c14:	1806d07a 	srli	r3,r3,1
10101c18:	11400136 	bltu	r2,r5,10101c20 <__modsi3+0x44>
10101c1c:	1145c83a 	sub	r2,r2,r5
10101c20:	280ad07a 	srli	r5,r5,1
10101c24:	183ffb1e 	bne	r3,zero,10101c14 <__modsi3+0x38>
10101c28:	38000126 	beq	r7,zero,10101c30 <__modsi3+0x54>
10101c2c:	0085c83a 	sub	r2,zero,r2
10101c30:	f800283a 	ret
10101c34:	014bc83a 	sub	r5,zero,r5
10101c38:	003fec06 	br	10101bec <__modsi3+0x10>
10101c3c:	0109c83a 	sub	r4,zero,r4
10101c40:	01c00044 	movi	r7,1
10101c44:	003fe706 	br	10101be4 <__modsi3+0x8>
10101c48:	00c00044 	movi	r3,1
10101c4c:	003ff106 	br	10101c14 <__modsi3+0x38>

10101c50 <__udivsi3>:
10101c50:	200d883a 	mov	r6,r4
10101c54:	2900152e 	bgeu	r5,r4,10101cac <__udivsi3+0x5c>
10101c58:	28001416 	blt	r5,zero,10101cac <__udivsi3+0x5c>
10101c5c:	00800804 	movi	r2,32
10101c60:	00c00044 	movi	r3,1
10101c64:	00000206 	br	10101c70 <__udivsi3+0x20>
10101c68:	10000e26 	beq	r2,zero,10101ca4 <__udivsi3+0x54>
10101c6c:	28000516 	blt	r5,zero,10101c84 <__udivsi3+0x34>
10101c70:	294b883a 	add	r5,r5,r5
10101c74:	10bfffc4 	addi	r2,r2,-1
10101c78:	18c7883a 	add	r3,r3,r3
10101c7c:	293ffa36 	bltu	r5,r4,10101c68 <__udivsi3+0x18>
10101c80:	18000826 	beq	r3,zero,10101ca4 <__udivsi3+0x54>
10101c84:	0005883a 	mov	r2,zero
10101c88:	31400236 	bltu	r6,r5,10101c94 <__udivsi3+0x44>
10101c8c:	314dc83a 	sub	r6,r6,r5
10101c90:	10c4b03a 	or	r2,r2,r3
10101c94:	1806d07a 	srli	r3,r3,1
10101c98:	280ad07a 	srli	r5,r5,1
10101c9c:	183ffa1e 	bne	r3,zero,10101c88 <__udivsi3+0x38>
10101ca0:	f800283a 	ret
10101ca4:	0005883a 	mov	r2,zero
10101ca8:	f800283a 	ret
10101cac:	00c00044 	movi	r3,1
10101cb0:	003ff406 	br	10101c84 <__udivsi3+0x34>

10101cb4 <__umodsi3>:
10101cb4:	2005883a 	mov	r2,r4
10101cb8:	2900122e 	bgeu	r5,r4,10101d04 <__umodsi3+0x50>
10101cbc:	28001116 	blt	r5,zero,10101d04 <__umodsi3+0x50>
10101cc0:	01800804 	movi	r6,32
10101cc4:	00c00044 	movi	r3,1
10101cc8:	00000206 	br	10101cd4 <__umodsi3+0x20>
10101ccc:	30000c26 	beq	r6,zero,10101d00 <__umodsi3+0x4c>
10101cd0:	28000516 	blt	r5,zero,10101ce8 <__umodsi3+0x34>
10101cd4:	294b883a 	add	r5,r5,r5
10101cd8:	31bfffc4 	addi	r6,r6,-1
10101cdc:	18c7883a 	add	r3,r3,r3
10101ce0:	293ffa36 	bltu	r5,r4,10101ccc <__umodsi3+0x18>
10101ce4:	18000626 	beq	r3,zero,10101d00 <__umodsi3+0x4c>
10101ce8:	1806d07a 	srli	r3,r3,1
10101cec:	11400136 	bltu	r2,r5,10101cf4 <__umodsi3+0x40>
10101cf0:	1145c83a 	sub	r2,r2,r5
10101cf4:	280ad07a 	srli	r5,r5,1
10101cf8:	183ffb1e 	bne	r3,zero,10101ce8 <__umodsi3+0x34>
10101cfc:	f800283a 	ret
10101d00:	f800283a 	ret
10101d04:	00c00044 	movi	r3,1
10101d08:	003ff706 	br	10101ce8 <__umodsi3+0x34>

10101d0c <_printf_r>:
10101d0c:	defffd04 	addi	sp,sp,-12
10101d10:	2805883a 	mov	r2,r5
10101d14:	dfc00015 	stw	ra,0(sp)
10101d18:	d9800115 	stw	r6,4(sp)
10101d1c:	d9c00215 	stw	r7,8(sp)
10101d20:	21400217 	ldw	r5,8(r4)
10101d24:	d9c00104 	addi	r7,sp,4
10101d28:	100d883a 	mov	r6,r2
10101d2c:	0101f040 	call	10101f04 <___vfprintf_internal_r>
10101d30:	dfc00017 	ldw	ra,0(sp)
10101d34:	dec00304 	addi	sp,sp,12
10101d38:	f800283a 	ret

10101d3c <printf>:
10101d3c:	defffc04 	addi	sp,sp,-16
10101d40:	dfc00015 	stw	ra,0(sp)
10101d44:	d9400115 	stw	r5,4(sp)
10101d48:	d9800215 	stw	r6,8(sp)
10101d4c:	d9c00315 	stw	r7,12(sp)
10101d50:	00840474 	movhi	r2,4113
10101d54:	108b1c04 	addi	r2,r2,11376
10101d58:	10800017 	ldw	r2,0(r2)
10101d5c:	200b883a 	mov	r5,r4
10101d60:	d9800104 	addi	r6,sp,4
10101d64:	11000217 	ldw	r4,8(r2)
10101d68:	01040fc0 	call	101040fc <__vfprintf_internal>
10101d6c:	dfc00017 	ldw	ra,0(sp)
10101d70:	dec00404 	addi	sp,sp,16
10101d74:	f800283a 	ret

10101d78 <_putchar_r>:
10101d78:	21800217 	ldw	r6,8(r4)
10101d7c:	0108bc01 	jmpi	10108bc0 <_putc_r>

10101d80 <putchar>:
10101d80:	00840474 	movhi	r2,4113
10101d84:	108b1c04 	addi	r2,r2,11376
10101d88:	200b883a 	mov	r5,r4
10101d8c:	11000017 	ldw	r4,0(r2)
10101d90:	21800217 	ldw	r6,8(r4)
10101d94:	0108bc01 	jmpi	10108bc0 <_putc_r>

10101d98 <_puts_r>:
10101d98:	defff604 	addi	sp,sp,-40
10101d9c:	dc000715 	stw	r16,28(sp)
10101da0:	2021883a 	mov	r16,r4
10101da4:	2809883a 	mov	r4,r5
10101da8:	dc400815 	stw	r17,32(sp)
10101dac:	dfc00915 	stw	ra,36(sp)
10101db0:	2823883a 	mov	r17,r5
10101db4:	0101e6c0 	call	10101e6c <strlen>
10101db8:	10c00044 	addi	r3,r2,1
10101dbc:	d8800115 	stw	r2,4(sp)
10101dc0:	00840474 	movhi	r2,4113
10101dc4:	1083b004 	addi	r2,r2,3776
10101dc8:	d8800215 	stw	r2,8(sp)
10101dcc:	00800044 	movi	r2,1
10101dd0:	d8800315 	stw	r2,12(sp)
10101dd4:	00800084 	movi	r2,2
10101dd8:	dc400015 	stw	r17,0(sp)
10101ddc:	d8c00615 	stw	r3,24(sp)
10101de0:	dec00415 	stw	sp,16(sp)
10101de4:	d8800515 	stw	r2,20(sp)
10101de8:	80000226 	beq	r16,zero,10101df4 <_puts_r+0x5c>
10101dec:	80800e17 	ldw	r2,56(r16)
10101df0:	10001426 	beq	r2,zero,10101e44 <_puts_r+0xac>
10101df4:	81400217 	ldw	r5,8(r16)
10101df8:	2880030b 	ldhu	r2,12(r5)
10101dfc:	10c8000c 	andi	r3,r2,8192
10101e00:	1800061e 	bne	r3,zero,10101e1c <_puts_r+0x84>
10101e04:	29001917 	ldw	r4,100(r5)
10101e08:	00f7ffc4 	movi	r3,-8193
10101e0c:	10880014 	ori	r2,r2,8192
10101e10:	20c6703a 	and	r3,r4,r3
10101e14:	2880030d 	sth	r2,12(r5)
10101e18:	28c01915 	stw	r3,100(r5)
10101e1c:	d9800404 	addi	r6,sp,16
10101e20:	8009883a 	mov	r4,r16
10101e24:	010662c0 	call	1010662c <__sfvwrite_r>
10101e28:	1000091e 	bne	r2,zero,10101e50 <_puts_r+0xb8>
10101e2c:	00800284 	movi	r2,10
10101e30:	dfc00917 	ldw	ra,36(sp)
10101e34:	dc400817 	ldw	r17,32(sp)
10101e38:	dc000717 	ldw	r16,28(sp)
10101e3c:	dec00a04 	addi	sp,sp,40
10101e40:	f800283a 	ret
10101e44:	8009883a 	mov	r4,r16
10101e48:	01061a80 	call	101061a8 <__sinit>
10101e4c:	003fe906 	br	10101df4 <_puts_r+0x5c>
10101e50:	00bfffc4 	movi	r2,-1
10101e54:	003ff606 	br	10101e30 <_puts_r+0x98>

10101e58 <puts>:
10101e58:	00840474 	movhi	r2,4113
10101e5c:	108b1c04 	addi	r2,r2,11376
10101e60:	200b883a 	mov	r5,r4
10101e64:	11000017 	ldw	r4,0(r2)
10101e68:	0101d981 	jmpi	10101d98 <_puts_r>

10101e6c <strlen>:
10101e6c:	208000cc 	andi	r2,r4,3
10101e70:	10002026 	beq	r2,zero,10101ef4 <strlen+0x88>
10101e74:	20800007 	ldb	r2,0(r4)
10101e78:	10002026 	beq	r2,zero,10101efc <strlen+0x90>
10101e7c:	2005883a 	mov	r2,r4
10101e80:	00000206 	br	10101e8c <strlen+0x20>
10101e84:	10c00007 	ldb	r3,0(r2)
10101e88:	18001826 	beq	r3,zero,10101eec <strlen+0x80>
10101e8c:	10800044 	addi	r2,r2,1
10101e90:	10c000cc 	andi	r3,r2,3
10101e94:	183ffb1e 	bne	r3,zero,10101e84 <strlen+0x18>
10101e98:	10c00017 	ldw	r3,0(r2)
10101e9c:	01ffbff4 	movhi	r7,65279
10101ea0:	39ffbfc4 	addi	r7,r7,-257
10101ea4:	00ca303a 	nor	r5,zero,r3
10101ea8:	01a02074 	movhi	r6,32897
10101eac:	19c7883a 	add	r3,r3,r7
10101eb0:	31a02004 	addi	r6,r6,-32640
10101eb4:	1946703a 	and	r3,r3,r5
10101eb8:	1986703a 	and	r3,r3,r6
10101ebc:	1800091e 	bne	r3,zero,10101ee4 <strlen+0x78>
10101ec0:	10800104 	addi	r2,r2,4
10101ec4:	10c00017 	ldw	r3,0(r2)
10101ec8:	19cb883a 	add	r5,r3,r7
10101ecc:	00c6303a 	nor	r3,zero,r3
10101ed0:	28c6703a 	and	r3,r5,r3
10101ed4:	1986703a 	and	r3,r3,r6
10101ed8:	183ff926 	beq	r3,zero,10101ec0 <strlen+0x54>
10101edc:	00000106 	br	10101ee4 <strlen+0x78>
10101ee0:	10800044 	addi	r2,r2,1
10101ee4:	10c00007 	ldb	r3,0(r2)
10101ee8:	183ffd1e 	bne	r3,zero,10101ee0 <strlen+0x74>
10101eec:	1105c83a 	sub	r2,r2,r4
10101ef0:	f800283a 	ret
10101ef4:	2005883a 	mov	r2,r4
10101ef8:	003fe706 	br	10101e98 <strlen+0x2c>
10101efc:	0005883a 	mov	r2,zero
10101f00:	f800283a 	ret

10101f04 <___vfprintf_internal_r>:
10101f04:	deffb804 	addi	sp,sp,-288
10101f08:	dfc04715 	stw	ra,284(sp)
10101f0c:	ddc04515 	stw	r23,276(sp)
10101f10:	dd404315 	stw	r21,268(sp)
10101f14:	d9002c15 	stw	r4,176(sp)
10101f18:	282f883a 	mov	r23,r5
10101f1c:	302b883a 	mov	r21,r6
10101f20:	d9c02d15 	stw	r7,180(sp)
10101f24:	df004615 	stw	fp,280(sp)
10101f28:	dd804415 	stw	r22,272(sp)
10101f2c:	dd004215 	stw	r20,264(sp)
10101f30:	dcc04115 	stw	r19,260(sp)
10101f34:	dc804015 	stw	r18,256(sp)
10101f38:	dc403f15 	stw	r17,252(sp)
10101f3c:	dc003e15 	stw	r16,248(sp)
10101f40:	0106d1c0 	call	10106d1c <_localeconv_r>
10101f44:	10800017 	ldw	r2,0(r2)
10101f48:	1009883a 	mov	r4,r2
10101f4c:	d8803415 	stw	r2,208(sp)
10101f50:	0101e6c0 	call	10101e6c <strlen>
10101f54:	d8803715 	stw	r2,220(sp)
10101f58:	d8802c17 	ldw	r2,176(sp)
10101f5c:	10000226 	beq	r2,zero,10101f68 <___vfprintf_internal_r+0x64>
10101f60:	10800e17 	ldw	r2,56(r2)
10101f64:	1000f926 	beq	r2,zero,1010234c <___vfprintf_internal_r+0x448>
10101f68:	b880030b 	ldhu	r2,12(r23)
10101f6c:	10c8000c 	andi	r3,r2,8192
10101f70:	1800061e 	bne	r3,zero,10101f8c <___vfprintf_internal_r+0x88>
10101f74:	b9001917 	ldw	r4,100(r23)
10101f78:	00f7ffc4 	movi	r3,-8193
10101f7c:	10880014 	ori	r2,r2,8192
10101f80:	20c6703a 	and	r3,r4,r3
10101f84:	b880030d 	sth	r2,12(r23)
10101f88:	b8c01915 	stw	r3,100(r23)
10101f8c:	10c0020c 	andi	r3,r2,8
10101f90:	1800c126 	beq	r3,zero,10102298 <___vfprintf_internal_r+0x394>
10101f94:	b8c00417 	ldw	r3,16(r23)
10101f98:	1800bf26 	beq	r3,zero,10102298 <___vfprintf_internal_r+0x394>
10101f9c:	1080068c 	andi	r2,r2,26
10101fa0:	00c00284 	movi	r3,10
10101fa4:	10c0c426 	beq	r2,r3,101022b8 <___vfprintf_internal_r+0x3b4>
10101fa8:	d8c00404 	addi	r3,sp,16
10101fac:	05040474 	movhi	r20,4113
10101fb0:	d9001e04 	addi	r4,sp,120
10101fb4:	a503c184 	addi	r20,r20,3846
10101fb8:	d8c01e15 	stw	r3,120(sp)
10101fbc:	d8002015 	stw	zero,128(sp)
10101fc0:	d8001f15 	stw	zero,124(sp)
10101fc4:	d8003315 	stw	zero,204(sp)
10101fc8:	d8003615 	stw	zero,216(sp)
10101fcc:	d8003815 	stw	zero,224(sp)
10101fd0:	1811883a 	mov	r8,r3
10101fd4:	d8003915 	stw	zero,228(sp)
10101fd8:	d8003a15 	stw	zero,232(sp)
10101fdc:	d8002f15 	stw	zero,188(sp)
10101fe0:	d9002815 	stw	r4,160(sp)
10101fe4:	a8800007 	ldb	r2,0(r21)
10101fe8:	10027b26 	beq	r2,zero,101029d8 <___vfprintf_internal_r+0xad4>
10101fec:	00c00944 	movi	r3,37
10101ff0:	a821883a 	mov	r16,r21
10101ff4:	10c0021e 	bne	r2,r3,10102000 <___vfprintf_internal_r+0xfc>
10101ff8:	00001406 	br	1010204c <___vfprintf_internal_r+0x148>
10101ffc:	10c00326 	beq	r2,r3,1010200c <___vfprintf_internal_r+0x108>
10102000:	84000044 	addi	r16,r16,1
10102004:	80800007 	ldb	r2,0(r16)
10102008:	103ffc1e 	bne	r2,zero,10101ffc <___vfprintf_internal_r+0xf8>
1010200c:	8563c83a 	sub	r17,r16,r21
10102010:	88000e26 	beq	r17,zero,1010204c <___vfprintf_internal_r+0x148>
10102014:	d8c02017 	ldw	r3,128(sp)
10102018:	d8801f17 	ldw	r2,124(sp)
1010201c:	45400015 	stw	r21,0(r8)
10102020:	1c47883a 	add	r3,r3,r17
10102024:	10800044 	addi	r2,r2,1
10102028:	d8c02015 	stw	r3,128(sp)
1010202c:	44400115 	stw	r17,4(r8)
10102030:	d8801f15 	stw	r2,124(sp)
10102034:	00c001c4 	movi	r3,7
10102038:	1880a716 	blt	r3,r2,101022d8 <___vfprintf_internal_r+0x3d4>
1010203c:	42000204 	addi	r8,r8,8
10102040:	d9402f17 	ldw	r5,188(sp)
10102044:	2c4b883a 	add	r5,r5,r17
10102048:	d9402f15 	stw	r5,188(sp)
1010204c:	80800007 	ldb	r2,0(r16)
10102050:	1000a826 	beq	r2,zero,101022f4 <___vfprintf_internal_r+0x3f0>
10102054:	84400047 	ldb	r17,1(r16)
10102058:	00bfffc4 	movi	r2,-1
1010205c:	85400044 	addi	r21,r16,1
10102060:	d8002785 	stb	zero,158(sp)
10102064:	0007883a 	mov	r3,zero
10102068:	000f883a 	mov	r7,zero
1010206c:	d8802915 	stw	r2,164(sp)
10102070:	d8003115 	stw	zero,196(sp)
10102074:	0025883a 	mov	r18,zero
10102078:	01401604 	movi	r5,88
1010207c:	01800244 	movi	r6,9
10102080:	02800a84 	movi	r10,42
10102084:	02401b04 	movi	r9,108
10102088:	ad400044 	addi	r21,r21,1
1010208c:	88bff804 	addi	r2,r17,-32
10102090:	28830436 	bltu	r5,r2,10102ca4 <___vfprintf_internal_r+0xda0>
10102094:	100490ba 	slli	r2,r2,2
10102098:	01040434 	movhi	r4,4112
1010209c:	21082b04 	addi	r4,r4,8364
101020a0:	1105883a 	add	r2,r2,r4
101020a4:	10800017 	ldw	r2,0(r2)
101020a8:	1000683a 	jmp	r2
101020ac:	10102bc4 	addi	zero,r2,16559
101020b0:	10102ca4 	muli	zero,r2,16562
101020b4:	10102ca4 	muli	zero,r2,16562
101020b8:	10102be4 	muli	zero,r2,16559
101020bc:	10102ca4 	muli	zero,r2,16562
101020c0:	10102ca4 	muli	zero,r2,16562
101020c4:	10102ca4 	muli	zero,r2,16562
101020c8:	10102ca4 	muli	zero,r2,16562
101020cc:	10102ca4 	muli	zero,r2,16562
101020d0:	10102ca4 	muli	zero,r2,16562
101020d4:	10102358 	cmpnei	zero,r2,16525
101020d8:	10102b00 	call	110102b0 <__alt_data_end+0xef02b0>
101020dc:	10102ca4 	muli	zero,r2,16562
101020e0:	10102220 	cmpeqi	zero,r2,16520
101020e4:	10102380 	call	11010238 <__alt_data_end+0xef0238>
101020e8:	10102ca4 	muli	zero,r2,16562
101020ec:	101023c0 	call	1101023c <__alt_data_end+0xef023c>
101020f0:	101023cc 	andi	zero,r2,16527
101020f4:	101023cc 	andi	zero,r2,16527
101020f8:	101023cc 	andi	zero,r2,16527
101020fc:	101023cc 	andi	zero,r2,16527
10102100:	101023cc 	andi	zero,r2,16527
10102104:	101023cc 	andi	zero,r2,16527
10102108:	101023cc 	andi	zero,r2,16527
1010210c:	101023cc 	andi	zero,r2,16527
10102110:	101023cc 	andi	zero,r2,16527
10102114:	10102ca4 	muli	zero,r2,16562
10102118:	10102ca4 	muli	zero,r2,16562
1010211c:	10102ca4 	muli	zero,r2,16562
10102120:	10102ca4 	muli	zero,r2,16562
10102124:	10102ca4 	muli	zero,r2,16562
10102128:	10102ca4 	muli	zero,r2,16562
1010212c:	10102ca4 	muli	zero,r2,16562
10102130:	10102ca4 	muli	zero,r2,16562
10102134:	10102ca4 	muli	zero,r2,16562
10102138:	10102ca4 	muli	zero,r2,16562
1010213c:	10102400 	call	11010240 <__alt_data_end+0xef0240>
10102140:	101024bc 	xorhi	zero,r2,16530
10102144:	10102ca4 	muli	zero,r2,16562
10102148:	101024bc 	xorhi	zero,r2,16530
1010214c:	10102ca4 	muli	zero,r2,16562
10102150:	10102ca4 	muli	zero,r2,16562
10102154:	10102ca4 	muli	zero,r2,16562
10102158:	10102ca4 	muli	zero,r2,16562
1010215c:	1010255c 	xori	zero,r2,16533
10102160:	10102ca4 	muli	zero,r2,16562
10102164:	10102ca4 	muli	zero,r2,16562
10102168:	10102568 	cmpgeui	zero,r2,16533
1010216c:	10102ca4 	muli	zero,r2,16562
10102170:	10102ca4 	muli	zero,r2,16562
10102174:	10102ca4 	muli	zero,r2,16562
10102178:	10102ca4 	muli	zero,r2,16562
1010217c:	10102ca4 	muli	zero,r2,16562
10102180:	101029e0 	cmpeqi	zero,r2,16551
10102184:	10102ca4 	muli	zero,r2,16562
10102188:	10102ca4 	muli	zero,r2,16562
1010218c:	10102a40 	call	110102a4 <__alt_data_end+0xef02a4>
10102190:	10102ca4 	muli	zero,r2,16562
10102194:	10102ca4 	muli	zero,r2,16562
10102198:	10102ca4 	muli	zero,r2,16562
1010219c:	10102ca4 	muli	zero,r2,16562
101021a0:	10102ca4 	muli	zero,r2,16562
101021a4:	10102ca4 	muli	zero,r2,16562
101021a8:	10102ca4 	muli	zero,r2,16562
101021ac:	10102ca4 	muli	zero,r2,16562
101021b0:	10102ca4 	muli	zero,r2,16562
101021b4:	10102ca4 	muli	zero,r2,16562
101021b8:	10102c50 	cmplti	zero,r2,16561
101021bc:	10102bf0 	cmpltui	zero,r2,16559
101021c0:	101024bc 	xorhi	zero,r2,16530
101021c4:	101024bc 	xorhi	zero,r2,16530
101021c8:	101024bc 	xorhi	zero,r2,16530
101021cc:	10102c00 	call	110102c0 <__alt_data_end+0xef02c0>
101021d0:	10102bf0 	cmpltui	zero,r2,16559
101021d4:	10102ca4 	muli	zero,r2,16562
101021d8:	10102ca4 	muli	zero,r2,16562
101021dc:	10102c0c 	andi	zero,r2,16560
101021e0:	10102ca4 	muli	zero,r2,16562
101021e4:	10102c1c 	xori	zero,r2,16560
101021e8:	10102af0 	cmpltui	zero,r2,16555
101021ec:	1010222c 	andhi	zero,r2,16520
101021f0:	10102b10 	cmplti	zero,r2,16556
101021f4:	10102ca4 	muli	zero,r2,16562
101021f8:	10102b1c 	xori	zero,r2,16556
101021fc:	10102ca4 	muli	zero,r2,16562
10102200:	10102b78 	rdprs	zero,r2,16557
10102204:	10102ca4 	muli	zero,r2,16562
10102208:	10102ca4 	muli	zero,r2,16562
1010220c:	10102b88 	cmpgei	zero,r2,16558
10102210:	d9003117 	ldw	r4,196(sp)
10102214:	d8802d15 	stw	r2,180(sp)
10102218:	0109c83a 	sub	r4,zero,r4
1010221c:	d9003115 	stw	r4,196(sp)
10102220:	94800114 	ori	r18,r18,4
10102224:	ac400007 	ldb	r17,0(r21)
10102228:	003f9706 	br	10102088 <___vfprintf_internal_r+0x184>
1010222c:	00800c04 	movi	r2,48
10102230:	d9002d17 	ldw	r4,180(sp)
10102234:	d9402917 	ldw	r5,164(sp)
10102238:	d8802705 	stb	r2,156(sp)
1010223c:	00801e04 	movi	r2,120
10102240:	d8802745 	stb	r2,157(sp)
10102244:	d8002785 	stb	zero,158(sp)
10102248:	20c00104 	addi	r3,r4,4
1010224c:	24c00017 	ldw	r19,0(r4)
10102250:	002d883a 	mov	r22,zero
10102254:	90800094 	ori	r2,r18,2
10102258:	28029a16 	blt	r5,zero,10102cc4 <___vfprintf_internal_r+0xdc0>
1010225c:	00bfdfc4 	movi	r2,-129
10102260:	90a4703a 	and	r18,r18,r2
10102264:	d8c02d15 	stw	r3,180(sp)
10102268:	94800094 	ori	r18,r18,2
1010226c:	9802871e 	bne	r19,zero,10102c8c <___vfprintf_internal_r+0xd88>
10102270:	00840474 	movhi	r2,4113
10102274:	1083ba04 	addi	r2,r2,3816
10102278:	d8803915 	stw	r2,228(sp)
1010227c:	04401e04 	movi	r17,120
10102280:	d8802917 	ldw	r2,164(sp)
10102284:	0039883a 	mov	fp,zero
10102288:	1001e926 	beq	r2,zero,10102a30 <___vfprintf_internal_r+0xb2c>
1010228c:	0027883a 	mov	r19,zero
10102290:	002d883a 	mov	r22,zero
10102294:	00020506 	br	10102aac <___vfprintf_internal_r+0xba8>
10102298:	d9002c17 	ldw	r4,176(sp)
1010229c:	b80b883a 	mov	r5,r23
101022a0:	01041d40 	call	101041d4 <__swsetup_r>
101022a4:	1005ac1e 	bne	r2,zero,10103958 <___vfprintf_internal_r+0x1a54>
101022a8:	b880030b 	ldhu	r2,12(r23)
101022ac:	00c00284 	movi	r3,10
101022b0:	1080068c 	andi	r2,r2,26
101022b4:	10ff3c1e 	bne	r2,r3,10101fa8 <___vfprintf_internal_r+0xa4>
101022b8:	b880038f 	ldh	r2,14(r23)
101022bc:	103f3a16 	blt	r2,zero,10101fa8 <___vfprintf_internal_r+0xa4>
101022c0:	d9c02d17 	ldw	r7,180(sp)
101022c4:	d9002c17 	ldw	r4,176(sp)
101022c8:	a80d883a 	mov	r6,r21
101022cc:	b80b883a 	mov	r5,r23
101022d0:	01041180 	call	10104118 <__sbprintf>
101022d4:	00001106 	br	1010231c <___vfprintf_internal_r+0x418>
101022d8:	d9002c17 	ldw	r4,176(sp)
101022dc:	d9801e04 	addi	r6,sp,120
101022e0:	b80b883a 	mov	r5,r23
101022e4:	01096680 	call	10109668 <__sprint_r>
101022e8:	1000081e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101022ec:	da000404 	addi	r8,sp,16
101022f0:	003f5306 	br	10102040 <___vfprintf_internal_r+0x13c>
101022f4:	d8802017 	ldw	r2,128(sp)
101022f8:	10000426 	beq	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101022fc:	d9002c17 	ldw	r4,176(sp)
10102300:	d9801e04 	addi	r6,sp,120
10102304:	b80b883a 	mov	r5,r23
10102308:	01096680 	call	10109668 <__sprint_r>
1010230c:	b880030b 	ldhu	r2,12(r23)
10102310:	1080100c 	andi	r2,r2,64
10102314:	1005901e 	bne	r2,zero,10103958 <___vfprintf_internal_r+0x1a54>
10102318:	d8802f17 	ldw	r2,188(sp)
1010231c:	dfc04717 	ldw	ra,284(sp)
10102320:	df004617 	ldw	fp,280(sp)
10102324:	ddc04517 	ldw	r23,276(sp)
10102328:	dd804417 	ldw	r22,272(sp)
1010232c:	dd404317 	ldw	r21,268(sp)
10102330:	dd004217 	ldw	r20,264(sp)
10102334:	dcc04117 	ldw	r19,260(sp)
10102338:	dc804017 	ldw	r18,256(sp)
1010233c:	dc403f17 	ldw	r17,252(sp)
10102340:	dc003e17 	ldw	r16,248(sp)
10102344:	dec04804 	addi	sp,sp,288
10102348:	f800283a 	ret
1010234c:	d9002c17 	ldw	r4,176(sp)
10102350:	01061a80 	call	101061a8 <__sinit>
10102354:	003f0406 	br	10101f68 <___vfprintf_internal_r+0x64>
10102358:	d8802d17 	ldw	r2,180(sp)
1010235c:	d9002d17 	ldw	r4,180(sp)
10102360:	10800017 	ldw	r2,0(r2)
10102364:	d8803115 	stw	r2,196(sp)
10102368:	20800104 	addi	r2,r4,4
1010236c:	d9003117 	ldw	r4,196(sp)
10102370:	203fa716 	blt	r4,zero,10102210 <___vfprintf_internal_r+0x30c>
10102374:	d8802d15 	stw	r2,180(sp)
10102378:	ac400007 	ldb	r17,0(r21)
1010237c:	003f4206 	br	10102088 <___vfprintf_internal_r+0x184>
10102380:	ac400007 	ldb	r17,0(r21)
10102384:	aac00044 	addi	r11,r21,1
10102388:	8a872826 	beq	r17,r10,1010402c <___vfprintf_internal_r+0x2128>
1010238c:	88bff404 	addi	r2,r17,-48
10102390:	0009883a 	mov	r4,zero
10102394:	30867d36 	bltu	r6,r2,10103d8c <___vfprintf_internal_r+0x1e88>
10102398:	5c400007 	ldb	r17,0(r11)
1010239c:	210002a4 	muli	r4,r4,10
101023a0:	5d400044 	addi	r21,r11,1
101023a4:	a817883a 	mov	r11,r21
101023a8:	2089883a 	add	r4,r4,r2
101023ac:	88bff404 	addi	r2,r17,-48
101023b0:	30bff92e 	bgeu	r6,r2,10102398 <___vfprintf_internal_r+0x494>
101023b4:	2005c916 	blt	r4,zero,10103adc <___vfprintf_internal_r+0x1bd8>
101023b8:	d9002915 	stw	r4,164(sp)
101023bc:	003f3306 	br	1010208c <___vfprintf_internal_r+0x188>
101023c0:	94802014 	ori	r18,r18,128
101023c4:	ac400007 	ldb	r17,0(r21)
101023c8:	003f2f06 	br	10102088 <___vfprintf_internal_r+0x184>
101023cc:	a809883a 	mov	r4,r21
101023d0:	d8003115 	stw	zero,196(sp)
101023d4:	88bff404 	addi	r2,r17,-48
101023d8:	0017883a 	mov	r11,zero
101023dc:	24400007 	ldb	r17,0(r4)
101023e0:	5ac002a4 	muli	r11,r11,10
101023e4:	ad400044 	addi	r21,r21,1
101023e8:	a809883a 	mov	r4,r21
101023ec:	12d7883a 	add	r11,r2,r11
101023f0:	88bff404 	addi	r2,r17,-48
101023f4:	30bff92e 	bgeu	r6,r2,101023dc <___vfprintf_internal_r+0x4d8>
101023f8:	dac03115 	stw	r11,196(sp)
101023fc:	003f2306 	br	1010208c <___vfprintf_internal_r+0x188>
10102400:	18c03fcc 	andi	r3,r3,255
10102404:	18072b1e 	bne	r3,zero,101040b4 <___vfprintf_internal_r+0x21b0>
10102408:	94800414 	ori	r18,r18,16
1010240c:	9080080c 	andi	r2,r18,32
10102410:	10037b26 	beq	r2,zero,10103200 <___vfprintf_internal_r+0x12fc>
10102414:	d9402d17 	ldw	r5,180(sp)
10102418:	28800117 	ldw	r2,4(r5)
1010241c:	2cc00017 	ldw	r19,0(r5)
10102420:	29400204 	addi	r5,r5,8
10102424:	d9402d15 	stw	r5,180(sp)
10102428:	102d883a 	mov	r22,r2
1010242c:	10044b16 	blt	r2,zero,1010355c <___vfprintf_internal_r+0x1658>
10102430:	d9402917 	ldw	r5,164(sp)
10102434:	df002783 	ldbu	fp,158(sp)
10102438:	2803bc16 	blt	r5,zero,1010332c <___vfprintf_internal_r+0x1428>
1010243c:	00ffdfc4 	movi	r3,-129
10102440:	9d84b03a 	or	r2,r19,r22
10102444:	90e4703a 	and	r18,r18,r3
10102448:	10017726 	beq	r2,zero,10102a28 <___vfprintf_internal_r+0xb24>
1010244c:	b0038326 	beq	r22,zero,1010325c <___vfprintf_internal_r+0x1358>
10102450:	dc402a15 	stw	r17,168(sp)
10102454:	dc001e04 	addi	r16,sp,120
10102458:	b023883a 	mov	r17,r22
1010245c:	402d883a 	mov	r22,r8
10102460:	9809883a 	mov	r4,r19
10102464:	880b883a 	mov	r5,r17
10102468:	01800284 	movi	r6,10
1010246c:	000f883a 	mov	r7,zero
10102470:	010ba600 	call	1010ba60 <__umoddi3>
10102474:	10800c04 	addi	r2,r2,48
10102478:	843fffc4 	addi	r16,r16,-1
1010247c:	9809883a 	mov	r4,r19
10102480:	880b883a 	mov	r5,r17
10102484:	80800005 	stb	r2,0(r16)
10102488:	01800284 	movi	r6,10
1010248c:	000f883a 	mov	r7,zero
10102490:	010b4e80 	call	1010b4e8 <__udivdi3>
10102494:	1027883a 	mov	r19,r2
10102498:	10c4b03a 	or	r2,r2,r3
1010249c:	1823883a 	mov	r17,r3
101024a0:	103fef1e 	bne	r2,zero,10102460 <___vfprintf_internal_r+0x55c>
101024a4:	d8c02817 	ldw	r3,160(sp)
101024a8:	dc402a17 	ldw	r17,168(sp)
101024ac:	b011883a 	mov	r8,r22
101024b0:	1c07c83a 	sub	r3,r3,r16
101024b4:	d8c02e15 	stw	r3,184(sp)
101024b8:	00005906 	br	10102620 <___vfprintf_internal_r+0x71c>
101024bc:	18c03fcc 	andi	r3,r3,255
101024c0:	1806fa1e 	bne	r3,zero,101040ac <___vfprintf_internal_r+0x21a8>
101024c4:	9080020c 	andi	r2,r18,8
101024c8:	10048a26 	beq	r2,zero,101036f4 <___vfprintf_internal_r+0x17f0>
101024cc:	d8c02d17 	ldw	r3,180(sp)
101024d0:	d9002d17 	ldw	r4,180(sp)
101024d4:	d9402d17 	ldw	r5,180(sp)
101024d8:	18c00017 	ldw	r3,0(r3)
101024dc:	21000117 	ldw	r4,4(r4)
101024e0:	29400204 	addi	r5,r5,8
101024e4:	d8c03615 	stw	r3,216(sp)
101024e8:	d9003815 	stw	r4,224(sp)
101024ec:	d9402d15 	stw	r5,180(sp)
101024f0:	d9003617 	ldw	r4,216(sp)
101024f4:	d9403817 	ldw	r5,224(sp)
101024f8:	da003d15 	stw	r8,244(sp)
101024fc:	04000044 	movi	r16,1
10102500:	010928c0 	call	1010928c <__fpclassifyd>
10102504:	da003d17 	ldw	r8,244(sp)
10102508:	14041f1e 	bne	r2,r16,10103588 <___vfprintf_internal_r+0x1684>
1010250c:	d9003617 	ldw	r4,216(sp)
10102510:	d9403817 	ldw	r5,224(sp)
10102514:	000d883a 	mov	r6,zero
10102518:	000f883a 	mov	r7,zero
1010251c:	010d2900 	call	1010d290 <__ledf2>
10102520:	da003d17 	ldw	r8,244(sp)
10102524:	1005be16 	blt	r2,zero,10103c20 <___vfprintf_internal_r+0x1d1c>
10102528:	df002783 	ldbu	fp,158(sp)
1010252c:	008011c4 	movi	r2,71
10102530:	1445330e 	bge	r2,r17,10103a00 <___vfprintf_internal_r+0x1afc>
10102534:	04040474 	movhi	r16,4113
10102538:	8403b204 	addi	r16,r16,3784
1010253c:	00c000c4 	movi	r3,3
10102540:	00bfdfc4 	movi	r2,-129
10102544:	d8c02a15 	stw	r3,168(sp)
10102548:	90a4703a 	and	r18,r18,r2
1010254c:	d8c02e15 	stw	r3,184(sp)
10102550:	d8002915 	stw	zero,164(sp)
10102554:	d8003215 	stw	zero,200(sp)
10102558:	00003706 	br	10102638 <___vfprintf_internal_r+0x734>
1010255c:	94800214 	ori	r18,r18,8
10102560:	ac400007 	ldb	r17,0(r21)
10102564:	003ec806 	br	10102088 <___vfprintf_internal_r+0x184>
10102568:	18c03fcc 	andi	r3,r3,255
1010256c:	1806db1e 	bne	r3,zero,101040dc <___vfprintf_internal_r+0x21d8>
10102570:	94800414 	ori	r18,r18,16
10102574:	9080080c 	andi	r2,r18,32
10102578:	1002d826 	beq	r2,zero,101030dc <___vfprintf_internal_r+0x11d8>
1010257c:	d9402d17 	ldw	r5,180(sp)
10102580:	d8c02917 	ldw	r3,164(sp)
10102584:	d8002785 	stb	zero,158(sp)
10102588:	28800204 	addi	r2,r5,8
1010258c:	2cc00017 	ldw	r19,0(r5)
10102590:	2d800117 	ldw	r22,4(r5)
10102594:	18048f16 	blt	r3,zero,101037d4 <___vfprintf_internal_r+0x18d0>
10102598:	013fdfc4 	movi	r4,-129
1010259c:	9d86b03a 	or	r3,r19,r22
101025a0:	d8802d15 	stw	r2,180(sp)
101025a4:	9124703a 	and	r18,r18,r4
101025a8:	1802d91e 	bne	r3,zero,10103110 <___vfprintf_internal_r+0x120c>
101025ac:	d8c02917 	ldw	r3,164(sp)
101025b0:	0039883a 	mov	fp,zero
101025b4:	1805c326 	beq	r3,zero,10103cc4 <___vfprintf_internal_r+0x1dc0>
101025b8:	0027883a 	mov	r19,zero
101025bc:	002d883a 	mov	r22,zero
101025c0:	dc001e04 	addi	r16,sp,120
101025c4:	9806d0fa 	srli	r3,r19,3
101025c8:	b008977a 	slli	r4,r22,29
101025cc:	b02cd0fa 	srli	r22,r22,3
101025d0:	9cc001cc 	andi	r19,r19,7
101025d4:	98800c04 	addi	r2,r19,48
101025d8:	843fffc4 	addi	r16,r16,-1
101025dc:	20e6b03a 	or	r19,r4,r3
101025e0:	80800005 	stb	r2,0(r16)
101025e4:	9d86b03a 	or	r3,r19,r22
101025e8:	183ff61e 	bne	r3,zero,101025c4 <___vfprintf_internal_r+0x6c0>
101025ec:	90c0004c 	andi	r3,r18,1
101025f0:	18013b26 	beq	r3,zero,10102ae0 <___vfprintf_internal_r+0xbdc>
101025f4:	10803fcc 	andi	r2,r2,255
101025f8:	1080201c 	xori	r2,r2,128
101025fc:	10bfe004 	addi	r2,r2,-128
10102600:	00c00c04 	movi	r3,48
10102604:	10c13626 	beq	r2,r3,10102ae0 <___vfprintf_internal_r+0xbdc>
10102608:	80ffffc5 	stb	r3,-1(r16)
1010260c:	d8c02817 	ldw	r3,160(sp)
10102610:	80bfffc4 	addi	r2,r16,-1
10102614:	1021883a 	mov	r16,r2
10102618:	1887c83a 	sub	r3,r3,r2
1010261c:	d8c02e15 	stw	r3,184(sp)
10102620:	d8802e17 	ldw	r2,184(sp)
10102624:	d9002917 	ldw	r4,164(sp)
10102628:	1100010e 	bge	r2,r4,10102630 <___vfprintf_internal_r+0x72c>
1010262c:	2005883a 	mov	r2,r4
10102630:	d8802a15 	stw	r2,168(sp)
10102634:	d8003215 	stw	zero,200(sp)
10102638:	e7003fcc 	andi	fp,fp,255
1010263c:	e700201c 	xori	fp,fp,128
10102640:	e73fe004 	addi	fp,fp,-128
10102644:	e0000326 	beq	fp,zero,10102654 <___vfprintf_internal_r+0x750>
10102648:	d8c02a17 	ldw	r3,168(sp)
1010264c:	18c00044 	addi	r3,r3,1
10102650:	d8c02a15 	stw	r3,168(sp)
10102654:	90c0008c 	andi	r3,r18,2
10102658:	d8c02b15 	stw	r3,172(sp)
1010265c:	18000326 	beq	r3,zero,1010266c <___vfprintf_internal_r+0x768>
10102660:	d8c02a17 	ldw	r3,168(sp)
10102664:	18c00084 	addi	r3,r3,2
10102668:	d8c02a15 	stw	r3,168(sp)
1010266c:	90c0210c 	andi	r3,r18,132
10102670:	d8c03015 	stw	r3,192(sp)
10102674:	1801a31e 	bne	r3,zero,10102d04 <___vfprintf_internal_r+0xe00>
10102678:	d9003117 	ldw	r4,196(sp)
1010267c:	d8c02a17 	ldw	r3,168(sp)
10102680:	20e7c83a 	sub	r19,r4,r3
10102684:	04c19f0e 	bge	zero,r19,10102d04 <___vfprintf_internal_r+0xe00>
10102688:	02400404 	movi	r9,16
1010268c:	d8c02017 	ldw	r3,128(sp)
10102690:	d8801f17 	ldw	r2,124(sp)
10102694:	4cc50d0e 	bge	r9,r19,10103acc <___vfprintf_internal_r+0x1bc8>
10102698:	01440474 	movhi	r5,4113
1010269c:	2943c584 	addi	r5,r5,3862
101026a0:	dc403b15 	stw	r17,236(sp)
101026a4:	d9403515 	stw	r5,212(sp)
101026a8:	9823883a 	mov	r17,r19
101026ac:	482d883a 	mov	r22,r9
101026b0:	9027883a 	mov	r19,r18
101026b4:	070001c4 	movi	fp,7
101026b8:	8025883a 	mov	r18,r16
101026bc:	dc002c17 	ldw	r16,176(sp)
101026c0:	00000306 	br	101026d0 <___vfprintf_internal_r+0x7cc>
101026c4:	8c7ffc04 	addi	r17,r17,-16
101026c8:	42000204 	addi	r8,r8,8
101026cc:	b440130e 	bge	r22,r17,1010271c <___vfprintf_internal_r+0x818>
101026d0:	01040474 	movhi	r4,4113
101026d4:	18c00404 	addi	r3,r3,16
101026d8:	10800044 	addi	r2,r2,1
101026dc:	2103c584 	addi	r4,r4,3862
101026e0:	41000015 	stw	r4,0(r8)
101026e4:	45800115 	stw	r22,4(r8)
101026e8:	d8c02015 	stw	r3,128(sp)
101026ec:	d8801f15 	stw	r2,124(sp)
101026f0:	e0bff40e 	bge	fp,r2,101026c4 <___vfprintf_internal_r+0x7c0>
101026f4:	d9801e04 	addi	r6,sp,120
101026f8:	b80b883a 	mov	r5,r23
101026fc:	8009883a 	mov	r4,r16
10102700:	01096680 	call	10109668 <__sprint_r>
10102704:	103f011e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10102708:	8c7ffc04 	addi	r17,r17,-16
1010270c:	d8c02017 	ldw	r3,128(sp)
10102710:	d8801f17 	ldw	r2,124(sp)
10102714:	da000404 	addi	r8,sp,16
10102718:	b47fed16 	blt	r22,r17,101026d0 <___vfprintf_internal_r+0x7cc>
1010271c:	9021883a 	mov	r16,r18
10102720:	9825883a 	mov	r18,r19
10102724:	8827883a 	mov	r19,r17
10102728:	dc403b17 	ldw	r17,236(sp)
1010272c:	d9403517 	ldw	r5,212(sp)
10102730:	98c7883a 	add	r3,r19,r3
10102734:	10800044 	addi	r2,r2,1
10102738:	41400015 	stw	r5,0(r8)
1010273c:	44c00115 	stw	r19,4(r8)
10102740:	d8c02015 	stw	r3,128(sp)
10102744:	d8801f15 	stw	r2,124(sp)
10102748:	010001c4 	movi	r4,7
1010274c:	2082a316 	blt	r4,r2,101031dc <___vfprintf_internal_r+0x12d8>
10102750:	df002787 	ldb	fp,158(sp)
10102754:	42000204 	addi	r8,r8,8
10102758:	e0000c26 	beq	fp,zero,1010278c <___vfprintf_internal_r+0x888>
1010275c:	d8801f17 	ldw	r2,124(sp)
10102760:	d9002784 	addi	r4,sp,158
10102764:	18c00044 	addi	r3,r3,1
10102768:	10800044 	addi	r2,r2,1
1010276c:	41000015 	stw	r4,0(r8)
10102770:	01000044 	movi	r4,1
10102774:	41000115 	stw	r4,4(r8)
10102778:	d8c02015 	stw	r3,128(sp)
1010277c:	d8801f15 	stw	r2,124(sp)
10102780:	010001c4 	movi	r4,7
10102784:	20823c16 	blt	r4,r2,10103078 <___vfprintf_internal_r+0x1174>
10102788:	42000204 	addi	r8,r8,8
1010278c:	d8802b17 	ldw	r2,172(sp)
10102790:	10000c26 	beq	r2,zero,101027c4 <___vfprintf_internal_r+0x8c0>
10102794:	d8801f17 	ldw	r2,124(sp)
10102798:	d9002704 	addi	r4,sp,156
1010279c:	18c00084 	addi	r3,r3,2
101027a0:	10800044 	addi	r2,r2,1
101027a4:	41000015 	stw	r4,0(r8)
101027a8:	01000084 	movi	r4,2
101027ac:	41000115 	stw	r4,4(r8)
101027b0:	d8c02015 	stw	r3,128(sp)
101027b4:	d8801f15 	stw	r2,124(sp)
101027b8:	010001c4 	movi	r4,7
101027bc:	20823616 	blt	r4,r2,10103098 <___vfprintf_internal_r+0x1194>
101027c0:	42000204 	addi	r8,r8,8
101027c4:	d9003017 	ldw	r4,192(sp)
101027c8:	00802004 	movi	r2,128
101027cc:	20819926 	beq	r4,r2,10102e34 <___vfprintf_internal_r+0xf30>
101027d0:	d9402917 	ldw	r5,164(sp)
101027d4:	d8802e17 	ldw	r2,184(sp)
101027d8:	28adc83a 	sub	r22,r5,r2
101027dc:	0580310e 	bge	zero,r22,101028a4 <___vfprintf_internal_r+0x9a0>
101027e0:	07000404 	movi	fp,16
101027e4:	d8801f17 	ldw	r2,124(sp)
101027e8:	e584140e 	bge	fp,r22,1010383c <___vfprintf_internal_r+0x1938>
101027ec:	01440474 	movhi	r5,4113
101027f0:	2943c184 	addi	r5,r5,3846
101027f4:	dc402915 	stw	r17,164(sp)
101027f8:	d9402b15 	stw	r5,172(sp)
101027fc:	b023883a 	mov	r17,r22
10102800:	04c001c4 	movi	r19,7
10102804:	a82d883a 	mov	r22,r21
10102808:	902b883a 	mov	r21,r18
1010280c:	8025883a 	mov	r18,r16
10102810:	dc002c17 	ldw	r16,176(sp)
10102814:	00000306 	br	10102824 <___vfprintf_internal_r+0x920>
10102818:	8c7ffc04 	addi	r17,r17,-16
1010281c:	42000204 	addi	r8,r8,8
10102820:	e440110e 	bge	fp,r17,10102868 <___vfprintf_internal_r+0x964>
10102824:	18c00404 	addi	r3,r3,16
10102828:	10800044 	addi	r2,r2,1
1010282c:	45000015 	stw	r20,0(r8)
10102830:	47000115 	stw	fp,4(r8)
10102834:	d8c02015 	stw	r3,128(sp)
10102838:	d8801f15 	stw	r2,124(sp)
1010283c:	98bff60e 	bge	r19,r2,10102818 <___vfprintf_internal_r+0x914>
10102840:	d9801e04 	addi	r6,sp,120
10102844:	b80b883a 	mov	r5,r23
10102848:	8009883a 	mov	r4,r16
1010284c:	01096680 	call	10109668 <__sprint_r>
10102850:	103eae1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10102854:	8c7ffc04 	addi	r17,r17,-16
10102858:	d8c02017 	ldw	r3,128(sp)
1010285c:	d8801f17 	ldw	r2,124(sp)
10102860:	da000404 	addi	r8,sp,16
10102864:	e47fef16 	blt	fp,r17,10102824 <___vfprintf_internal_r+0x920>
10102868:	9021883a 	mov	r16,r18
1010286c:	a825883a 	mov	r18,r21
10102870:	b02b883a 	mov	r21,r22
10102874:	882d883a 	mov	r22,r17
10102878:	dc402917 	ldw	r17,164(sp)
1010287c:	d9002b17 	ldw	r4,172(sp)
10102880:	1d87883a 	add	r3,r3,r22
10102884:	10800044 	addi	r2,r2,1
10102888:	41000015 	stw	r4,0(r8)
1010288c:	45800115 	stw	r22,4(r8)
10102890:	d8c02015 	stw	r3,128(sp)
10102894:	d8801f15 	stw	r2,124(sp)
10102898:	010001c4 	movi	r4,7
1010289c:	2081ee16 	blt	r4,r2,10103058 <___vfprintf_internal_r+0x1154>
101028a0:	42000204 	addi	r8,r8,8
101028a4:	9080400c 	andi	r2,r18,256
101028a8:	1001181e 	bne	r2,zero,10102d0c <___vfprintf_internal_r+0xe08>
101028ac:	d9402e17 	ldw	r5,184(sp)
101028b0:	d8801f17 	ldw	r2,124(sp)
101028b4:	44000015 	stw	r16,0(r8)
101028b8:	1947883a 	add	r3,r3,r5
101028bc:	10800044 	addi	r2,r2,1
101028c0:	41400115 	stw	r5,4(r8)
101028c4:	d8c02015 	stw	r3,128(sp)
101028c8:	d8801f15 	stw	r2,124(sp)
101028cc:	010001c4 	movi	r4,7
101028d0:	2081d316 	blt	r4,r2,10103020 <___vfprintf_internal_r+0x111c>
101028d4:	42000204 	addi	r8,r8,8
101028d8:	9480010c 	andi	r18,r18,4
101028dc:	90003226 	beq	r18,zero,101029a8 <___vfprintf_internal_r+0xaa4>
101028e0:	d9403117 	ldw	r5,196(sp)
101028e4:	d8802a17 	ldw	r2,168(sp)
101028e8:	28a1c83a 	sub	r16,r5,r2
101028ec:	04002e0e 	bge	zero,r16,101029a8 <___vfprintf_internal_r+0xaa4>
101028f0:	04400404 	movi	r17,16
101028f4:	d8801f17 	ldw	r2,124(sp)
101028f8:	8c04a20e 	bge	r17,r16,10103b84 <___vfprintf_internal_r+0x1c80>
101028fc:	01440474 	movhi	r5,4113
10102900:	2943c584 	addi	r5,r5,3862
10102904:	d9403515 	stw	r5,212(sp)
10102908:	048001c4 	movi	r18,7
1010290c:	dcc02c17 	ldw	r19,176(sp)
10102910:	00000306 	br	10102920 <___vfprintf_internal_r+0xa1c>
10102914:	843ffc04 	addi	r16,r16,-16
10102918:	42000204 	addi	r8,r8,8
1010291c:	8c00130e 	bge	r17,r16,1010296c <___vfprintf_internal_r+0xa68>
10102920:	01040474 	movhi	r4,4113
10102924:	18c00404 	addi	r3,r3,16
10102928:	10800044 	addi	r2,r2,1
1010292c:	2103c584 	addi	r4,r4,3862
10102930:	41000015 	stw	r4,0(r8)
10102934:	44400115 	stw	r17,4(r8)
10102938:	d8c02015 	stw	r3,128(sp)
1010293c:	d8801f15 	stw	r2,124(sp)
10102940:	90bff40e 	bge	r18,r2,10102914 <___vfprintf_internal_r+0xa10>
10102944:	d9801e04 	addi	r6,sp,120
10102948:	b80b883a 	mov	r5,r23
1010294c:	9809883a 	mov	r4,r19
10102950:	01096680 	call	10109668 <__sprint_r>
10102954:	103e6d1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10102958:	843ffc04 	addi	r16,r16,-16
1010295c:	d8c02017 	ldw	r3,128(sp)
10102960:	d8801f17 	ldw	r2,124(sp)
10102964:	da000404 	addi	r8,sp,16
10102968:	8c3fed16 	blt	r17,r16,10102920 <___vfprintf_internal_r+0xa1c>
1010296c:	d9403517 	ldw	r5,212(sp)
10102970:	1c07883a 	add	r3,r3,r16
10102974:	10800044 	addi	r2,r2,1
10102978:	41400015 	stw	r5,0(r8)
1010297c:	44000115 	stw	r16,4(r8)
10102980:	d8c02015 	stw	r3,128(sp)
10102984:	d8801f15 	stw	r2,124(sp)
10102988:	010001c4 	movi	r4,7
1010298c:	2080060e 	bge	r4,r2,101029a8 <___vfprintf_internal_r+0xaa4>
10102990:	d9002c17 	ldw	r4,176(sp)
10102994:	d9801e04 	addi	r6,sp,120
10102998:	b80b883a 	mov	r5,r23
1010299c:	01096680 	call	10109668 <__sprint_r>
101029a0:	103e5a1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101029a4:	d8c02017 	ldw	r3,128(sp)
101029a8:	d8803117 	ldw	r2,196(sp)
101029ac:	d9002a17 	ldw	r4,168(sp)
101029b0:	1100010e 	bge	r2,r4,101029b8 <___vfprintf_internal_r+0xab4>
101029b4:	2005883a 	mov	r2,r4
101029b8:	d9402f17 	ldw	r5,188(sp)
101029bc:	288b883a 	add	r5,r5,r2
101029c0:	d9402f15 	stw	r5,188(sp)
101029c4:	18019e1e 	bne	r3,zero,10103040 <___vfprintf_internal_r+0x113c>
101029c8:	a8800007 	ldb	r2,0(r21)
101029cc:	d8001f15 	stw	zero,124(sp)
101029d0:	da000404 	addi	r8,sp,16
101029d4:	103d851e 	bne	r2,zero,10101fec <___vfprintf_internal_r+0xe8>
101029d8:	a821883a 	mov	r16,r21
101029dc:	003d9b06 	br	1010204c <___vfprintf_internal_r+0x148>
101029e0:	18c03fcc 	andi	r3,r3,255
101029e4:	1805c11e 	bne	r3,zero,101040ec <___vfprintf_internal_r+0x21e8>
101029e8:	94800414 	ori	r18,r18,16
101029ec:	9080080c 	andi	r2,r18,32
101029f0:	10020c26 	beq	r2,zero,10103224 <___vfprintf_internal_r+0x1320>
101029f4:	d8802d17 	ldw	r2,180(sp)
101029f8:	d9002917 	ldw	r4,164(sp)
101029fc:	d8002785 	stb	zero,158(sp)
10102a00:	10c00204 	addi	r3,r2,8
10102a04:	14c00017 	ldw	r19,0(r2)
10102a08:	15800117 	ldw	r22,4(r2)
10102a0c:	20040f16 	blt	r4,zero,10103a4c <___vfprintf_internal_r+0x1b48>
10102a10:	013fdfc4 	movi	r4,-129
10102a14:	9d84b03a 	or	r2,r19,r22
10102a18:	d8c02d15 	stw	r3,180(sp)
10102a1c:	9124703a 	and	r18,r18,r4
10102a20:	0039883a 	mov	fp,zero
10102a24:	103e891e 	bne	r2,zero,1010244c <___vfprintf_internal_r+0x548>
10102a28:	d9002917 	ldw	r4,164(sp)
10102a2c:	2002c11e 	bne	r4,zero,10103534 <___vfprintf_internal_r+0x1630>
10102a30:	d8002915 	stw	zero,164(sp)
10102a34:	d8002e15 	stw	zero,184(sp)
10102a38:	dc001e04 	addi	r16,sp,120
10102a3c:	003ef806 	br	10102620 <___vfprintf_internal_r+0x71c>
10102a40:	18c03fcc 	andi	r3,r3,255
10102a44:	18059d1e 	bne	r3,zero,101040bc <___vfprintf_internal_r+0x21b8>
10102a48:	01440474 	movhi	r5,4113
10102a4c:	2943b504 	addi	r5,r5,3796
10102a50:	d9403915 	stw	r5,228(sp)
10102a54:	9080080c 	andi	r2,r18,32
10102a58:	10005226 	beq	r2,zero,10102ba4 <___vfprintf_internal_r+0xca0>
10102a5c:	d8802d17 	ldw	r2,180(sp)
10102a60:	14c00017 	ldw	r19,0(r2)
10102a64:	15800117 	ldw	r22,4(r2)
10102a68:	10800204 	addi	r2,r2,8
10102a6c:	d8802d15 	stw	r2,180(sp)
10102a70:	9080004c 	andi	r2,r18,1
10102a74:	10019026 	beq	r2,zero,101030b8 <___vfprintf_internal_r+0x11b4>
10102a78:	9d84b03a 	or	r2,r19,r22
10102a7c:	10036926 	beq	r2,zero,10103824 <___vfprintf_internal_r+0x1920>
10102a80:	d8c02917 	ldw	r3,164(sp)
10102a84:	00800c04 	movi	r2,48
10102a88:	d8802705 	stb	r2,156(sp)
10102a8c:	dc402745 	stb	r17,157(sp)
10102a90:	d8002785 	stb	zero,158(sp)
10102a94:	90800094 	ori	r2,r18,2
10102a98:	18045d16 	blt	r3,zero,10103c10 <___vfprintf_internal_r+0x1d0c>
10102a9c:	00bfdfc4 	movi	r2,-129
10102aa0:	90a4703a 	and	r18,r18,r2
10102aa4:	94800094 	ori	r18,r18,2
10102aa8:	0039883a 	mov	fp,zero
10102aac:	d9003917 	ldw	r4,228(sp)
10102ab0:	dc001e04 	addi	r16,sp,120
10102ab4:	988003cc 	andi	r2,r19,15
10102ab8:	b006973a 	slli	r3,r22,28
10102abc:	2085883a 	add	r2,r4,r2
10102ac0:	9826d13a 	srli	r19,r19,4
10102ac4:	10800003 	ldbu	r2,0(r2)
10102ac8:	b02cd13a 	srli	r22,r22,4
10102acc:	843fffc4 	addi	r16,r16,-1
10102ad0:	1ce6b03a 	or	r19,r3,r19
10102ad4:	80800005 	stb	r2,0(r16)
10102ad8:	9d84b03a 	or	r2,r19,r22
10102adc:	103ff51e 	bne	r2,zero,10102ab4 <___vfprintf_internal_r+0xbb0>
10102ae0:	d8c02817 	ldw	r3,160(sp)
10102ae4:	1c07c83a 	sub	r3,r3,r16
10102ae8:	d8c02e15 	stw	r3,184(sp)
10102aec:	003ecc06 	br	10102620 <___vfprintf_internal_r+0x71c>
10102af0:	18c03fcc 	andi	r3,r3,255
10102af4:	183e9f26 	beq	r3,zero,10102574 <___vfprintf_internal_r+0x670>
10102af8:	d9c02785 	stb	r7,158(sp)
10102afc:	003e9d06 	br	10102574 <___vfprintf_internal_r+0x670>
10102b00:	00c00044 	movi	r3,1
10102b04:	01c00ac4 	movi	r7,43
10102b08:	ac400007 	ldb	r17,0(r21)
10102b0c:	003d5e06 	br	10102088 <___vfprintf_internal_r+0x184>
10102b10:	94800814 	ori	r18,r18,32
10102b14:	ac400007 	ldb	r17,0(r21)
10102b18:	003d5b06 	br	10102088 <___vfprintf_internal_r+0x184>
10102b1c:	d8c02d17 	ldw	r3,180(sp)
10102b20:	d8002785 	stb	zero,158(sp)
10102b24:	1c000017 	ldw	r16,0(r3)
10102b28:	1cc00104 	addi	r19,r3,4
10102b2c:	80041926 	beq	r16,zero,10103b94 <___vfprintf_internal_r+0x1c90>
10102b30:	d9002917 	ldw	r4,164(sp)
10102b34:	2003d016 	blt	r4,zero,10103a78 <___vfprintf_internal_r+0x1b74>
10102b38:	200d883a 	mov	r6,r4
10102b3c:	000b883a 	mov	r5,zero
10102b40:	8009883a 	mov	r4,r16
10102b44:	da003d15 	stw	r8,244(sp)
10102b48:	01077140 	call	10107714 <memchr>
10102b4c:	da003d17 	ldw	r8,244(sp)
10102b50:	10045426 	beq	r2,zero,10103ca4 <___vfprintf_internal_r+0x1da0>
10102b54:	1405c83a 	sub	r2,r2,r16
10102b58:	d8802e15 	stw	r2,184(sp)
10102b5c:	1003cc16 	blt	r2,zero,10103a90 <___vfprintf_internal_r+0x1b8c>
10102b60:	df002783 	ldbu	fp,158(sp)
10102b64:	d8802a15 	stw	r2,168(sp)
10102b68:	dcc02d15 	stw	r19,180(sp)
10102b6c:	d8002915 	stw	zero,164(sp)
10102b70:	d8003215 	stw	zero,200(sp)
10102b74:	003eb006 	br	10102638 <___vfprintf_internal_r+0x734>
10102b78:	18c03fcc 	andi	r3,r3,255
10102b7c:	183f9b26 	beq	r3,zero,101029ec <___vfprintf_internal_r+0xae8>
10102b80:	d9c02785 	stb	r7,158(sp)
10102b84:	003f9906 	br	101029ec <___vfprintf_internal_r+0xae8>
10102b88:	18c03fcc 	andi	r3,r3,255
10102b8c:	1805551e 	bne	r3,zero,101040e4 <___vfprintf_internal_r+0x21e0>
10102b90:	01440474 	movhi	r5,4113
10102b94:	2943ba04 	addi	r5,r5,3816
10102b98:	d9403915 	stw	r5,228(sp)
10102b9c:	9080080c 	andi	r2,r18,32
10102ba0:	103fae1e 	bne	r2,zero,10102a5c <___vfprintf_internal_r+0xb58>
10102ba4:	9080040c 	andi	r2,r18,16
10102ba8:	1002de26 	beq	r2,zero,10103724 <___vfprintf_internal_r+0x1820>
10102bac:	d8c02d17 	ldw	r3,180(sp)
10102bb0:	002d883a 	mov	r22,zero
10102bb4:	1cc00017 	ldw	r19,0(r3)
10102bb8:	18c00104 	addi	r3,r3,4
10102bbc:	d8c02d15 	stw	r3,180(sp)
10102bc0:	003fab06 	br	10102a70 <___vfprintf_internal_r+0xb6c>
10102bc4:	38803fcc 	andi	r2,r7,255
10102bc8:	1080201c 	xori	r2,r2,128
10102bcc:	10bfe004 	addi	r2,r2,-128
10102bd0:	1002d21e 	bne	r2,zero,1010371c <___vfprintf_internal_r+0x1818>
10102bd4:	00c00044 	movi	r3,1
10102bd8:	01c00804 	movi	r7,32
10102bdc:	ac400007 	ldb	r17,0(r21)
10102be0:	003d2906 	br	10102088 <___vfprintf_internal_r+0x184>
10102be4:	94800054 	ori	r18,r18,1
10102be8:	ac400007 	ldb	r17,0(r21)
10102bec:	003d2606 	br	10102088 <___vfprintf_internal_r+0x184>
10102bf0:	18c03fcc 	andi	r3,r3,255
10102bf4:	183e0526 	beq	r3,zero,1010240c <___vfprintf_internal_r+0x508>
10102bf8:	d9c02785 	stb	r7,158(sp)
10102bfc:	003e0306 	br	1010240c <___vfprintf_internal_r+0x508>
10102c00:	94801014 	ori	r18,r18,64
10102c04:	ac400007 	ldb	r17,0(r21)
10102c08:	003d1f06 	br	10102088 <___vfprintf_internal_r+0x184>
10102c0c:	ac400007 	ldb	r17,0(r21)
10102c10:	8a438726 	beq	r17,r9,10103a30 <___vfprintf_internal_r+0x1b2c>
10102c14:	94800414 	ori	r18,r18,16
10102c18:	003d1b06 	br	10102088 <___vfprintf_internal_r+0x184>
10102c1c:	18c03fcc 	andi	r3,r3,255
10102c20:	1805341e 	bne	r3,zero,101040f4 <___vfprintf_internal_r+0x21f0>
10102c24:	9080080c 	andi	r2,r18,32
10102c28:	1002cd26 	beq	r2,zero,10103760 <___vfprintf_internal_r+0x185c>
10102c2c:	d9402d17 	ldw	r5,180(sp)
10102c30:	d9002f17 	ldw	r4,188(sp)
10102c34:	28800017 	ldw	r2,0(r5)
10102c38:	2007d7fa 	srai	r3,r4,31
10102c3c:	29400104 	addi	r5,r5,4
10102c40:	d9402d15 	stw	r5,180(sp)
10102c44:	11000015 	stw	r4,0(r2)
10102c48:	10c00115 	stw	r3,4(r2)
10102c4c:	003ce506 	br	10101fe4 <___vfprintf_internal_r+0xe0>
10102c50:	d8c02d17 	ldw	r3,180(sp)
10102c54:	d9002d17 	ldw	r4,180(sp)
10102c58:	d8002785 	stb	zero,158(sp)
10102c5c:	18800017 	ldw	r2,0(r3)
10102c60:	21000104 	addi	r4,r4,4
10102c64:	00c00044 	movi	r3,1
10102c68:	d8c02a15 	stw	r3,168(sp)
10102c6c:	d8801405 	stb	r2,80(sp)
10102c70:	d9002d15 	stw	r4,180(sp)
10102c74:	d8c02e15 	stw	r3,184(sp)
10102c78:	d8002915 	stw	zero,164(sp)
10102c7c:	d8003215 	stw	zero,200(sp)
10102c80:	dc001404 	addi	r16,sp,80
10102c84:	0039883a 	mov	fp,zero
10102c88:	003e7206 	br	10102654 <___vfprintf_internal_r+0x750>
10102c8c:	01040474 	movhi	r4,4113
10102c90:	2103ba04 	addi	r4,r4,3816
10102c94:	0039883a 	mov	fp,zero
10102c98:	d9003915 	stw	r4,228(sp)
10102c9c:	04401e04 	movi	r17,120
10102ca0:	003f8206 	br	10102aac <___vfprintf_internal_r+0xba8>
10102ca4:	18c03fcc 	andi	r3,r3,255
10102ca8:	1805061e 	bne	r3,zero,101040c4 <___vfprintf_internal_r+0x21c0>
10102cac:	883d9126 	beq	r17,zero,101022f4 <___vfprintf_internal_r+0x3f0>
10102cb0:	00c00044 	movi	r3,1
10102cb4:	d8c02a15 	stw	r3,168(sp)
10102cb8:	dc401405 	stb	r17,80(sp)
10102cbc:	d8002785 	stb	zero,158(sp)
10102cc0:	003fec06 	br	10102c74 <___vfprintf_internal_r+0xd70>
10102cc4:	01440474 	movhi	r5,4113
10102cc8:	2943ba04 	addi	r5,r5,3816
10102ccc:	d9403915 	stw	r5,228(sp)
10102cd0:	d8c02d15 	stw	r3,180(sp)
10102cd4:	1025883a 	mov	r18,r2
10102cd8:	04401e04 	movi	r17,120
10102cdc:	9d84b03a 	or	r2,r19,r22
10102ce0:	1000fc1e 	bne	r2,zero,101030d4 <___vfprintf_internal_r+0x11d0>
10102ce4:	0039883a 	mov	fp,zero
10102ce8:	00800084 	movi	r2,2
10102cec:	10803fcc 	andi	r2,r2,255
10102cf0:	00c00044 	movi	r3,1
10102cf4:	10c20f26 	beq	r2,r3,10103534 <___vfprintf_internal_r+0x1630>
10102cf8:	00c00084 	movi	r3,2
10102cfc:	10fd6326 	beq	r2,r3,1010228c <___vfprintf_internal_r+0x388>
10102d00:	003e2d06 	br	101025b8 <___vfprintf_internal_r+0x6b4>
10102d04:	d8c02017 	ldw	r3,128(sp)
10102d08:	003e9306 	br	10102758 <___vfprintf_internal_r+0x854>
10102d0c:	00801944 	movi	r2,101
10102d10:	14407e0e 	bge	r2,r17,10102f0c <___vfprintf_internal_r+0x1008>
10102d14:	d9003617 	ldw	r4,216(sp)
10102d18:	d9403817 	ldw	r5,224(sp)
10102d1c:	000d883a 	mov	r6,zero
10102d20:	000f883a 	mov	r7,zero
10102d24:	d8c03c15 	stw	r3,240(sp)
10102d28:	da003d15 	stw	r8,244(sp)
10102d2c:	010d12c0 	call	1010d12c <__eqdf2>
10102d30:	d8c03c17 	ldw	r3,240(sp)
10102d34:	da003d17 	ldw	r8,244(sp)
10102d38:	1000f71e 	bne	r2,zero,10103118 <___vfprintf_internal_r+0x1214>
10102d3c:	d8801f17 	ldw	r2,124(sp)
10102d40:	01040474 	movhi	r4,4113
10102d44:	2103c104 	addi	r4,r4,3844
10102d48:	18c00044 	addi	r3,r3,1
10102d4c:	10800044 	addi	r2,r2,1
10102d50:	41000015 	stw	r4,0(r8)
10102d54:	01000044 	movi	r4,1
10102d58:	41000115 	stw	r4,4(r8)
10102d5c:	d8c02015 	stw	r3,128(sp)
10102d60:	d8801f15 	stw	r2,124(sp)
10102d64:	010001c4 	movi	r4,7
10102d68:	2082b816 	blt	r4,r2,1010384c <___vfprintf_internal_r+0x1948>
10102d6c:	42000204 	addi	r8,r8,8
10102d70:	d8802617 	ldw	r2,152(sp)
10102d74:	d9403317 	ldw	r5,204(sp)
10102d78:	11400216 	blt	r2,r5,10102d84 <___vfprintf_internal_r+0xe80>
10102d7c:	9080004c 	andi	r2,r18,1
10102d80:	103ed526 	beq	r2,zero,101028d8 <___vfprintf_internal_r+0x9d4>
10102d84:	d8803717 	ldw	r2,220(sp)
10102d88:	d9003417 	ldw	r4,208(sp)
10102d8c:	d9403717 	ldw	r5,220(sp)
10102d90:	1887883a 	add	r3,r3,r2
10102d94:	d8801f17 	ldw	r2,124(sp)
10102d98:	41000015 	stw	r4,0(r8)
10102d9c:	41400115 	stw	r5,4(r8)
10102da0:	10800044 	addi	r2,r2,1
10102da4:	d8c02015 	stw	r3,128(sp)
10102da8:	d8801f15 	stw	r2,124(sp)
10102dac:	010001c4 	movi	r4,7
10102db0:	20832916 	blt	r4,r2,10103a58 <___vfprintf_internal_r+0x1b54>
10102db4:	42000204 	addi	r8,r8,8
10102db8:	d8803317 	ldw	r2,204(sp)
10102dbc:	143fffc4 	addi	r16,r2,-1
10102dc0:	043ec50e 	bge	zero,r16,101028d8 <___vfprintf_internal_r+0x9d4>
10102dc4:	04400404 	movi	r17,16
10102dc8:	d8801f17 	ldw	r2,124(sp)
10102dcc:	8c00880e 	bge	r17,r16,10102ff0 <___vfprintf_internal_r+0x10ec>
10102dd0:	01440474 	movhi	r5,4113
10102dd4:	2943c184 	addi	r5,r5,3846
10102dd8:	d9402b15 	stw	r5,172(sp)
10102ddc:	058001c4 	movi	r22,7
10102de0:	dcc02c17 	ldw	r19,176(sp)
10102de4:	00000306 	br	10102df4 <___vfprintf_internal_r+0xef0>
10102de8:	42000204 	addi	r8,r8,8
10102dec:	843ffc04 	addi	r16,r16,-16
10102df0:	8c00820e 	bge	r17,r16,10102ffc <___vfprintf_internal_r+0x10f8>
10102df4:	18c00404 	addi	r3,r3,16
10102df8:	10800044 	addi	r2,r2,1
10102dfc:	45000015 	stw	r20,0(r8)
10102e00:	44400115 	stw	r17,4(r8)
10102e04:	d8c02015 	stw	r3,128(sp)
10102e08:	d8801f15 	stw	r2,124(sp)
10102e0c:	b0bff60e 	bge	r22,r2,10102de8 <___vfprintf_internal_r+0xee4>
10102e10:	d9801e04 	addi	r6,sp,120
10102e14:	b80b883a 	mov	r5,r23
10102e18:	9809883a 	mov	r4,r19
10102e1c:	01096680 	call	10109668 <__sprint_r>
10102e20:	103d3a1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10102e24:	d8c02017 	ldw	r3,128(sp)
10102e28:	d8801f17 	ldw	r2,124(sp)
10102e2c:	da000404 	addi	r8,sp,16
10102e30:	003fee06 	br	10102dec <___vfprintf_internal_r+0xee8>
10102e34:	d9403117 	ldw	r5,196(sp)
10102e38:	d8802a17 	ldw	r2,168(sp)
10102e3c:	28adc83a 	sub	r22,r5,r2
10102e40:	05be630e 	bge	zero,r22,101027d0 <___vfprintf_internal_r+0x8cc>
10102e44:	07000404 	movi	fp,16
10102e48:	d8801f17 	ldw	r2,124(sp)
10102e4c:	e5838f0e 	bge	fp,r22,10103c8c <___vfprintf_internal_r+0x1d88>
10102e50:	01440474 	movhi	r5,4113
10102e54:	2943c184 	addi	r5,r5,3846
10102e58:	dc403015 	stw	r17,192(sp)
10102e5c:	d9402b15 	stw	r5,172(sp)
10102e60:	b023883a 	mov	r17,r22
10102e64:	04c001c4 	movi	r19,7
10102e68:	a82d883a 	mov	r22,r21
10102e6c:	902b883a 	mov	r21,r18
10102e70:	8025883a 	mov	r18,r16
10102e74:	dc002c17 	ldw	r16,176(sp)
10102e78:	00000306 	br	10102e88 <___vfprintf_internal_r+0xf84>
10102e7c:	8c7ffc04 	addi	r17,r17,-16
10102e80:	42000204 	addi	r8,r8,8
10102e84:	e440110e 	bge	fp,r17,10102ecc <___vfprintf_internal_r+0xfc8>
10102e88:	18c00404 	addi	r3,r3,16
10102e8c:	10800044 	addi	r2,r2,1
10102e90:	45000015 	stw	r20,0(r8)
10102e94:	47000115 	stw	fp,4(r8)
10102e98:	d8c02015 	stw	r3,128(sp)
10102e9c:	d8801f15 	stw	r2,124(sp)
10102ea0:	98bff60e 	bge	r19,r2,10102e7c <___vfprintf_internal_r+0xf78>
10102ea4:	d9801e04 	addi	r6,sp,120
10102ea8:	b80b883a 	mov	r5,r23
10102eac:	8009883a 	mov	r4,r16
10102eb0:	01096680 	call	10109668 <__sprint_r>
10102eb4:	103d151e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10102eb8:	8c7ffc04 	addi	r17,r17,-16
10102ebc:	d8c02017 	ldw	r3,128(sp)
10102ec0:	d8801f17 	ldw	r2,124(sp)
10102ec4:	da000404 	addi	r8,sp,16
10102ec8:	e47fef16 	blt	fp,r17,10102e88 <___vfprintf_internal_r+0xf84>
10102ecc:	9021883a 	mov	r16,r18
10102ed0:	a825883a 	mov	r18,r21
10102ed4:	b02b883a 	mov	r21,r22
10102ed8:	882d883a 	mov	r22,r17
10102edc:	dc403017 	ldw	r17,192(sp)
10102ee0:	d9002b17 	ldw	r4,172(sp)
10102ee4:	1d87883a 	add	r3,r3,r22
10102ee8:	10800044 	addi	r2,r2,1
10102eec:	41000015 	stw	r4,0(r8)
10102ef0:	45800115 	stw	r22,4(r8)
10102ef4:	d8c02015 	stw	r3,128(sp)
10102ef8:	d8801f15 	stw	r2,124(sp)
10102efc:	010001c4 	movi	r4,7
10102f00:	20818e16 	blt	r4,r2,1010353c <___vfprintf_internal_r+0x1638>
10102f04:	42000204 	addi	r8,r8,8
10102f08:	003e3106 	br	101027d0 <___vfprintf_internal_r+0x8cc>
10102f0c:	d9403317 	ldw	r5,204(sp)
10102f10:	00800044 	movi	r2,1
10102f14:	18c00044 	addi	r3,r3,1
10102f18:	1141530e 	bge	r2,r5,10103468 <___vfprintf_internal_r+0x1564>
10102f1c:	dc401f17 	ldw	r17,124(sp)
10102f20:	00800044 	movi	r2,1
10102f24:	40800115 	stw	r2,4(r8)
10102f28:	8c400044 	addi	r17,r17,1
10102f2c:	44000015 	stw	r16,0(r8)
10102f30:	d8c02015 	stw	r3,128(sp)
10102f34:	dc401f15 	stw	r17,124(sp)
10102f38:	008001c4 	movi	r2,7
10102f3c:	14416b16 	blt	r2,r17,101034ec <___vfprintf_internal_r+0x15e8>
10102f40:	42000204 	addi	r8,r8,8
10102f44:	d8803717 	ldw	r2,220(sp)
10102f48:	d9003417 	ldw	r4,208(sp)
10102f4c:	8c400044 	addi	r17,r17,1
10102f50:	10c7883a 	add	r3,r2,r3
10102f54:	40800115 	stw	r2,4(r8)
10102f58:	41000015 	stw	r4,0(r8)
10102f5c:	d8c02015 	stw	r3,128(sp)
10102f60:	dc401f15 	stw	r17,124(sp)
10102f64:	008001c4 	movi	r2,7
10102f68:	14416916 	blt	r2,r17,10103510 <___vfprintf_internal_r+0x160c>
10102f6c:	45800204 	addi	r22,r8,8
10102f70:	d9003617 	ldw	r4,216(sp)
10102f74:	d9403817 	ldw	r5,224(sp)
10102f78:	000d883a 	mov	r6,zero
10102f7c:	000f883a 	mov	r7,zero
10102f80:	d8c03c15 	stw	r3,240(sp)
10102f84:	010d12c0 	call	1010d12c <__eqdf2>
10102f88:	d8c03c17 	ldw	r3,240(sp)
10102f8c:	1000bc26 	beq	r2,zero,10103280 <___vfprintf_internal_r+0x137c>
10102f90:	d9403317 	ldw	r5,204(sp)
10102f94:	84000044 	addi	r16,r16,1
10102f98:	8c400044 	addi	r17,r17,1
10102f9c:	28bfffc4 	addi	r2,r5,-1
10102fa0:	1887883a 	add	r3,r3,r2
10102fa4:	b0800115 	stw	r2,4(r22)
10102fa8:	b4000015 	stw	r16,0(r22)
10102fac:	d8c02015 	stw	r3,128(sp)
10102fb0:	dc401f15 	stw	r17,124(sp)
10102fb4:	008001c4 	movi	r2,7
10102fb8:	14414316 	blt	r2,r17,101034c8 <___vfprintf_internal_r+0x15c4>
10102fbc:	b5800204 	addi	r22,r22,8
10102fc0:	d9003a17 	ldw	r4,232(sp)
10102fc4:	df0022c4 	addi	fp,sp,139
10102fc8:	8c400044 	addi	r17,r17,1
10102fcc:	20c7883a 	add	r3,r4,r3
10102fd0:	b7000015 	stw	fp,0(r22)
10102fd4:	b1000115 	stw	r4,4(r22)
10102fd8:	d8c02015 	stw	r3,128(sp)
10102fdc:	dc401f15 	stw	r17,124(sp)
10102fe0:	008001c4 	movi	r2,7
10102fe4:	14400e16 	blt	r2,r17,10103020 <___vfprintf_internal_r+0x111c>
10102fe8:	b2000204 	addi	r8,r22,8
10102fec:	003e3a06 	br	101028d8 <___vfprintf_internal_r+0x9d4>
10102ff0:	01040474 	movhi	r4,4113
10102ff4:	2103c184 	addi	r4,r4,3846
10102ff8:	d9002b15 	stw	r4,172(sp)
10102ffc:	d9002b17 	ldw	r4,172(sp)
10103000:	1c07883a 	add	r3,r3,r16
10103004:	44000115 	stw	r16,4(r8)
10103008:	41000015 	stw	r4,0(r8)
1010300c:	10800044 	addi	r2,r2,1
10103010:	d8c02015 	stw	r3,128(sp)
10103014:	d8801f15 	stw	r2,124(sp)
10103018:	010001c4 	movi	r4,7
1010301c:	20be2d0e 	bge	r4,r2,101028d4 <___vfprintf_internal_r+0x9d0>
10103020:	d9002c17 	ldw	r4,176(sp)
10103024:	d9801e04 	addi	r6,sp,120
10103028:	b80b883a 	mov	r5,r23
1010302c:	01096680 	call	10109668 <__sprint_r>
10103030:	103cb61e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103034:	d8c02017 	ldw	r3,128(sp)
10103038:	da000404 	addi	r8,sp,16
1010303c:	003e2606 	br	101028d8 <___vfprintf_internal_r+0x9d4>
10103040:	d9002c17 	ldw	r4,176(sp)
10103044:	d9801e04 	addi	r6,sp,120
10103048:	b80b883a 	mov	r5,r23
1010304c:	01096680 	call	10109668 <__sprint_r>
10103050:	103e5d26 	beq	r2,zero,101029c8 <___vfprintf_internal_r+0xac4>
10103054:	003cad06 	br	1010230c <___vfprintf_internal_r+0x408>
10103058:	d9002c17 	ldw	r4,176(sp)
1010305c:	d9801e04 	addi	r6,sp,120
10103060:	b80b883a 	mov	r5,r23
10103064:	01096680 	call	10109668 <__sprint_r>
10103068:	103ca81e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
1010306c:	d8c02017 	ldw	r3,128(sp)
10103070:	da000404 	addi	r8,sp,16
10103074:	003e0b06 	br	101028a4 <___vfprintf_internal_r+0x9a0>
10103078:	d9002c17 	ldw	r4,176(sp)
1010307c:	d9801e04 	addi	r6,sp,120
10103080:	b80b883a 	mov	r5,r23
10103084:	01096680 	call	10109668 <__sprint_r>
10103088:	103ca01e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
1010308c:	d8c02017 	ldw	r3,128(sp)
10103090:	da000404 	addi	r8,sp,16
10103094:	003dbd06 	br	1010278c <___vfprintf_internal_r+0x888>
10103098:	d9002c17 	ldw	r4,176(sp)
1010309c:	d9801e04 	addi	r6,sp,120
101030a0:	b80b883a 	mov	r5,r23
101030a4:	01096680 	call	10109668 <__sprint_r>
101030a8:	103c981e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101030ac:	d8c02017 	ldw	r3,128(sp)
101030b0:	da000404 	addi	r8,sp,16
101030b4:	003dc306 	br	101027c4 <___vfprintf_internal_r+0x8c0>
101030b8:	d8802917 	ldw	r2,164(sp)
101030bc:	d8002785 	stb	zero,158(sp)
101030c0:	103f0616 	blt	r2,zero,10102cdc <___vfprintf_internal_r+0xdd8>
101030c4:	00ffdfc4 	movi	r3,-129
101030c8:	9d84b03a 	or	r2,r19,r22
101030cc:	90e4703a 	and	r18,r18,r3
101030d0:	103c6b26 	beq	r2,zero,10102280 <___vfprintf_internal_r+0x37c>
101030d4:	0039883a 	mov	fp,zero
101030d8:	003e7406 	br	10102aac <___vfprintf_internal_r+0xba8>
101030dc:	9080040c 	andi	r2,r18,16
101030e0:	1001b326 	beq	r2,zero,101037b0 <___vfprintf_internal_r+0x18ac>
101030e4:	d9002d17 	ldw	r4,180(sp)
101030e8:	d9402917 	ldw	r5,164(sp)
101030ec:	d8002785 	stb	zero,158(sp)
101030f0:	20800104 	addi	r2,r4,4
101030f4:	24c00017 	ldw	r19,0(r4)
101030f8:	002d883a 	mov	r22,zero
101030fc:	2801b516 	blt	r5,zero,101037d4 <___vfprintf_internal_r+0x18d0>
10103100:	00ffdfc4 	movi	r3,-129
10103104:	d8802d15 	stw	r2,180(sp)
10103108:	90e4703a 	and	r18,r18,r3
1010310c:	983d2726 	beq	r19,zero,101025ac <___vfprintf_internal_r+0x6a8>
10103110:	0039883a 	mov	fp,zero
10103114:	003d2a06 	br	101025c0 <___vfprintf_internal_r+0x6bc>
10103118:	dc402617 	ldw	r17,152(sp)
1010311c:	0441d30e 	bge	zero,r17,1010386c <___vfprintf_internal_r+0x1968>
10103120:	dc403217 	ldw	r17,200(sp)
10103124:	d8803317 	ldw	r2,204(sp)
10103128:	1440010e 	bge	r2,r17,10103130 <___vfprintf_internal_r+0x122c>
1010312c:	1023883a 	mov	r17,r2
10103130:	04400a0e 	bge	zero,r17,1010315c <___vfprintf_internal_r+0x1258>
10103134:	d8801f17 	ldw	r2,124(sp)
10103138:	1c47883a 	add	r3,r3,r17
1010313c:	44000015 	stw	r16,0(r8)
10103140:	10800044 	addi	r2,r2,1
10103144:	44400115 	stw	r17,4(r8)
10103148:	d8c02015 	stw	r3,128(sp)
1010314c:	d8801f15 	stw	r2,124(sp)
10103150:	010001c4 	movi	r4,7
10103154:	20826516 	blt	r4,r2,10103aec <___vfprintf_internal_r+0x1be8>
10103158:	42000204 	addi	r8,r8,8
1010315c:	88026116 	blt	r17,zero,10103ae4 <___vfprintf_internal_r+0x1be0>
10103160:	d9003217 	ldw	r4,200(sp)
10103164:	2463c83a 	sub	r17,r4,r17
10103168:	04407b0e 	bge	zero,r17,10103358 <___vfprintf_internal_r+0x1454>
1010316c:	05800404 	movi	r22,16
10103170:	d8801f17 	ldw	r2,124(sp)
10103174:	b4419d0e 	bge	r22,r17,101037ec <___vfprintf_internal_r+0x18e8>
10103178:	01040474 	movhi	r4,4113
1010317c:	2103c184 	addi	r4,r4,3846
10103180:	d9002b15 	stw	r4,172(sp)
10103184:	070001c4 	movi	fp,7
10103188:	dcc02c17 	ldw	r19,176(sp)
1010318c:	00000306 	br	1010319c <___vfprintf_internal_r+0x1298>
10103190:	42000204 	addi	r8,r8,8
10103194:	8c7ffc04 	addi	r17,r17,-16
10103198:	b441970e 	bge	r22,r17,101037f8 <___vfprintf_internal_r+0x18f4>
1010319c:	18c00404 	addi	r3,r3,16
101031a0:	10800044 	addi	r2,r2,1
101031a4:	45000015 	stw	r20,0(r8)
101031a8:	45800115 	stw	r22,4(r8)
101031ac:	d8c02015 	stw	r3,128(sp)
101031b0:	d8801f15 	stw	r2,124(sp)
101031b4:	e0bff60e 	bge	fp,r2,10103190 <___vfprintf_internal_r+0x128c>
101031b8:	d9801e04 	addi	r6,sp,120
101031bc:	b80b883a 	mov	r5,r23
101031c0:	9809883a 	mov	r4,r19
101031c4:	01096680 	call	10109668 <__sprint_r>
101031c8:	103c501e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101031cc:	d8c02017 	ldw	r3,128(sp)
101031d0:	d8801f17 	ldw	r2,124(sp)
101031d4:	da000404 	addi	r8,sp,16
101031d8:	003fee06 	br	10103194 <___vfprintf_internal_r+0x1290>
101031dc:	d9002c17 	ldw	r4,176(sp)
101031e0:	d9801e04 	addi	r6,sp,120
101031e4:	b80b883a 	mov	r5,r23
101031e8:	01096680 	call	10109668 <__sprint_r>
101031ec:	103c471e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101031f0:	d8c02017 	ldw	r3,128(sp)
101031f4:	df002787 	ldb	fp,158(sp)
101031f8:	da000404 	addi	r8,sp,16
101031fc:	003d5606 	br	10102758 <___vfprintf_internal_r+0x854>
10103200:	9080040c 	andi	r2,r18,16
10103204:	10016126 	beq	r2,zero,1010378c <___vfprintf_internal_r+0x1888>
10103208:	d8802d17 	ldw	r2,180(sp)
1010320c:	14c00017 	ldw	r19,0(r2)
10103210:	10800104 	addi	r2,r2,4
10103214:	d8802d15 	stw	r2,180(sp)
10103218:	982dd7fa 	srai	r22,r19,31
1010321c:	b005883a 	mov	r2,r22
10103220:	003c8206 	br	1010242c <___vfprintf_internal_r+0x528>
10103224:	9080040c 	andi	r2,r18,16
10103228:	10003526 	beq	r2,zero,10103300 <___vfprintf_internal_r+0x13fc>
1010322c:	d9402d17 	ldw	r5,180(sp)
10103230:	d8c02917 	ldw	r3,164(sp)
10103234:	d8002785 	stb	zero,158(sp)
10103238:	28800104 	addi	r2,r5,4
1010323c:	2cc00017 	ldw	r19,0(r5)
10103240:	002d883a 	mov	r22,zero
10103244:	18003716 	blt	r3,zero,10103324 <___vfprintf_internal_r+0x1420>
10103248:	00ffdfc4 	movi	r3,-129
1010324c:	d8802d15 	stw	r2,180(sp)
10103250:	90e4703a 	and	r18,r18,r3
10103254:	0039883a 	mov	fp,zero
10103258:	983df326 	beq	r19,zero,10102a28 <___vfprintf_internal_r+0xb24>
1010325c:	00800244 	movi	r2,9
10103260:	14fc7b36 	bltu	r2,r19,10102450 <___vfprintf_internal_r+0x54c>
10103264:	d8c02817 	ldw	r3,160(sp)
10103268:	dc001dc4 	addi	r16,sp,119
1010326c:	9cc00c04 	addi	r19,r19,48
10103270:	1c07c83a 	sub	r3,r3,r16
10103274:	dcc01dc5 	stb	r19,119(sp)
10103278:	d8c02e15 	stw	r3,184(sp)
1010327c:	003ce806 	br	10102620 <___vfprintf_internal_r+0x71c>
10103280:	d8803317 	ldw	r2,204(sp)
10103284:	143fffc4 	addi	r16,r2,-1
10103288:	043f4d0e 	bge	zero,r16,10102fc0 <___vfprintf_internal_r+0x10bc>
1010328c:	07000404 	movi	fp,16
10103290:	e400810e 	bge	fp,r16,10103498 <___vfprintf_internal_r+0x1594>
10103294:	01440474 	movhi	r5,4113
10103298:	2943c184 	addi	r5,r5,3846
1010329c:	d9402b15 	stw	r5,172(sp)
101032a0:	01c001c4 	movi	r7,7
101032a4:	dcc02c17 	ldw	r19,176(sp)
101032a8:	00000306 	br	101032b8 <___vfprintf_internal_r+0x13b4>
101032ac:	b5800204 	addi	r22,r22,8
101032b0:	843ffc04 	addi	r16,r16,-16
101032b4:	e4007b0e 	bge	fp,r16,101034a4 <___vfprintf_internal_r+0x15a0>
101032b8:	18c00404 	addi	r3,r3,16
101032bc:	8c400044 	addi	r17,r17,1
101032c0:	b5000015 	stw	r20,0(r22)
101032c4:	b7000115 	stw	fp,4(r22)
101032c8:	d8c02015 	stw	r3,128(sp)
101032cc:	dc401f15 	stw	r17,124(sp)
101032d0:	3c7ff60e 	bge	r7,r17,101032ac <___vfprintf_internal_r+0x13a8>
101032d4:	d9801e04 	addi	r6,sp,120
101032d8:	b80b883a 	mov	r5,r23
101032dc:	9809883a 	mov	r4,r19
101032e0:	d9c03c15 	stw	r7,240(sp)
101032e4:	01096680 	call	10109668 <__sprint_r>
101032e8:	d9c03c17 	ldw	r7,240(sp)
101032ec:	103c071e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101032f0:	d8c02017 	ldw	r3,128(sp)
101032f4:	dc401f17 	ldw	r17,124(sp)
101032f8:	dd800404 	addi	r22,sp,16
101032fc:	003fec06 	br	101032b0 <___vfprintf_internal_r+0x13ac>
10103300:	9080100c 	andi	r2,r18,64
10103304:	d8002785 	stb	zero,158(sp)
10103308:	10010e26 	beq	r2,zero,10103744 <___vfprintf_internal_r+0x1840>
1010330c:	d9002d17 	ldw	r4,180(sp)
10103310:	d9402917 	ldw	r5,164(sp)
10103314:	002d883a 	mov	r22,zero
10103318:	20800104 	addi	r2,r4,4
1010331c:	24c0000b 	ldhu	r19,0(r4)
10103320:	283fc90e 	bge	r5,zero,10103248 <___vfprintf_internal_r+0x1344>
10103324:	d8802d15 	stw	r2,180(sp)
10103328:	0039883a 	mov	fp,zero
1010332c:	9d84b03a 	or	r2,r19,r22
10103330:	103c461e 	bne	r2,zero,1010244c <___vfprintf_internal_r+0x548>
10103334:	00800044 	movi	r2,1
10103338:	003e6c06 	br	10102cec <___vfprintf_internal_r+0xde8>
1010333c:	d9002c17 	ldw	r4,176(sp)
10103340:	d9801e04 	addi	r6,sp,120
10103344:	b80b883a 	mov	r5,r23
10103348:	01096680 	call	10109668 <__sprint_r>
1010334c:	103bef1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103350:	d8c02017 	ldw	r3,128(sp)
10103354:	da000404 	addi	r8,sp,16
10103358:	d9003217 	ldw	r4,200(sp)
1010335c:	d8802617 	ldw	r2,152(sp)
10103360:	d9403317 	ldw	r5,204(sp)
10103364:	8123883a 	add	r17,r16,r4
10103368:	11400216 	blt	r2,r5,10103374 <___vfprintf_internal_r+0x1470>
1010336c:	9100004c 	andi	r4,r18,1
10103370:	20000d26 	beq	r4,zero,101033a8 <___vfprintf_internal_r+0x14a4>
10103374:	d9003717 	ldw	r4,220(sp)
10103378:	d9403417 	ldw	r5,208(sp)
1010337c:	1907883a 	add	r3,r3,r4
10103380:	d9001f17 	ldw	r4,124(sp)
10103384:	41400015 	stw	r5,0(r8)
10103388:	d9403717 	ldw	r5,220(sp)
1010338c:	21000044 	addi	r4,r4,1
10103390:	d8c02015 	stw	r3,128(sp)
10103394:	41400115 	stw	r5,4(r8)
10103398:	d9001f15 	stw	r4,124(sp)
1010339c:	014001c4 	movi	r5,7
101033a0:	2901e816 	blt	r5,r4,10103b44 <___vfprintf_internal_r+0x1c40>
101033a4:	42000204 	addi	r8,r8,8
101033a8:	d9003317 	ldw	r4,204(sp)
101033ac:	8121883a 	add	r16,r16,r4
101033b0:	2085c83a 	sub	r2,r4,r2
101033b4:	8461c83a 	sub	r16,r16,r17
101033b8:	1400010e 	bge	r2,r16,101033c0 <___vfprintf_internal_r+0x14bc>
101033bc:	1021883a 	mov	r16,r2
101033c0:	04000a0e 	bge	zero,r16,101033ec <___vfprintf_internal_r+0x14e8>
101033c4:	d9001f17 	ldw	r4,124(sp)
101033c8:	1c07883a 	add	r3,r3,r16
101033cc:	44400015 	stw	r17,0(r8)
101033d0:	21000044 	addi	r4,r4,1
101033d4:	44000115 	stw	r16,4(r8)
101033d8:	d8c02015 	stw	r3,128(sp)
101033dc:	d9001f15 	stw	r4,124(sp)
101033e0:	014001c4 	movi	r5,7
101033e4:	2901fb16 	blt	r5,r4,10103bd4 <___vfprintf_internal_r+0x1cd0>
101033e8:	42000204 	addi	r8,r8,8
101033ec:	8001f716 	blt	r16,zero,10103bcc <___vfprintf_internal_r+0x1cc8>
101033f0:	1421c83a 	sub	r16,r2,r16
101033f4:	043d380e 	bge	zero,r16,101028d8 <___vfprintf_internal_r+0x9d4>
101033f8:	04400404 	movi	r17,16
101033fc:	d8801f17 	ldw	r2,124(sp)
10103400:	8c3efb0e 	bge	r17,r16,10102ff0 <___vfprintf_internal_r+0x10ec>
10103404:	01440474 	movhi	r5,4113
10103408:	2943c184 	addi	r5,r5,3846
1010340c:	d9402b15 	stw	r5,172(sp)
10103410:	058001c4 	movi	r22,7
10103414:	dcc02c17 	ldw	r19,176(sp)
10103418:	00000306 	br	10103428 <___vfprintf_internal_r+0x1524>
1010341c:	42000204 	addi	r8,r8,8
10103420:	843ffc04 	addi	r16,r16,-16
10103424:	8c3ef50e 	bge	r17,r16,10102ffc <___vfprintf_internal_r+0x10f8>
10103428:	18c00404 	addi	r3,r3,16
1010342c:	10800044 	addi	r2,r2,1
10103430:	45000015 	stw	r20,0(r8)
10103434:	44400115 	stw	r17,4(r8)
10103438:	d8c02015 	stw	r3,128(sp)
1010343c:	d8801f15 	stw	r2,124(sp)
10103440:	b0bff60e 	bge	r22,r2,1010341c <___vfprintf_internal_r+0x1518>
10103444:	d9801e04 	addi	r6,sp,120
10103448:	b80b883a 	mov	r5,r23
1010344c:	9809883a 	mov	r4,r19
10103450:	01096680 	call	10109668 <__sprint_r>
10103454:	103bad1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103458:	d8c02017 	ldw	r3,128(sp)
1010345c:	d8801f17 	ldw	r2,124(sp)
10103460:	da000404 	addi	r8,sp,16
10103464:	003fee06 	br	10103420 <___vfprintf_internal_r+0x151c>
10103468:	9088703a 	and	r4,r18,r2
1010346c:	203eab1e 	bne	r4,zero,10102f1c <___vfprintf_internal_r+0x1018>
10103470:	dc401f17 	ldw	r17,124(sp)
10103474:	40800115 	stw	r2,4(r8)
10103478:	44000015 	stw	r16,0(r8)
1010347c:	8c400044 	addi	r17,r17,1
10103480:	d8c02015 	stw	r3,128(sp)
10103484:	dc401f15 	stw	r17,124(sp)
10103488:	008001c4 	movi	r2,7
1010348c:	14400e16 	blt	r2,r17,101034c8 <___vfprintf_internal_r+0x15c4>
10103490:	45800204 	addi	r22,r8,8
10103494:	003eca06 	br	10102fc0 <___vfprintf_internal_r+0x10bc>
10103498:	01040474 	movhi	r4,4113
1010349c:	2103c184 	addi	r4,r4,3846
101034a0:	d9002b15 	stw	r4,172(sp)
101034a4:	d8802b17 	ldw	r2,172(sp)
101034a8:	1c07883a 	add	r3,r3,r16
101034ac:	8c400044 	addi	r17,r17,1
101034b0:	b0800015 	stw	r2,0(r22)
101034b4:	b4000115 	stw	r16,4(r22)
101034b8:	d8c02015 	stw	r3,128(sp)
101034bc:	dc401f15 	stw	r17,124(sp)
101034c0:	008001c4 	movi	r2,7
101034c4:	147ebd0e 	bge	r2,r17,10102fbc <___vfprintf_internal_r+0x10b8>
101034c8:	d9002c17 	ldw	r4,176(sp)
101034cc:	d9801e04 	addi	r6,sp,120
101034d0:	b80b883a 	mov	r5,r23
101034d4:	01096680 	call	10109668 <__sprint_r>
101034d8:	103b8c1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
101034dc:	d8c02017 	ldw	r3,128(sp)
101034e0:	dc401f17 	ldw	r17,124(sp)
101034e4:	dd800404 	addi	r22,sp,16
101034e8:	003eb506 	br	10102fc0 <___vfprintf_internal_r+0x10bc>
101034ec:	d9002c17 	ldw	r4,176(sp)
101034f0:	d9801e04 	addi	r6,sp,120
101034f4:	b80b883a 	mov	r5,r23
101034f8:	01096680 	call	10109668 <__sprint_r>
101034fc:	103b831e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103500:	d8c02017 	ldw	r3,128(sp)
10103504:	dc401f17 	ldw	r17,124(sp)
10103508:	da000404 	addi	r8,sp,16
1010350c:	003e8d06 	br	10102f44 <___vfprintf_internal_r+0x1040>
10103510:	d9002c17 	ldw	r4,176(sp)
10103514:	d9801e04 	addi	r6,sp,120
10103518:	b80b883a 	mov	r5,r23
1010351c:	01096680 	call	10109668 <__sprint_r>
10103520:	103b7a1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103524:	d8c02017 	ldw	r3,128(sp)
10103528:	dc401f17 	ldw	r17,124(sp)
1010352c:	dd800404 	addi	r22,sp,16
10103530:	003e8f06 	br	10102f70 <___vfprintf_internal_r+0x106c>
10103534:	0027883a 	mov	r19,zero
10103538:	003f4a06 	br	10103264 <___vfprintf_internal_r+0x1360>
1010353c:	d9002c17 	ldw	r4,176(sp)
10103540:	d9801e04 	addi	r6,sp,120
10103544:	b80b883a 	mov	r5,r23
10103548:	01096680 	call	10109668 <__sprint_r>
1010354c:	103b6f1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103550:	d8c02017 	ldw	r3,128(sp)
10103554:	da000404 	addi	r8,sp,16
10103558:	003c9d06 	br	101027d0 <___vfprintf_internal_r+0x8cc>
1010355c:	04e7c83a 	sub	r19,zero,r19
10103560:	9804c03a 	cmpne	r2,r19,zero
10103564:	05adc83a 	sub	r22,zero,r22
10103568:	b0adc83a 	sub	r22,r22,r2
1010356c:	d8802917 	ldw	r2,164(sp)
10103570:	07000b44 	movi	fp,45
10103574:	df002785 	stb	fp,158(sp)
10103578:	10017b16 	blt	r2,zero,10103b68 <___vfprintf_internal_r+0x1c64>
1010357c:	00bfdfc4 	movi	r2,-129
10103580:	90a4703a 	and	r18,r18,r2
10103584:	003bb106 	br	1010244c <___vfprintf_internal_r+0x548>
10103588:	d9003617 	ldw	r4,216(sp)
1010358c:	d9403817 	ldw	r5,224(sp)
10103590:	da003d15 	stw	r8,244(sp)
10103594:	010928c0 	call	1010928c <__fpclassifyd>
10103598:	da003d17 	ldw	r8,244(sp)
1010359c:	1000f026 	beq	r2,zero,10103960 <___vfprintf_internal_r+0x1a5c>
101035a0:	d9002917 	ldw	r4,164(sp)
101035a4:	05bff7c4 	movi	r22,-33
101035a8:	00bfffc4 	movi	r2,-1
101035ac:	8dac703a 	and	r22,r17,r22
101035b0:	20820026 	beq	r4,r2,10103db4 <___vfprintf_internal_r+0x1eb0>
101035b4:	008011c4 	movi	r2,71
101035b8:	b081f726 	beq	r22,r2,10103d98 <___vfprintf_internal_r+0x1e94>
101035bc:	d9003817 	ldw	r4,224(sp)
101035c0:	90c04014 	ori	r3,r18,256
101035c4:	d8c02b15 	stw	r3,172(sp)
101035c8:	20021516 	blt	r4,zero,10103e20 <___vfprintf_internal_r+0x1f1c>
101035cc:	dcc03817 	ldw	r19,224(sp)
101035d0:	d8002a05 	stb	zero,168(sp)
101035d4:	00801984 	movi	r2,102
101035d8:	8881f926 	beq	r17,r2,10103dc0 <___vfprintf_internal_r+0x1ebc>
101035dc:	00801184 	movi	r2,70
101035e0:	88821c26 	beq	r17,r2,10103e54 <___vfprintf_internal_r+0x1f50>
101035e4:	00801144 	movi	r2,69
101035e8:	b081ef26 	beq	r22,r2,10103da8 <___vfprintf_internal_r+0x1ea4>
101035ec:	d8c02917 	ldw	r3,164(sp)
101035f0:	d8802104 	addi	r2,sp,132
101035f4:	d8800315 	stw	r2,12(sp)
101035f8:	d9403617 	ldw	r5,216(sp)
101035fc:	d8802504 	addi	r2,sp,148
10103600:	d9002c17 	ldw	r4,176(sp)
10103604:	d8800215 	stw	r2,8(sp)
10103608:	d8802604 	addi	r2,sp,152
1010360c:	d8c00015 	stw	r3,0(sp)
10103610:	d8800115 	stw	r2,4(sp)
10103614:	01c00084 	movi	r7,2
10103618:	980d883a 	mov	r6,r19
1010361c:	d8c03c15 	stw	r3,240(sp)
10103620:	da003d15 	stw	r8,244(sp)
10103624:	01045280 	call	10104528 <_dtoa_r>
10103628:	1021883a 	mov	r16,r2
1010362c:	008019c4 	movi	r2,103
10103630:	d8c03c17 	ldw	r3,240(sp)
10103634:	da003d17 	ldw	r8,244(sp)
10103638:	88817126 	beq	r17,r2,10103c00 <___vfprintf_internal_r+0x1cfc>
1010363c:	008011c4 	movi	r2,71
10103640:	88829226 	beq	r17,r2,1010408c <___vfprintf_internal_r+0x2188>
10103644:	80f9883a 	add	fp,r16,r3
10103648:	d9003617 	ldw	r4,216(sp)
1010364c:	000d883a 	mov	r6,zero
10103650:	000f883a 	mov	r7,zero
10103654:	980b883a 	mov	r5,r19
10103658:	da003d15 	stw	r8,244(sp)
1010365c:	010d12c0 	call	1010d12c <__eqdf2>
10103660:	da003d17 	ldw	r8,244(sp)
10103664:	10018d26 	beq	r2,zero,10103c9c <___vfprintf_internal_r+0x1d98>
10103668:	d8802117 	ldw	r2,132(sp)
1010366c:	1700062e 	bgeu	r2,fp,10103688 <___vfprintf_internal_r+0x1784>
10103670:	01000c04 	movi	r4,48
10103674:	10c00044 	addi	r3,r2,1
10103678:	d8c02115 	stw	r3,132(sp)
1010367c:	11000005 	stb	r4,0(r2)
10103680:	d8802117 	ldw	r2,132(sp)
10103684:	173ffb36 	bltu	r2,fp,10103674 <___vfprintf_internal_r+0x1770>
10103688:	1405c83a 	sub	r2,r2,r16
1010368c:	d8803315 	stw	r2,204(sp)
10103690:	008011c4 	movi	r2,71
10103694:	b0817626 	beq	r22,r2,10103c70 <___vfprintf_internal_r+0x1d6c>
10103698:	00801944 	movi	r2,101
1010369c:	1442810e 	bge	r2,r17,101040a4 <___vfprintf_internal_r+0x21a0>
101036a0:	d8c02617 	ldw	r3,152(sp)
101036a4:	00801984 	movi	r2,102
101036a8:	d8c03215 	stw	r3,200(sp)
101036ac:	8881fe26 	beq	r17,r2,10103ea8 <___vfprintf_internal_r+0x1fa4>
101036b0:	d8c03217 	ldw	r3,200(sp)
101036b4:	d9003317 	ldw	r4,204(sp)
101036b8:	1901dd16 	blt	r3,r4,10103e30 <___vfprintf_internal_r+0x1f2c>
101036bc:	9480004c 	andi	r18,r18,1
101036c0:	90022b1e 	bne	r18,zero,10103f70 <___vfprintf_internal_r+0x206c>
101036c4:	1805883a 	mov	r2,r3
101036c8:	18028016 	blt	r3,zero,101040cc <___vfprintf_internal_r+0x21c8>
101036cc:	d8c03217 	ldw	r3,200(sp)
101036d0:	044019c4 	movi	r17,103
101036d4:	d8c02e15 	stw	r3,184(sp)
101036d8:	df002a07 	ldb	fp,168(sp)
101036dc:	e001531e 	bne	fp,zero,10103c2c <___vfprintf_internal_r+0x1d28>
101036e0:	df002783 	ldbu	fp,158(sp)
101036e4:	d8802a15 	stw	r2,168(sp)
101036e8:	dc802b17 	ldw	r18,172(sp)
101036ec:	d8002915 	stw	zero,164(sp)
101036f0:	003bd106 	br	10102638 <___vfprintf_internal_r+0x734>
101036f4:	d8802d17 	ldw	r2,180(sp)
101036f8:	d8c02d17 	ldw	r3,180(sp)
101036fc:	d9002d17 	ldw	r4,180(sp)
10103700:	10800017 	ldw	r2,0(r2)
10103704:	18c00117 	ldw	r3,4(r3)
10103708:	21000204 	addi	r4,r4,8
1010370c:	d8803615 	stw	r2,216(sp)
10103710:	d8c03815 	stw	r3,224(sp)
10103714:	d9002d15 	stw	r4,180(sp)
10103718:	003b7506 	br	101024f0 <___vfprintf_internal_r+0x5ec>
1010371c:	ac400007 	ldb	r17,0(r21)
10103720:	003a5906 	br	10102088 <___vfprintf_internal_r+0x184>
10103724:	9080100c 	andi	r2,r18,64
10103728:	1000a826 	beq	r2,zero,101039cc <___vfprintf_internal_r+0x1ac8>
1010372c:	d9002d17 	ldw	r4,180(sp)
10103730:	002d883a 	mov	r22,zero
10103734:	24c0000b 	ldhu	r19,0(r4)
10103738:	21000104 	addi	r4,r4,4
1010373c:	d9002d15 	stw	r4,180(sp)
10103740:	003ccb06 	br	10102a70 <___vfprintf_internal_r+0xb6c>
10103744:	d8c02d17 	ldw	r3,180(sp)
10103748:	d9002917 	ldw	r4,164(sp)
1010374c:	002d883a 	mov	r22,zero
10103750:	18800104 	addi	r2,r3,4
10103754:	1cc00017 	ldw	r19,0(r3)
10103758:	203ebb0e 	bge	r4,zero,10103248 <___vfprintf_internal_r+0x1344>
1010375c:	003ef106 	br	10103324 <___vfprintf_internal_r+0x1420>
10103760:	9080040c 	andi	r2,r18,16
10103764:	1000921e 	bne	r2,zero,101039b0 <___vfprintf_internal_r+0x1aac>
10103768:	9480100c 	andi	r18,r18,64
1010376c:	90013926 	beq	r18,zero,10103c54 <___vfprintf_internal_r+0x1d50>
10103770:	d9002d17 	ldw	r4,180(sp)
10103774:	d9402f17 	ldw	r5,188(sp)
10103778:	20800017 	ldw	r2,0(r4)
1010377c:	21000104 	addi	r4,r4,4
10103780:	d9002d15 	stw	r4,180(sp)
10103784:	1140000d 	sth	r5,0(r2)
10103788:	003a1606 	br	10101fe4 <___vfprintf_internal_r+0xe0>
1010378c:	9080100c 	andi	r2,r18,64
10103790:	10008026 	beq	r2,zero,10103994 <___vfprintf_internal_r+0x1a90>
10103794:	d8c02d17 	ldw	r3,180(sp)
10103798:	1cc0000f 	ldh	r19,0(r3)
1010379c:	18c00104 	addi	r3,r3,4
101037a0:	d8c02d15 	stw	r3,180(sp)
101037a4:	982dd7fa 	srai	r22,r19,31
101037a8:	b005883a 	mov	r2,r22
101037ac:	003b1f06 	br	1010242c <___vfprintf_internal_r+0x528>
101037b0:	9080100c 	andi	r2,r18,64
101037b4:	d8002785 	stb	zero,158(sp)
101037b8:	10008a1e 	bne	r2,zero,101039e4 <___vfprintf_internal_r+0x1ae0>
101037bc:	d9402d17 	ldw	r5,180(sp)
101037c0:	d8c02917 	ldw	r3,164(sp)
101037c4:	002d883a 	mov	r22,zero
101037c8:	28800104 	addi	r2,r5,4
101037cc:	2cc00017 	ldw	r19,0(r5)
101037d0:	183e4b0e 	bge	r3,zero,10103100 <___vfprintf_internal_r+0x11fc>
101037d4:	9d86b03a 	or	r3,r19,r22
101037d8:	d8802d15 	stw	r2,180(sp)
101037dc:	183e4c1e 	bne	r3,zero,10103110 <___vfprintf_internal_r+0x120c>
101037e0:	0039883a 	mov	fp,zero
101037e4:	0005883a 	mov	r2,zero
101037e8:	003d4006 	br	10102cec <___vfprintf_internal_r+0xde8>
101037ec:	01440474 	movhi	r5,4113
101037f0:	2943c184 	addi	r5,r5,3846
101037f4:	d9402b15 	stw	r5,172(sp)
101037f8:	d9402b17 	ldw	r5,172(sp)
101037fc:	1c47883a 	add	r3,r3,r17
10103800:	10800044 	addi	r2,r2,1
10103804:	41400015 	stw	r5,0(r8)
10103808:	44400115 	stw	r17,4(r8)
1010380c:	d8c02015 	stw	r3,128(sp)
10103810:	d8801f15 	stw	r2,124(sp)
10103814:	010001c4 	movi	r4,7
10103818:	20bec816 	blt	r4,r2,1010333c <___vfprintf_internal_r+0x1438>
1010381c:	42000204 	addi	r8,r8,8
10103820:	003ecd06 	br	10103358 <___vfprintf_internal_r+0x1454>
10103824:	d9002917 	ldw	r4,164(sp)
10103828:	d8002785 	stb	zero,158(sp)
1010382c:	203d2d16 	blt	r4,zero,10102ce4 <___vfprintf_internal_r+0xde0>
10103830:	00bfdfc4 	movi	r2,-129
10103834:	90a4703a 	and	r18,r18,r2
10103838:	003a9106 	br	10102280 <___vfprintf_internal_r+0x37c>
1010383c:	01040474 	movhi	r4,4113
10103840:	2103c184 	addi	r4,r4,3846
10103844:	d9002b15 	stw	r4,172(sp)
10103848:	003c0c06 	br	1010287c <___vfprintf_internal_r+0x978>
1010384c:	d9002c17 	ldw	r4,176(sp)
10103850:	d9801e04 	addi	r6,sp,120
10103854:	b80b883a 	mov	r5,r23
10103858:	01096680 	call	10109668 <__sprint_r>
1010385c:	103aab1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103860:	d8c02017 	ldw	r3,128(sp)
10103864:	da000404 	addi	r8,sp,16
10103868:	003d4106 	br	10102d70 <___vfprintf_internal_r+0xe6c>
1010386c:	d8801f17 	ldw	r2,124(sp)
10103870:	01440474 	movhi	r5,4113
10103874:	01000044 	movi	r4,1
10103878:	18c00044 	addi	r3,r3,1
1010387c:	10800044 	addi	r2,r2,1
10103880:	2943c104 	addi	r5,r5,3844
10103884:	41000115 	stw	r4,4(r8)
10103888:	41400015 	stw	r5,0(r8)
1010388c:	d8c02015 	stw	r3,128(sp)
10103890:	d8801f15 	stw	r2,124(sp)
10103894:	010001c4 	movi	r4,7
10103898:	20805c16 	blt	r4,r2,10103a0c <___vfprintf_internal_r+0x1b08>
1010389c:	42000204 	addi	r8,r8,8
101038a0:	8800041e 	bne	r17,zero,101038b4 <___vfprintf_internal_r+0x19b0>
101038a4:	d8803317 	ldw	r2,204(sp)
101038a8:	1000021e 	bne	r2,zero,101038b4 <___vfprintf_internal_r+0x19b0>
101038ac:	9080004c 	andi	r2,r18,1
101038b0:	103c0926 	beq	r2,zero,101028d8 <___vfprintf_internal_r+0x9d4>
101038b4:	d9003717 	ldw	r4,220(sp)
101038b8:	d8801f17 	ldw	r2,124(sp)
101038bc:	d9403417 	ldw	r5,208(sp)
101038c0:	20c7883a 	add	r3,r4,r3
101038c4:	10800044 	addi	r2,r2,1
101038c8:	41000115 	stw	r4,4(r8)
101038cc:	41400015 	stw	r5,0(r8)
101038d0:	d8c02015 	stw	r3,128(sp)
101038d4:	d8801f15 	stw	r2,124(sp)
101038d8:	010001c4 	movi	r4,7
101038dc:	20812116 	blt	r4,r2,10103d64 <___vfprintf_internal_r+0x1e60>
101038e0:	42000204 	addi	r8,r8,8
101038e4:	0463c83a 	sub	r17,zero,r17
101038e8:	0440730e 	bge	zero,r17,10103ab8 <___vfprintf_internal_r+0x1bb4>
101038ec:	05800404 	movi	r22,16
101038f0:	b440860e 	bge	r22,r17,10103b0c <___vfprintf_internal_r+0x1c08>
101038f4:	01440474 	movhi	r5,4113
101038f8:	2943c184 	addi	r5,r5,3846
101038fc:	d9402b15 	stw	r5,172(sp)
10103900:	070001c4 	movi	fp,7
10103904:	dcc02c17 	ldw	r19,176(sp)
10103908:	00000306 	br	10103918 <___vfprintf_internal_r+0x1a14>
1010390c:	42000204 	addi	r8,r8,8
10103910:	8c7ffc04 	addi	r17,r17,-16
10103914:	b440800e 	bge	r22,r17,10103b18 <___vfprintf_internal_r+0x1c14>
10103918:	18c00404 	addi	r3,r3,16
1010391c:	10800044 	addi	r2,r2,1
10103920:	45000015 	stw	r20,0(r8)
10103924:	45800115 	stw	r22,4(r8)
10103928:	d8c02015 	stw	r3,128(sp)
1010392c:	d8801f15 	stw	r2,124(sp)
10103930:	e0bff60e 	bge	fp,r2,1010390c <___vfprintf_internal_r+0x1a08>
10103934:	d9801e04 	addi	r6,sp,120
10103938:	b80b883a 	mov	r5,r23
1010393c:	9809883a 	mov	r4,r19
10103940:	01096680 	call	10109668 <__sprint_r>
10103944:	103a711e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103948:	d8c02017 	ldw	r3,128(sp)
1010394c:	d8801f17 	ldw	r2,124(sp)
10103950:	da000404 	addi	r8,sp,16
10103954:	003fee06 	br	10103910 <___vfprintf_internal_r+0x1a0c>
10103958:	00bfffc4 	movi	r2,-1
1010395c:	003a6f06 	br	1010231c <___vfprintf_internal_r+0x418>
10103960:	008011c4 	movi	r2,71
10103964:	1440b816 	blt	r2,r17,10103c48 <___vfprintf_internal_r+0x1d44>
10103968:	04040474 	movhi	r16,4113
1010396c:	8403b304 	addi	r16,r16,3788
10103970:	00c000c4 	movi	r3,3
10103974:	00bfdfc4 	movi	r2,-129
10103978:	d8c02a15 	stw	r3,168(sp)
1010397c:	90a4703a 	and	r18,r18,r2
10103980:	df002783 	ldbu	fp,158(sp)
10103984:	d8c02e15 	stw	r3,184(sp)
10103988:	d8002915 	stw	zero,164(sp)
1010398c:	d8003215 	stw	zero,200(sp)
10103990:	003b2906 	br	10102638 <___vfprintf_internal_r+0x734>
10103994:	d9002d17 	ldw	r4,180(sp)
10103998:	24c00017 	ldw	r19,0(r4)
1010399c:	21000104 	addi	r4,r4,4
101039a0:	d9002d15 	stw	r4,180(sp)
101039a4:	982dd7fa 	srai	r22,r19,31
101039a8:	b005883a 	mov	r2,r22
101039ac:	003a9f06 	br	1010242c <___vfprintf_internal_r+0x528>
101039b0:	d9402d17 	ldw	r5,180(sp)
101039b4:	d8c02f17 	ldw	r3,188(sp)
101039b8:	28800017 	ldw	r2,0(r5)
101039bc:	29400104 	addi	r5,r5,4
101039c0:	d9402d15 	stw	r5,180(sp)
101039c4:	10c00015 	stw	r3,0(r2)
101039c8:	00398606 	br	10101fe4 <___vfprintf_internal_r+0xe0>
101039cc:	d9402d17 	ldw	r5,180(sp)
101039d0:	002d883a 	mov	r22,zero
101039d4:	2cc00017 	ldw	r19,0(r5)
101039d8:	29400104 	addi	r5,r5,4
101039dc:	d9402d15 	stw	r5,180(sp)
101039e0:	003c2306 	br	10102a70 <___vfprintf_internal_r+0xb6c>
101039e4:	d8c02d17 	ldw	r3,180(sp)
101039e8:	d9002917 	ldw	r4,164(sp)
101039ec:	002d883a 	mov	r22,zero
101039f0:	18800104 	addi	r2,r3,4
101039f4:	1cc0000b 	ldhu	r19,0(r3)
101039f8:	203dc10e 	bge	r4,zero,10103100 <___vfprintf_internal_r+0x11fc>
101039fc:	003f7506 	br	101037d4 <___vfprintf_internal_r+0x18d0>
10103a00:	04040474 	movhi	r16,4113
10103a04:	8403b104 	addi	r16,r16,3780
10103a08:	003acc06 	br	1010253c <___vfprintf_internal_r+0x638>
10103a0c:	d9002c17 	ldw	r4,176(sp)
10103a10:	d9801e04 	addi	r6,sp,120
10103a14:	b80b883a 	mov	r5,r23
10103a18:	01096680 	call	10109668 <__sprint_r>
10103a1c:	103a3b1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103a20:	dc402617 	ldw	r17,152(sp)
10103a24:	d8c02017 	ldw	r3,128(sp)
10103a28:	da000404 	addi	r8,sp,16
10103a2c:	003f9c06 	br	101038a0 <___vfprintf_internal_r+0x199c>
10103a30:	ac400043 	ldbu	r17,1(r21)
10103a34:	94800814 	ori	r18,r18,32
10103a38:	ad400044 	addi	r21,r21,1
10103a3c:	8c403fcc 	andi	r17,r17,255
10103a40:	8c40201c 	xori	r17,r17,128
10103a44:	8c7fe004 	addi	r17,r17,-128
10103a48:	00398f06 	br	10102088 <___vfprintf_internal_r+0x184>
10103a4c:	d8c02d15 	stw	r3,180(sp)
10103a50:	0039883a 	mov	fp,zero
10103a54:	003e3506 	br	1010332c <___vfprintf_internal_r+0x1428>
10103a58:	d9002c17 	ldw	r4,176(sp)
10103a5c:	d9801e04 	addi	r6,sp,120
10103a60:	b80b883a 	mov	r5,r23
10103a64:	01096680 	call	10109668 <__sprint_r>
10103a68:	103a281e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103a6c:	d8c02017 	ldw	r3,128(sp)
10103a70:	da000404 	addi	r8,sp,16
10103a74:	003cd006 	br	10102db8 <___vfprintf_internal_r+0xeb4>
10103a78:	8009883a 	mov	r4,r16
10103a7c:	da003d15 	stw	r8,244(sp)
10103a80:	0101e6c0 	call	10101e6c <strlen>
10103a84:	d8802e15 	stw	r2,184(sp)
10103a88:	da003d17 	ldw	r8,244(sp)
10103a8c:	103c340e 	bge	r2,zero,10102b60 <___vfprintf_internal_r+0xc5c>
10103a90:	0005883a 	mov	r2,zero
10103a94:	003c3206 	br	10102b60 <___vfprintf_internal_r+0xc5c>
10103a98:	d9002c17 	ldw	r4,176(sp)
10103a9c:	d9801e04 	addi	r6,sp,120
10103aa0:	b80b883a 	mov	r5,r23
10103aa4:	01096680 	call	10109668 <__sprint_r>
10103aa8:	103a181e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103aac:	d8c02017 	ldw	r3,128(sp)
10103ab0:	d8801f17 	ldw	r2,124(sp)
10103ab4:	da000404 	addi	r8,sp,16
10103ab8:	d9403317 	ldw	r5,204(sp)
10103abc:	10800044 	addi	r2,r2,1
10103ac0:	44000015 	stw	r16,0(r8)
10103ac4:	28c7883a 	add	r3,r5,r3
10103ac8:	003b7d06 	br	101028c0 <___vfprintf_internal_r+0x9bc>
10103acc:	01040474 	movhi	r4,4113
10103ad0:	2103c584 	addi	r4,r4,3862
10103ad4:	d9003515 	stw	r4,212(sp)
10103ad8:	003b1406 	br	1010272c <___vfprintf_internal_r+0x828>
10103adc:	013fffc4 	movi	r4,-1
10103ae0:	003a3506 	br	101023b8 <___vfprintf_internal_r+0x4b4>
10103ae4:	0023883a 	mov	r17,zero
10103ae8:	003d9d06 	br	10103160 <___vfprintf_internal_r+0x125c>
10103aec:	d9002c17 	ldw	r4,176(sp)
10103af0:	d9801e04 	addi	r6,sp,120
10103af4:	b80b883a 	mov	r5,r23
10103af8:	01096680 	call	10109668 <__sprint_r>
10103afc:	103a031e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103b00:	d8c02017 	ldw	r3,128(sp)
10103b04:	da000404 	addi	r8,sp,16
10103b08:	003d9406 	br	1010315c <___vfprintf_internal_r+0x1258>
10103b0c:	01040474 	movhi	r4,4113
10103b10:	2103c184 	addi	r4,r4,3846
10103b14:	d9002b15 	stw	r4,172(sp)
10103b18:	d9002b17 	ldw	r4,172(sp)
10103b1c:	1c47883a 	add	r3,r3,r17
10103b20:	10800044 	addi	r2,r2,1
10103b24:	41000015 	stw	r4,0(r8)
10103b28:	44400115 	stw	r17,4(r8)
10103b2c:	d8c02015 	stw	r3,128(sp)
10103b30:	d8801f15 	stw	r2,124(sp)
10103b34:	010001c4 	movi	r4,7
10103b38:	20bfd716 	blt	r4,r2,10103a98 <___vfprintf_internal_r+0x1b94>
10103b3c:	42000204 	addi	r8,r8,8
10103b40:	003fdd06 	br	10103ab8 <___vfprintf_internal_r+0x1bb4>
10103b44:	d9002c17 	ldw	r4,176(sp)
10103b48:	d9801e04 	addi	r6,sp,120
10103b4c:	b80b883a 	mov	r5,r23
10103b50:	01096680 	call	10109668 <__sprint_r>
10103b54:	1039ed1e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103b58:	d8802617 	ldw	r2,152(sp)
10103b5c:	d8c02017 	ldw	r3,128(sp)
10103b60:	da000404 	addi	r8,sp,16
10103b64:	003e1006 	br	101033a8 <___vfprintf_internal_r+0x14a4>
10103b68:	00800044 	movi	r2,1
10103b6c:	10803fcc 	andi	r2,r2,255
10103b70:	00c00044 	movi	r3,1
10103b74:	10fa3526 	beq	r2,r3,1010244c <___vfprintf_internal_r+0x548>
10103b78:	00c00084 	movi	r3,2
10103b7c:	10fbcb26 	beq	r2,r3,10102aac <___vfprintf_internal_r+0xba8>
10103b80:	003a8f06 	br	101025c0 <___vfprintf_internal_r+0x6bc>
10103b84:	01040474 	movhi	r4,4113
10103b88:	2103c584 	addi	r4,r4,3862
10103b8c:	d9003515 	stw	r4,212(sp)
10103b90:	003b7606 	br	1010296c <___vfprintf_internal_r+0xa68>
10103b94:	d8802917 	ldw	r2,164(sp)
10103b98:	00c00184 	movi	r3,6
10103b9c:	1880012e 	bgeu	r3,r2,10103ba4 <___vfprintf_internal_r+0x1ca0>
10103ba0:	1805883a 	mov	r2,r3
10103ba4:	d8802e15 	stw	r2,184(sp)
10103ba8:	1000ef16 	blt	r2,zero,10103f68 <___vfprintf_internal_r+0x2064>
10103bac:	04040474 	movhi	r16,4113
10103bb0:	d8802a15 	stw	r2,168(sp)
10103bb4:	dcc02d15 	stw	r19,180(sp)
10103bb8:	d8002915 	stw	zero,164(sp)
10103bbc:	d8003215 	stw	zero,200(sp)
10103bc0:	8403bf04 	addi	r16,r16,3836
10103bc4:	0039883a 	mov	fp,zero
10103bc8:	003aa206 	br	10102654 <___vfprintf_internal_r+0x750>
10103bcc:	0021883a 	mov	r16,zero
10103bd0:	003e0706 	br	101033f0 <___vfprintf_internal_r+0x14ec>
10103bd4:	d9002c17 	ldw	r4,176(sp)
10103bd8:	d9801e04 	addi	r6,sp,120
10103bdc:	b80b883a 	mov	r5,r23
10103be0:	01096680 	call	10109668 <__sprint_r>
10103be4:	1039c91e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103be8:	d8802617 	ldw	r2,152(sp)
10103bec:	d9403317 	ldw	r5,204(sp)
10103bf0:	d8c02017 	ldw	r3,128(sp)
10103bf4:	da000404 	addi	r8,sp,16
10103bf8:	2885c83a 	sub	r2,r5,r2
10103bfc:	003dfb06 	br	101033ec <___vfprintf_internal_r+0x14e8>
10103c00:	9080004c 	andi	r2,r18,1
10103c04:	103e8f1e 	bne	r2,zero,10103644 <___vfprintf_internal_r+0x1740>
10103c08:	d8802117 	ldw	r2,132(sp)
10103c0c:	003e9e06 	br	10103688 <___vfprintf_internal_r+0x1784>
10103c10:	1025883a 	mov	r18,r2
10103c14:	0039883a 	mov	fp,zero
10103c18:	00800084 	movi	r2,2
10103c1c:	003fd306 	br	10103b6c <___vfprintf_internal_r+0x1c68>
10103c20:	07000b44 	movi	fp,45
10103c24:	df002785 	stb	fp,158(sp)
10103c28:	003a4006 	br	1010252c <___vfprintf_internal_r+0x628>
10103c2c:	00c00b44 	movi	r3,45
10103c30:	d8c02785 	stb	r3,158(sp)
10103c34:	d8802a15 	stw	r2,168(sp)
10103c38:	dc802b17 	ldw	r18,172(sp)
10103c3c:	d8002915 	stw	zero,164(sp)
10103c40:	07000b44 	movi	fp,45
10103c44:	003a8006 	br	10102648 <___vfprintf_internal_r+0x744>
10103c48:	04040474 	movhi	r16,4113
10103c4c:	8403b404 	addi	r16,r16,3792
10103c50:	003f4706 	br	10103970 <___vfprintf_internal_r+0x1a6c>
10103c54:	d8c02d17 	ldw	r3,180(sp)
10103c58:	d9002f17 	ldw	r4,188(sp)
10103c5c:	18800017 	ldw	r2,0(r3)
10103c60:	18c00104 	addi	r3,r3,4
10103c64:	d8c02d15 	stw	r3,180(sp)
10103c68:	11000015 	stw	r4,0(r2)
10103c6c:	0038dd06 	br	10101fe4 <___vfprintf_internal_r+0xe0>
10103c70:	dd802617 	ldw	r22,152(sp)
10103c74:	00bfff44 	movi	r2,-3
10103c78:	b0801c16 	blt	r22,r2,10103cec <___vfprintf_internal_r+0x1de8>
10103c7c:	d9402917 	ldw	r5,164(sp)
10103c80:	2d801a16 	blt	r5,r22,10103cec <___vfprintf_internal_r+0x1de8>
10103c84:	dd803215 	stw	r22,200(sp)
10103c88:	003e8906 	br	101036b0 <___vfprintf_internal_r+0x17ac>
10103c8c:	01040474 	movhi	r4,4113
10103c90:	2103c184 	addi	r4,r4,3846
10103c94:	d9002b15 	stw	r4,172(sp)
10103c98:	003c9106 	br	10102ee0 <___vfprintf_internal_r+0xfdc>
10103c9c:	e005883a 	mov	r2,fp
10103ca0:	003e7906 	br	10103688 <___vfprintf_internal_r+0x1784>
10103ca4:	d9402917 	ldw	r5,164(sp)
10103ca8:	df002783 	ldbu	fp,158(sp)
10103cac:	dcc02d15 	stw	r19,180(sp)
10103cb0:	d9402a15 	stw	r5,168(sp)
10103cb4:	d9402e15 	stw	r5,184(sp)
10103cb8:	d8002915 	stw	zero,164(sp)
10103cbc:	d8003215 	stw	zero,200(sp)
10103cc0:	003a5d06 	br	10102638 <___vfprintf_internal_r+0x734>
10103cc4:	9080004c 	andi	r2,r18,1
10103cc8:	0039883a 	mov	fp,zero
10103ccc:	10000426 	beq	r2,zero,10103ce0 <___vfprintf_internal_r+0x1ddc>
10103cd0:	00800c04 	movi	r2,48
10103cd4:	dc001dc4 	addi	r16,sp,119
10103cd8:	d8801dc5 	stb	r2,119(sp)
10103cdc:	003b8006 	br	10102ae0 <___vfprintf_internal_r+0xbdc>
10103ce0:	d8002e15 	stw	zero,184(sp)
10103ce4:	dc001e04 	addi	r16,sp,120
10103ce8:	003a4d06 	br	10102620 <___vfprintf_internal_r+0x71c>
10103cec:	8c7fff84 	addi	r17,r17,-2
10103cf0:	b5bfffc4 	addi	r22,r22,-1
10103cf4:	dd802615 	stw	r22,152(sp)
10103cf8:	dc4022c5 	stb	r17,139(sp)
10103cfc:	b000bf16 	blt	r22,zero,10103ffc <___vfprintf_internal_r+0x20f8>
10103d00:	00800ac4 	movi	r2,43
10103d04:	d8802305 	stb	r2,140(sp)
10103d08:	00800244 	movi	r2,9
10103d0c:	15807016 	blt	r2,r22,10103ed0 <___vfprintf_internal_r+0x1fcc>
10103d10:	00800c04 	movi	r2,48
10103d14:	b5800c04 	addi	r22,r22,48
10103d18:	d8802345 	stb	r2,141(sp)
10103d1c:	dd802385 	stb	r22,142(sp)
10103d20:	d88023c4 	addi	r2,sp,143
10103d24:	df0022c4 	addi	fp,sp,139
10103d28:	d8c03317 	ldw	r3,204(sp)
10103d2c:	1739c83a 	sub	fp,r2,fp
10103d30:	d9003317 	ldw	r4,204(sp)
10103d34:	e0c7883a 	add	r3,fp,r3
10103d38:	df003a15 	stw	fp,232(sp)
10103d3c:	d8c02e15 	stw	r3,184(sp)
10103d40:	00800044 	movi	r2,1
10103d44:	1100b30e 	bge	r2,r4,10104014 <___vfprintf_internal_r+0x2110>
10103d48:	d8c02e17 	ldw	r3,184(sp)
10103d4c:	18c00044 	addi	r3,r3,1
10103d50:	d8c02e15 	stw	r3,184(sp)
10103d54:	1805883a 	mov	r2,r3
10103d58:	1800ac16 	blt	r3,zero,1010400c <___vfprintf_internal_r+0x2108>
10103d5c:	d8003215 	stw	zero,200(sp)
10103d60:	003e5d06 	br	101036d8 <___vfprintf_internal_r+0x17d4>
10103d64:	d9002c17 	ldw	r4,176(sp)
10103d68:	d9801e04 	addi	r6,sp,120
10103d6c:	b80b883a 	mov	r5,r23
10103d70:	01096680 	call	10109668 <__sprint_r>
10103d74:	1039651e 	bne	r2,zero,1010230c <___vfprintf_internal_r+0x408>
10103d78:	dc402617 	ldw	r17,152(sp)
10103d7c:	d8c02017 	ldw	r3,128(sp)
10103d80:	d8801f17 	ldw	r2,124(sp)
10103d84:	da000404 	addi	r8,sp,16
10103d88:	003ed606 	br	101038e4 <___vfprintf_internal_r+0x19e0>
10103d8c:	582b883a 	mov	r21,r11
10103d90:	d8002915 	stw	zero,164(sp)
10103d94:	0038bd06 	br	1010208c <___vfprintf_internal_r+0x188>
10103d98:	d8802917 	ldw	r2,164(sp)
10103d9c:	103e071e 	bne	r2,zero,101035bc <___vfprintf_internal_r+0x16b8>
10103da0:	dc002915 	stw	r16,164(sp)
10103da4:	003e0506 	br	101035bc <___vfprintf_internal_r+0x16b8>
10103da8:	d9002917 	ldw	r4,164(sp)
10103dac:	20c00044 	addi	r3,r4,1
10103db0:	003e0f06 	br	101035f0 <___vfprintf_internal_r+0x16ec>
10103db4:	01400184 	movi	r5,6
10103db8:	d9402915 	stw	r5,164(sp)
10103dbc:	003dff06 	br	101035bc <___vfprintf_internal_r+0x16b8>
10103dc0:	d8802104 	addi	r2,sp,132
10103dc4:	d8800315 	stw	r2,12(sp)
10103dc8:	d8802504 	addi	r2,sp,148
10103dcc:	d8800215 	stw	r2,8(sp)
10103dd0:	d8802604 	addi	r2,sp,152
10103dd4:	d8800115 	stw	r2,4(sp)
10103dd8:	d8802917 	ldw	r2,164(sp)
10103ddc:	d9403617 	ldw	r5,216(sp)
10103de0:	d9002c17 	ldw	r4,176(sp)
10103de4:	d8800015 	stw	r2,0(sp)
10103de8:	01c000c4 	movi	r7,3
10103dec:	980d883a 	mov	r6,r19
10103df0:	da003d15 	stw	r8,244(sp)
10103df4:	01045280 	call	10104528 <_dtoa_r>
10103df8:	d8c02917 	ldw	r3,164(sp)
10103dfc:	da003d17 	ldw	r8,244(sp)
10103e00:	1021883a 	mov	r16,r2
10103e04:	10f9883a 	add	fp,r2,r3
10103e08:	81000007 	ldb	r4,0(r16)
10103e0c:	00800c04 	movi	r2,48
10103e10:	20805e26 	beq	r4,r2,10103f8c <___vfprintf_internal_r+0x2088>
10103e14:	d8c02617 	ldw	r3,152(sp)
10103e18:	e0f9883a 	add	fp,fp,r3
10103e1c:	003e0a06 	br	10103648 <___vfprintf_internal_r+0x1744>
10103e20:	00c00b44 	movi	r3,45
10103e24:	24e0003c 	xorhi	r19,r4,32768
10103e28:	d8c02a05 	stb	r3,168(sp)
10103e2c:	003de906 	br	101035d4 <___vfprintf_internal_r+0x16d0>
10103e30:	d8c03217 	ldw	r3,200(sp)
10103e34:	00c07a0e 	bge	zero,r3,10104020 <___vfprintf_internal_r+0x211c>
10103e38:	00800044 	movi	r2,1
10103e3c:	d9003317 	ldw	r4,204(sp)
10103e40:	1105883a 	add	r2,r2,r4
10103e44:	d8802e15 	stw	r2,184(sp)
10103e48:	10004e16 	blt	r2,zero,10103f84 <___vfprintf_internal_r+0x2080>
10103e4c:	044019c4 	movi	r17,103
10103e50:	003e2106 	br	101036d8 <___vfprintf_internal_r+0x17d4>
10103e54:	d9002917 	ldw	r4,164(sp)
10103e58:	d8802104 	addi	r2,sp,132
10103e5c:	d8800315 	stw	r2,12(sp)
10103e60:	d9000015 	stw	r4,0(sp)
10103e64:	d8802504 	addi	r2,sp,148
10103e68:	d9403617 	ldw	r5,216(sp)
10103e6c:	d9002c17 	ldw	r4,176(sp)
10103e70:	d8800215 	stw	r2,8(sp)
10103e74:	d8802604 	addi	r2,sp,152
10103e78:	d8800115 	stw	r2,4(sp)
10103e7c:	01c000c4 	movi	r7,3
10103e80:	980d883a 	mov	r6,r19
10103e84:	da003d15 	stw	r8,244(sp)
10103e88:	01045280 	call	10104528 <_dtoa_r>
10103e8c:	d8c02917 	ldw	r3,164(sp)
10103e90:	da003d17 	ldw	r8,244(sp)
10103e94:	1021883a 	mov	r16,r2
10103e98:	00801184 	movi	r2,70
10103e9c:	80f9883a 	add	fp,r16,r3
10103ea0:	88bfd926 	beq	r17,r2,10103e08 <___vfprintf_internal_r+0x1f04>
10103ea4:	003de806 	br	10103648 <___vfprintf_internal_r+0x1744>
10103ea8:	d9002917 	ldw	r4,164(sp)
10103eac:	00c04d0e 	bge	zero,r3,10103fe4 <___vfprintf_internal_r+0x20e0>
10103eb0:	2000441e 	bne	r4,zero,10103fc4 <___vfprintf_internal_r+0x20c0>
10103eb4:	9480004c 	andi	r18,r18,1
10103eb8:	9000421e 	bne	r18,zero,10103fc4 <___vfprintf_internal_r+0x20c0>
10103ebc:	1805883a 	mov	r2,r3
10103ec0:	18007016 	blt	r3,zero,10104084 <___vfprintf_internal_r+0x2180>
10103ec4:	d8c03217 	ldw	r3,200(sp)
10103ec8:	d8c02e15 	stw	r3,184(sp)
10103ecc:	003e0206 	br	101036d8 <___vfprintf_internal_r+0x17d4>
10103ed0:	df0022c4 	addi	fp,sp,139
10103ed4:	dc002915 	stw	r16,164(sp)
10103ed8:	4027883a 	mov	r19,r8
10103edc:	e021883a 	mov	r16,fp
10103ee0:	b009883a 	mov	r4,r22
10103ee4:	01400284 	movi	r5,10
10103ee8:	0101bdc0 	call	10101bdc <__modsi3>
10103eec:	10800c04 	addi	r2,r2,48
10103ef0:	843fffc4 	addi	r16,r16,-1
10103ef4:	b009883a 	mov	r4,r22
10103ef8:	01400284 	movi	r5,10
10103efc:	80800005 	stb	r2,0(r16)
10103f00:	0101b580 	call	10101b58 <__divsi3>
10103f04:	102d883a 	mov	r22,r2
10103f08:	00800244 	movi	r2,9
10103f0c:	15bff416 	blt	r2,r22,10103ee0 <___vfprintf_internal_r+0x1fdc>
10103f10:	9811883a 	mov	r8,r19
10103f14:	b0800c04 	addi	r2,r22,48
10103f18:	8027883a 	mov	r19,r16
10103f1c:	997fffc4 	addi	r5,r19,-1
10103f20:	98bfffc5 	stb	r2,-1(r19)
10103f24:	dc002917 	ldw	r16,164(sp)
10103f28:	2f006a2e 	bgeu	r5,fp,101040d4 <___vfprintf_internal_r+0x21d0>
10103f2c:	d9c02384 	addi	r7,sp,142
10103f30:	3ccfc83a 	sub	r7,r7,r19
10103f34:	d9002344 	addi	r4,sp,141
10103f38:	e1cf883a 	add	r7,fp,r7
10103f3c:	00000106 	br	10103f44 <___vfprintf_internal_r+0x2040>
10103f40:	28800003 	ldbu	r2,0(r5)
10103f44:	20800005 	stb	r2,0(r4)
10103f48:	21000044 	addi	r4,r4,1
10103f4c:	29400044 	addi	r5,r5,1
10103f50:	393ffb1e 	bne	r7,r4,10103f40 <___vfprintf_internal_r+0x203c>
10103f54:	d8802304 	addi	r2,sp,140
10103f58:	14c5c83a 	sub	r2,r2,r19
10103f5c:	d8c02344 	addi	r3,sp,141
10103f60:	1885883a 	add	r2,r3,r2
10103f64:	003f7006 	br	10103d28 <___vfprintf_internal_r+0x1e24>
10103f68:	0005883a 	mov	r2,zero
10103f6c:	003f0f06 	br	10103bac <___vfprintf_internal_r+0x1ca8>
10103f70:	d8c03217 	ldw	r3,200(sp)
10103f74:	18c00044 	addi	r3,r3,1
10103f78:	d8c02e15 	stw	r3,184(sp)
10103f7c:	1805883a 	mov	r2,r3
10103f80:	183fb20e 	bge	r3,zero,10103e4c <___vfprintf_internal_r+0x1f48>
10103f84:	0005883a 	mov	r2,zero
10103f88:	003fb006 	br	10103e4c <___vfprintf_internal_r+0x1f48>
10103f8c:	d9003617 	ldw	r4,216(sp)
10103f90:	000d883a 	mov	r6,zero
10103f94:	000f883a 	mov	r7,zero
10103f98:	980b883a 	mov	r5,r19
10103f9c:	d8c03c15 	stw	r3,240(sp)
10103fa0:	da003d15 	stw	r8,244(sp)
10103fa4:	010d12c0 	call	1010d12c <__eqdf2>
10103fa8:	d8c03c17 	ldw	r3,240(sp)
10103fac:	da003d17 	ldw	r8,244(sp)
10103fb0:	103f9826 	beq	r2,zero,10103e14 <___vfprintf_internal_r+0x1f10>
10103fb4:	00800044 	movi	r2,1
10103fb8:	10c7c83a 	sub	r3,r2,r3
10103fbc:	d8c02615 	stw	r3,152(sp)
10103fc0:	003f9506 	br	10103e18 <___vfprintf_internal_r+0x1f14>
10103fc4:	d9002917 	ldw	r4,164(sp)
10103fc8:	d8c03217 	ldw	r3,200(sp)
10103fcc:	20800044 	addi	r2,r4,1
10103fd0:	1885883a 	add	r2,r3,r2
10103fd4:	d8802e15 	stw	r2,184(sp)
10103fd8:	103dbf0e 	bge	r2,zero,101036d8 <___vfprintf_internal_r+0x17d4>
10103fdc:	0005883a 	mov	r2,zero
10103fe0:	003dbd06 	br	101036d8 <___vfprintf_internal_r+0x17d4>
10103fe4:	2000211e 	bne	r4,zero,1010406c <___vfprintf_internal_r+0x2168>
10103fe8:	9480004c 	andi	r18,r18,1
10103fec:	90001f1e 	bne	r18,zero,1010406c <___vfprintf_internal_r+0x2168>
10103ff0:	00800044 	movi	r2,1
10103ff4:	d8802e15 	stw	r2,184(sp)
10103ff8:	003db706 	br	101036d8 <___vfprintf_internal_r+0x17d4>
10103ffc:	00800b44 	movi	r2,45
10104000:	05adc83a 	sub	r22,zero,r22
10104004:	d8802305 	stb	r2,140(sp)
10104008:	003f3f06 	br	10103d08 <___vfprintf_internal_r+0x1e04>
1010400c:	0005883a 	mov	r2,zero
10104010:	003f5206 	br	10103d5c <___vfprintf_internal_r+0x1e58>
10104014:	90a4703a 	and	r18,r18,r2
10104018:	903f4e26 	beq	r18,zero,10103d54 <___vfprintf_internal_r+0x1e50>
1010401c:	003f4a06 	br	10103d48 <___vfprintf_internal_r+0x1e44>
10104020:	00800084 	movi	r2,2
10104024:	10c5c83a 	sub	r2,r2,r3
10104028:	003f8406 	br	10103e3c <___vfprintf_internal_r+0x1f38>
1010402c:	d8802d17 	ldw	r2,180(sp)
10104030:	d9002d17 	ldw	r4,180(sp)
10104034:	ac400043 	ldbu	r17,1(r21)
10104038:	10800017 	ldw	r2,0(r2)
1010403c:	582b883a 	mov	r21,r11
10104040:	d8802915 	stw	r2,164(sp)
10104044:	20800104 	addi	r2,r4,4
10104048:	d9002917 	ldw	r4,164(sp)
1010404c:	d8802d15 	stw	r2,180(sp)
10104050:	203e7a0e 	bge	r4,zero,10103a3c <___vfprintf_internal_r+0x1b38>
10104054:	8c403fcc 	andi	r17,r17,255
10104058:	00bfffc4 	movi	r2,-1
1010405c:	8c40201c 	xori	r17,r17,128
10104060:	d8802915 	stw	r2,164(sp)
10104064:	8c7fe004 	addi	r17,r17,-128
10104068:	00380706 	br	10102088 <___vfprintf_internal_r+0x184>
1010406c:	d8c02917 	ldw	r3,164(sp)
10104070:	18c00084 	addi	r3,r3,2
10104074:	d8c02e15 	stw	r3,184(sp)
10104078:	1805883a 	mov	r2,r3
1010407c:	183d960e 	bge	r3,zero,101036d8 <___vfprintf_internal_r+0x17d4>
10104080:	003fd606 	br	10103fdc <___vfprintf_internal_r+0x20d8>
10104084:	0005883a 	mov	r2,zero
10104088:	003f8e06 	br	10103ec4 <___vfprintf_internal_r+0x1fc0>
1010408c:	9080004c 	andi	r2,r18,1
10104090:	103f811e 	bne	r2,zero,10103e98 <___vfprintf_internal_r+0x1f94>
10104094:	d8802117 	ldw	r2,132(sp)
10104098:	1405c83a 	sub	r2,r2,r16
1010409c:	d8803315 	stw	r2,204(sp)
101040a0:	b47ef326 	beq	r22,r17,10103c70 <___vfprintf_internal_r+0x1d6c>
101040a4:	dd802617 	ldw	r22,152(sp)
101040a8:	003f1106 	br	10103cf0 <___vfprintf_internal_r+0x1dec>
101040ac:	d9c02785 	stb	r7,158(sp)
101040b0:	00390406 	br	101024c4 <___vfprintf_internal_r+0x5c0>
101040b4:	d9c02785 	stb	r7,158(sp)
101040b8:	0038d306 	br	10102408 <___vfprintf_internal_r+0x504>
101040bc:	d9c02785 	stb	r7,158(sp)
101040c0:	003a6106 	br	10102a48 <___vfprintf_internal_r+0xb44>
101040c4:	d9c02785 	stb	r7,158(sp)
101040c8:	003af806 	br	10102cac <___vfprintf_internal_r+0xda8>
101040cc:	0005883a 	mov	r2,zero
101040d0:	003d7e06 	br	101036cc <___vfprintf_internal_r+0x17c8>
101040d4:	d8802344 	addi	r2,sp,141
101040d8:	003f1306 	br	10103d28 <___vfprintf_internal_r+0x1e24>
101040dc:	d9c02785 	stb	r7,158(sp)
101040e0:	00392306 	br	10102570 <___vfprintf_internal_r+0x66c>
101040e4:	d9c02785 	stb	r7,158(sp)
101040e8:	003aa906 	br	10102b90 <___vfprintf_internal_r+0xc8c>
101040ec:	d9c02785 	stb	r7,158(sp)
101040f0:	003a3d06 	br	101029e8 <___vfprintf_internal_r+0xae4>
101040f4:	d9c02785 	stb	r7,158(sp)
101040f8:	003aca06 	br	10102c24 <___vfprintf_internal_r+0xd20>

101040fc <__vfprintf_internal>:
101040fc:	00840474 	movhi	r2,4113
10104100:	108b1c04 	addi	r2,r2,11376
10104104:	300f883a 	mov	r7,r6
10104108:	280d883a 	mov	r6,r5
1010410c:	200b883a 	mov	r5,r4
10104110:	11000017 	ldw	r4,0(r2)
10104114:	0101f041 	jmpi	10101f04 <___vfprintf_internal_r>

10104118 <__sbprintf>:
10104118:	2880030b 	ldhu	r2,12(r5)
1010411c:	2ac01917 	ldw	r11,100(r5)
10104120:	2a80038b 	ldhu	r10,14(r5)
10104124:	2a400717 	ldw	r9,28(r5)
10104128:	2a000917 	ldw	r8,36(r5)
1010412c:	defee204 	addi	sp,sp,-1144
10104130:	00c10004 	movi	r3,1024
10104134:	dc011a15 	stw	r16,1128(sp)
10104138:	10bfff4c 	andi	r2,r2,65533
1010413c:	2821883a 	mov	r16,r5
10104140:	d8cb883a 	add	r5,sp,r3
10104144:	dc811c15 	stw	r18,1136(sp)
10104148:	dc411b15 	stw	r17,1132(sp)
1010414c:	dfc11d15 	stw	ra,1140(sp)
10104150:	2025883a 	mov	r18,r4
10104154:	d881030d 	sth	r2,1036(sp)
10104158:	dac11915 	stw	r11,1124(sp)
1010415c:	da81038d 	sth	r10,1038(sp)
10104160:	da410715 	stw	r9,1052(sp)
10104164:	da010915 	stw	r8,1060(sp)
10104168:	dec10015 	stw	sp,1024(sp)
1010416c:	dec10415 	stw	sp,1040(sp)
10104170:	d8c10215 	stw	r3,1032(sp)
10104174:	d8c10515 	stw	r3,1044(sp)
10104178:	d8010615 	stw	zero,1048(sp)
1010417c:	0101f040 	call	10101f04 <___vfprintf_internal_r>
10104180:	1023883a 	mov	r17,r2
10104184:	10000416 	blt	r2,zero,10104198 <__sbprintf+0x80>
10104188:	d9410004 	addi	r5,sp,1024
1010418c:	9009883a 	mov	r4,r18
10104190:	0105dcc0 	call	10105dcc <_fflush_r>
10104194:	10000d1e 	bne	r2,zero,101041cc <__sbprintf+0xb4>
10104198:	d881030b 	ldhu	r2,1036(sp)
1010419c:	1080100c 	andi	r2,r2,64
101041a0:	10000326 	beq	r2,zero,101041b0 <__sbprintf+0x98>
101041a4:	8080030b 	ldhu	r2,12(r16)
101041a8:	10801014 	ori	r2,r2,64
101041ac:	8080030d 	sth	r2,12(r16)
101041b0:	8805883a 	mov	r2,r17
101041b4:	dfc11d17 	ldw	ra,1140(sp)
101041b8:	dc811c17 	ldw	r18,1136(sp)
101041bc:	dc411b17 	ldw	r17,1132(sp)
101041c0:	dc011a17 	ldw	r16,1128(sp)
101041c4:	dec11e04 	addi	sp,sp,1144
101041c8:	f800283a 	ret
101041cc:	047fffc4 	movi	r17,-1
101041d0:	003ff106 	br	10104198 <__sbprintf+0x80>

101041d4 <__swsetup_r>:
101041d4:	00840474 	movhi	r2,4113
101041d8:	defffd04 	addi	sp,sp,-12
101041dc:	108b1c04 	addi	r2,r2,11376
101041e0:	dc400115 	stw	r17,4(sp)
101041e4:	2023883a 	mov	r17,r4
101041e8:	11000017 	ldw	r4,0(r2)
101041ec:	dc000015 	stw	r16,0(sp)
101041f0:	dfc00215 	stw	ra,8(sp)
101041f4:	2821883a 	mov	r16,r5
101041f8:	20000226 	beq	r4,zero,10104204 <__swsetup_r+0x30>
101041fc:	20800e17 	ldw	r2,56(r4)
10104200:	10003126 	beq	r2,zero,101042c8 <__swsetup_r+0xf4>
10104204:	8080030b 	ldhu	r2,12(r16)
10104208:	10c0020c 	andi	r3,r2,8
1010420c:	1009883a 	mov	r4,r2
10104210:	18000f26 	beq	r3,zero,10104250 <__swsetup_r+0x7c>
10104214:	80c00417 	ldw	r3,16(r16)
10104218:	18001526 	beq	r3,zero,10104270 <__swsetup_r+0x9c>
1010421c:	1100004c 	andi	r4,r2,1
10104220:	20001c1e 	bne	r4,zero,10104294 <__swsetup_r+0xc0>
10104224:	1080008c 	andi	r2,r2,2
10104228:	1000291e 	bne	r2,zero,101042d0 <__swsetup_r+0xfc>
1010422c:	80800517 	ldw	r2,20(r16)
10104230:	80800215 	stw	r2,8(r16)
10104234:	18001c26 	beq	r3,zero,101042a8 <__swsetup_r+0xd4>
10104238:	0005883a 	mov	r2,zero
1010423c:	dfc00217 	ldw	ra,8(sp)
10104240:	dc400117 	ldw	r17,4(sp)
10104244:	dc000017 	ldw	r16,0(sp)
10104248:	dec00304 	addi	sp,sp,12
1010424c:	f800283a 	ret
10104250:	2080040c 	andi	r2,r4,16
10104254:	10002e26 	beq	r2,zero,10104310 <__swsetup_r+0x13c>
10104258:	2080010c 	andi	r2,r4,4
1010425c:	10001e1e 	bne	r2,zero,101042d8 <__swsetup_r+0x104>
10104260:	80c00417 	ldw	r3,16(r16)
10104264:	20800214 	ori	r2,r4,8
10104268:	8080030d 	sth	r2,12(r16)
1010426c:	183feb1e 	bne	r3,zero,1010421c <__swsetup_r+0x48>
10104270:	1100a00c 	andi	r4,r2,640
10104274:	01408004 	movi	r5,512
10104278:	217fe826 	beq	r4,r5,1010421c <__swsetup_r+0x48>
1010427c:	800b883a 	mov	r5,r16
10104280:	8809883a 	mov	r4,r17
10104284:	0106d4c0 	call	10106d4c <__smakebuf_r>
10104288:	8080030b 	ldhu	r2,12(r16)
1010428c:	80c00417 	ldw	r3,16(r16)
10104290:	003fe206 	br	1010421c <__swsetup_r+0x48>
10104294:	80800517 	ldw	r2,20(r16)
10104298:	80000215 	stw	zero,8(r16)
1010429c:	0085c83a 	sub	r2,zero,r2
101042a0:	80800615 	stw	r2,24(r16)
101042a4:	183fe41e 	bne	r3,zero,10104238 <__swsetup_r+0x64>
101042a8:	80c0030b 	ldhu	r3,12(r16)
101042ac:	0005883a 	mov	r2,zero
101042b0:	1900200c 	andi	r4,r3,128
101042b4:	203fe126 	beq	r4,zero,1010423c <__swsetup_r+0x68>
101042b8:	18c01014 	ori	r3,r3,64
101042bc:	80c0030d 	sth	r3,12(r16)
101042c0:	00bfffc4 	movi	r2,-1
101042c4:	003fdd06 	br	1010423c <__swsetup_r+0x68>
101042c8:	01061a80 	call	101061a8 <__sinit>
101042cc:	003fcd06 	br	10104204 <__swsetup_r+0x30>
101042d0:	0005883a 	mov	r2,zero
101042d4:	003fd606 	br	10104230 <__swsetup_r+0x5c>
101042d8:	81400c17 	ldw	r5,48(r16)
101042dc:	28000626 	beq	r5,zero,101042f8 <__swsetup_r+0x124>
101042e0:	80801004 	addi	r2,r16,64
101042e4:	28800326 	beq	r5,r2,101042f4 <__swsetup_r+0x120>
101042e8:	8809883a 	mov	r4,r17
101042ec:	010631c0 	call	1010631c <_free_r>
101042f0:	8100030b 	ldhu	r4,12(r16)
101042f4:	80000c15 	stw	zero,48(r16)
101042f8:	80c00417 	ldw	r3,16(r16)
101042fc:	00bff6c4 	movi	r2,-37
10104300:	1108703a 	and	r4,r2,r4
10104304:	80000115 	stw	zero,4(r16)
10104308:	80c00015 	stw	r3,0(r16)
1010430c:	003fd506 	br	10104264 <__swsetup_r+0x90>
10104310:	00800244 	movi	r2,9
10104314:	88800015 	stw	r2,0(r17)
10104318:	20801014 	ori	r2,r4,64
1010431c:	8080030d 	sth	r2,12(r16)
10104320:	00bfffc4 	movi	r2,-1
10104324:	003fc506 	br	1010423c <__swsetup_r+0x68>

10104328 <quorem>:
10104328:	defff704 	addi	sp,sp,-36
1010432c:	dc800215 	stw	r18,8(sp)
10104330:	20800417 	ldw	r2,16(r4)
10104334:	2c800417 	ldw	r18,16(r5)
10104338:	dfc00815 	stw	ra,32(sp)
1010433c:	ddc00715 	stw	r23,28(sp)
10104340:	dd800615 	stw	r22,24(sp)
10104344:	dd400515 	stw	r21,20(sp)
10104348:	dd000415 	stw	r20,16(sp)
1010434c:	dcc00315 	stw	r19,12(sp)
10104350:	dc400115 	stw	r17,4(sp)
10104354:	dc000015 	stw	r16,0(sp)
10104358:	14807116 	blt	r2,r18,10104520 <quorem+0x1f8>
1010435c:	94bfffc4 	addi	r18,r18,-1
10104360:	94ad883a 	add	r22,r18,r18
10104364:	b5ad883a 	add	r22,r22,r22
10104368:	2c400504 	addi	r17,r5,20
1010436c:	8da9883a 	add	r20,r17,r22
10104370:	25400504 	addi	r21,r4,20
10104374:	282f883a 	mov	r23,r5
10104378:	adad883a 	add	r22,r21,r22
1010437c:	a1400017 	ldw	r5,0(r20)
10104380:	2021883a 	mov	r16,r4
10104384:	b1000017 	ldw	r4,0(r22)
10104388:	29400044 	addi	r5,r5,1
1010438c:	0101c500 	call	10101c50 <__udivsi3>
10104390:	1027883a 	mov	r19,r2
10104394:	10002c26 	beq	r2,zero,10104448 <quorem+0x120>
10104398:	a813883a 	mov	r9,r21
1010439c:	880b883a 	mov	r5,r17
101043a0:	0009883a 	mov	r4,zero
101043a4:	000d883a 	mov	r6,zero
101043a8:	2a000017 	ldw	r8,0(r5)
101043ac:	49c00017 	ldw	r7,0(r9)
101043b0:	29400104 	addi	r5,r5,4
101043b4:	40bfffcc 	andi	r2,r8,65535
101043b8:	14c5383a 	mul	r2,r2,r19
101043bc:	4010d43a 	srli	r8,r8,16
101043c0:	38ffffcc 	andi	r3,r7,65535
101043c4:	1105883a 	add	r2,r2,r4
101043c8:	1008d43a 	srli	r4,r2,16
101043cc:	44d1383a 	mul	r8,r8,r19
101043d0:	198d883a 	add	r6,r3,r6
101043d4:	10ffffcc 	andi	r3,r2,65535
101043d8:	30c7c83a 	sub	r3,r6,r3
101043dc:	380ed43a 	srli	r7,r7,16
101043e0:	4105883a 	add	r2,r8,r4
101043e4:	180dd43a 	srai	r6,r3,16
101043e8:	113fffcc 	andi	r4,r2,65535
101043ec:	390fc83a 	sub	r7,r7,r4
101043f0:	398d883a 	add	r6,r7,r6
101043f4:	300e943a 	slli	r7,r6,16
101043f8:	18ffffcc 	andi	r3,r3,65535
101043fc:	1008d43a 	srli	r4,r2,16
10104400:	38ceb03a 	or	r7,r7,r3
10104404:	49c00015 	stw	r7,0(r9)
10104408:	300dd43a 	srai	r6,r6,16
1010440c:	4a400104 	addi	r9,r9,4
10104410:	a17fe52e 	bgeu	r20,r5,101043a8 <quorem+0x80>
10104414:	b0800017 	ldw	r2,0(r22)
10104418:	10000b1e 	bne	r2,zero,10104448 <quorem+0x120>
1010441c:	b0bfff04 	addi	r2,r22,-4
10104420:	a880082e 	bgeu	r21,r2,10104444 <quorem+0x11c>
10104424:	b0ffff17 	ldw	r3,-4(r22)
10104428:	18000326 	beq	r3,zero,10104438 <quorem+0x110>
1010442c:	00000506 	br	10104444 <quorem+0x11c>
10104430:	10c00017 	ldw	r3,0(r2)
10104434:	1800031e 	bne	r3,zero,10104444 <quorem+0x11c>
10104438:	10bfff04 	addi	r2,r2,-4
1010443c:	94bfffc4 	addi	r18,r18,-1
10104440:	a8bffb36 	bltu	r21,r2,10104430 <quorem+0x108>
10104444:	84800415 	stw	r18,16(r16)
10104448:	b80b883a 	mov	r5,r23
1010444c:	8009883a 	mov	r4,r16
10104450:	010848c0 	call	1010848c <__mcmp>
10104454:	10002616 	blt	r2,zero,101044f0 <quorem+0x1c8>
10104458:	9cc00044 	addi	r19,r19,1
1010445c:	a805883a 	mov	r2,r21
10104460:	000b883a 	mov	r5,zero
10104464:	11000017 	ldw	r4,0(r2)
10104468:	89800017 	ldw	r6,0(r17)
1010446c:	10800104 	addi	r2,r2,4
10104470:	20ffffcc 	andi	r3,r4,65535
10104474:	194b883a 	add	r5,r3,r5
10104478:	30ffffcc 	andi	r3,r6,65535
1010447c:	28c7c83a 	sub	r3,r5,r3
10104480:	300cd43a 	srli	r6,r6,16
10104484:	2008d43a 	srli	r4,r4,16
10104488:	180bd43a 	srai	r5,r3,16
1010448c:	18ffffcc 	andi	r3,r3,65535
10104490:	2189c83a 	sub	r4,r4,r6
10104494:	2149883a 	add	r4,r4,r5
10104498:	200c943a 	slli	r6,r4,16
1010449c:	8c400104 	addi	r17,r17,4
101044a0:	200bd43a 	srai	r5,r4,16
101044a4:	30c6b03a 	or	r3,r6,r3
101044a8:	10ffff15 	stw	r3,-4(r2)
101044ac:	a47fed2e 	bgeu	r20,r17,10104464 <quorem+0x13c>
101044b0:	9485883a 	add	r2,r18,r18
101044b4:	1085883a 	add	r2,r2,r2
101044b8:	a887883a 	add	r3,r21,r2
101044bc:	18800017 	ldw	r2,0(r3)
101044c0:	10000b1e 	bne	r2,zero,101044f0 <quorem+0x1c8>
101044c4:	18bfff04 	addi	r2,r3,-4
101044c8:	a880082e 	bgeu	r21,r2,101044ec <quorem+0x1c4>
101044cc:	18ffff17 	ldw	r3,-4(r3)
101044d0:	18000326 	beq	r3,zero,101044e0 <quorem+0x1b8>
101044d4:	00000506 	br	101044ec <quorem+0x1c4>
101044d8:	10c00017 	ldw	r3,0(r2)
101044dc:	1800031e 	bne	r3,zero,101044ec <quorem+0x1c4>
101044e0:	10bfff04 	addi	r2,r2,-4
101044e4:	94bfffc4 	addi	r18,r18,-1
101044e8:	a8bffb36 	bltu	r21,r2,101044d8 <quorem+0x1b0>
101044ec:	84800415 	stw	r18,16(r16)
101044f0:	9805883a 	mov	r2,r19
101044f4:	dfc00817 	ldw	ra,32(sp)
101044f8:	ddc00717 	ldw	r23,28(sp)
101044fc:	dd800617 	ldw	r22,24(sp)
10104500:	dd400517 	ldw	r21,20(sp)
10104504:	dd000417 	ldw	r20,16(sp)
10104508:	dcc00317 	ldw	r19,12(sp)
1010450c:	dc800217 	ldw	r18,8(sp)
10104510:	dc400117 	ldw	r17,4(sp)
10104514:	dc000017 	ldw	r16,0(sp)
10104518:	dec00904 	addi	sp,sp,36
1010451c:	f800283a 	ret
10104520:	0005883a 	mov	r2,zero
10104524:	003ff306 	br	101044f4 <quorem+0x1cc>

10104528 <_dtoa_r>:
10104528:	20801017 	ldw	r2,64(r4)
1010452c:	deffde04 	addi	sp,sp,-136
10104530:	df002015 	stw	fp,128(sp)
10104534:	dcc01b15 	stw	r19,108(sp)
10104538:	dc801a15 	stw	r18,104(sp)
1010453c:	dc401915 	stw	r17,100(sp)
10104540:	dc001815 	stw	r16,96(sp)
10104544:	dfc02115 	stw	ra,132(sp)
10104548:	ddc01f15 	stw	r23,124(sp)
1010454c:	dd801e15 	stw	r22,120(sp)
10104550:	dd401d15 	stw	r21,116(sp)
10104554:	dd001c15 	stw	r20,112(sp)
10104558:	d9c00315 	stw	r7,12(sp)
1010455c:	2039883a 	mov	fp,r4
10104560:	3023883a 	mov	r17,r6
10104564:	2825883a 	mov	r18,r5
10104568:	dc002417 	ldw	r16,144(sp)
1010456c:	3027883a 	mov	r19,r6
10104570:	10000826 	beq	r2,zero,10104594 <_dtoa_r+0x6c>
10104574:	21801117 	ldw	r6,68(r4)
10104578:	00c00044 	movi	r3,1
1010457c:	100b883a 	mov	r5,r2
10104580:	1986983a 	sll	r3,r3,r6
10104584:	11800115 	stw	r6,4(r2)
10104588:	10c00215 	stw	r3,8(r2)
1010458c:	0107c6c0 	call	10107c6c <_Bfree>
10104590:	e0001015 	stw	zero,64(fp)
10104594:	88002e16 	blt	r17,zero,10104650 <_dtoa_r+0x128>
10104598:	80000015 	stw	zero,0(r16)
1010459c:	889ffc2c 	andhi	r2,r17,32752
101045a0:	00dffc34 	movhi	r3,32752
101045a4:	10c01c26 	beq	r2,r3,10104618 <_dtoa_r+0xf0>
101045a8:	000d883a 	mov	r6,zero
101045ac:	000f883a 	mov	r7,zero
101045b0:	9009883a 	mov	r4,r18
101045b4:	980b883a 	mov	r5,r19
101045b8:	010d12c0 	call	1010d12c <__eqdf2>
101045bc:	10002b1e 	bne	r2,zero,1010466c <_dtoa_r+0x144>
101045c0:	d9c02317 	ldw	r7,140(sp)
101045c4:	00800044 	movi	r2,1
101045c8:	38800015 	stw	r2,0(r7)
101045cc:	d8802517 	ldw	r2,148(sp)
101045d0:	10019e26 	beq	r2,zero,10104c4c <_dtoa_r+0x724>
101045d4:	d8c02517 	ldw	r3,148(sp)
101045d8:	00840474 	movhi	r2,4113
101045dc:	1083c144 	addi	r2,r2,3845
101045e0:	18800015 	stw	r2,0(r3)
101045e4:	10bfffc4 	addi	r2,r2,-1
101045e8:	dfc02117 	ldw	ra,132(sp)
101045ec:	df002017 	ldw	fp,128(sp)
101045f0:	ddc01f17 	ldw	r23,124(sp)
101045f4:	dd801e17 	ldw	r22,120(sp)
101045f8:	dd401d17 	ldw	r21,116(sp)
101045fc:	dd001c17 	ldw	r20,112(sp)
10104600:	dcc01b17 	ldw	r19,108(sp)
10104604:	dc801a17 	ldw	r18,104(sp)
10104608:	dc401917 	ldw	r17,100(sp)
1010460c:	dc001817 	ldw	r16,96(sp)
10104610:	dec02204 	addi	sp,sp,136
10104614:	f800283a 	ret
10104618:	d8c02317 	ldw	r3,140(sp)
1010461c:	0089c3c4 	movi	r2,9999
10104620:	18800015 	stw	r2,0(r3)
10104624:	90017726 	beq	r18,zero,10104c04 <_dtoa_r+0x6dc>
10104628:	00840474 	movhi	r2,4113
1010462c:	1083cd04 	addi	r2,r2,3892
10104630:	d9002517 	ldw	r4,148(sp)
10104634:	203fec26 	beq	r4,zero,101045e8 <_dtoa_r+0xc0>
10104638:	10c000c7 	ldb	r3,3(r2)
1010463c:	1801781e 	bne	r3,zero,10104c20 <_dtoa_r+0x6f8>
10104640:	10c000c4 	addi	r3,r2,3
10104644:	d9802517 	ldw	r6,148(sp)
10104648:	30c00015 	stw	r3,0(r6)
1010464c:	003fe606 	br	101045e8 <_dtoa_r+0xc0>
10104650:	04e00034 	movhi	r19,32768
10104654:	9cffffc4 	addi	r19,r19,-1
10104658:	00800044 	movi	r2,1
1010465c:	8ce6703a 	and	r19,r17,r19
10104660:	80800015 	stw	r2,0(r16)
10104664:	9823883a 	mov	r17,r19
10104668:	003fcc06 	br	1010459c <_dtoa_r+0x74>
1010466c:	d8800204 	addi	r2,sp,8
10104670:	d8800015 	stw	r2,0(sp)
10104674:	d9c00104 	addi	r7,sp,4
10104678:	900b883a 	mov	r5,r18
1010467c:	980d883a 	mov	r6,r19
10104680:	e009883a 	mov	r4,fp
10104684:	8820d53a 	srli	r16,r17,20
10104688:	01088580 	call	10108858 <__d2b>
1010468c:	d8800915 	stw	r2,36(sp)
10104690:	8001651e 	bne	r16,zero,10104c28 <_dtoa_r+0x700>
10104694:	dd800217 	ldw	r22,8(sp)
10104698:	dc000117 	ldw	r16,4(sp)
1010469c:	00800804 	movi	r2,32
101046a0:	b421883a 	add	r16,r22,r16
101046a4:	80c10c84 	addi	r3,r16,1074
101046a8:	10c2d10e 	bge	r2,r3,101051f0 <_dtoa_r+0xcc8>
101046ac:	00801004 	movi	r2,64
101046b0:	81010484 	addi	r4,r16,1042
101046b4:	10c7c83a 	sub	r3,r2,r3
101046b8:	9108d83a 	srl	r4,r18,r4
101046bc:	88e2983a 	sll	r17,r17,r3
101046c0:	2448b03a 	or	r4,r4,r17
101046c4:	010e4f40 	call	1010e4f4 <__floatunsidf>
101046c8:	017f8434 	movhi	r5,65040
101046cc:	01800044 	movi	r6,1
101046d0:	1009883a 	mov	r4,r2
101046d4:	194b883a 	add	r5,r3,r5
101046d8:	843fffc4 	addi	r16,r16,-1
101046dc:	d9801115 	stw	r6,68(sp)
101046e0:	000d883a 	mov	r6,zero
101046e4:	01cffe34 	movhi	r7,16376
101046e8:	010da9c0 	call	1010da9c <__subdf3>
101046ec:	0198dbf4 	movhi	r6,25455
101046f0:	01cff4f4 	movhi	r7,16339
101046f4:	3190d844 	addi	r6,r6,17249
101046f8:	39e1e9c4 	addi	r7,r7,-30809
101046fc:	1009883a 	mov	r4,r2
10104700:	180b883a 	mov	r5,r3
10104704:	010d3840 	call	1010d384 <__muldf3>
10104708:	01a2d874 	movhi	r6,35681
1010470c:	01cff1f4 	movhi	r7,16327
10104710:	31b22cc4 	addi	r6,r6,-14157
10104714:	39e28a04 	addi	r7,r7,-30168
10104718:	180b883a 	mov	r5,r3
1010471c:	1009883a 	mov	r4,r2
10104720:	010bf980 	call	1010bf98 <__adddf3>
10104724:	8009883a 	mov	r4,r16
10104728:	1029883a 	mov	r20,r2
1010472c:	1823883a 	mov	r17,r3
10104730:	010e4180 	call	1010e418 <__floatsidf>
10104734:	019427f4 	movhi	r6,20639
10104738:	01cff4f4 	movhi	r7,16339
1010473c:	319e7ec4 	addi	r6,r6,31227
10104740:	39d104c4 	addi	r7,r7,17427
10104744:	1009883a 	mov	r4,r2
10104748:	180b883a 	mov	r5,r3
1010474c:	010d3840 	call	1010d384 <__muldf3>
10104750:	100d883a 	mov	r6,r2
10104754:	180f883a 	mov	r7,r3
10104758:	a009883a 	mov	r4,r20
1010475c:	880b883a 	mov	r5,r17
10104760:	010bf980 	call	1010bf98 <__adddf3>
10104764:	1009883a 	mov	r4,r2
10104768:	180b883a 	mov	r5,r3
1010476c:	1029883a 	mov	r20,r2
10104770:	1823883a 	mov	r17,r3
10104774:	010e3980 	call	1010e398 <__fixdfsi>
10104778:	000d883a 	mov	r6,zero
1010477c:	000f883a 	mov	r7,zero
10104780:	a009883a 	mov	r4,r20
10104784:	880b883a 	mov	r5,r17
10104788:	d8800515 	stw	r2,20(sp)
1010478c:	010d2900 	call	1010d290 <__ledf2>
10104790:	10028716 	blt	r2,zero,101051b0 <_dtoa_r+0xc88>
10104794:	d8c00517 	ldw	r3,20(sp)
10104798:	00800584 	movi	r2,22
1010479c:	10c27536 	bltu	r2,r3,10105174 <_dtoa_r+0xc4c>
101047a0:	180490fa 	slli	r2,r3,3
101047a4:	00c40474 	movhi	r3,4113
101047a8:	18c3e904 	addi	r3,r3,4004
101047ac:	1885883a 	add	r2,r3,r2
101047b0:	11000017 	ldw	r4,0(r2)
101047b4:	11400117 	ldw	r5,4(r2)
101047b8:	900d883a 	mov	r6,r18
101047bc:	980f883a 	mov	r7,r19
101047c0:	010d1b40 	call	1010d1b4 <__gedf2>
101047c4:	00828d0e 	bge	zero,r2,101051fc <_dtoa_r+0xcd4>
101047c8:	d9000517 	ldw	r4,20(sp)
101047cc:	d8000e15 	stw	zero,56(sp)
101047d0:	213fffc4 	addi	r4,r4,-1
101047d4:	d9000515 	stw	r4,20(sp)
101047d8:	b42dc83a 	sub	r22,r22,r16
101047dc:	b5bfffc4 	addi	r22,r22,-1
101047e0:	b0026f16 	blt	r22,zero,101051a0 <_dtoa_r+0xc78>
101047e4:	d8000815 	stw	zero,32(sp)
101047e8:	d9c00517 	ldw	r7,20(sp)
101047ec:	38026416 	blt	r7,zero,10105180 <_dtoa_r+0xc58>
101047f0:	b1ed883a 	add	r22,r22,r7
101047f4:	d9c00d15 	stw	r7,52(sp)
101047f8:	d8000a15 	stw	zero,40(sp)
101047fc:	d9800317 	ldw	r6,12(sp)
10104800:	00800244 	movi	r2,9
10104804:	11811436 	bltu	r2,r6,10104c58 <_dtoa_r+0x730>
10104808:	00800144 	movi	r2,5
1010480c:	1184e10e 	bge	r2,r6,10105b94 <_dtoa_r+0x166c>
10104810:	31bfff04 	addi	r6,r6,-4
10104814:	d9800315 	stw	r6,12(sp)
10104818:	0023883a 	mov	r17,zero
1010481c:	d9800317 	ldw	r6,12(sp)
10104820:	008000c4 	movi	r2,3
10104824:	30836726 	beq	r6,r2,101055c4 <_dtoa_r+0x109c>
10104828:	1183410e 	bge	r2,r6,10105530 <_dtoa_r+0x1008>
1010482c:	d9c00317 	ldw	r7,12(sp)
10104830:	00800104 	movi	r2,4
10104834:	38827c26 	beq	r7,r2,10105228 <_dtoa_r+0xd00>
10104838:	00800144 	movi	r2,5
1010483c:	3884c41e 	bne	r7,r2,10105b50 <_dtoa_r+0x1628>
10104840:	00800044 	movi	r2,1
10104844:	d8800b15 	stw	r2,44(sp)
10104848:	d8c00517 	ldw	r3,20(sp)
1010484c:	d9002217 	ldw	r4,136(sp)
10104850:	1907883a 	add	r3,r3,r4
10104854:	19800044 	addi	r6,r3,1
10104858:	d8c00c15 	stw	r3,48(sp)
1010485c:	d9800615 	stw	r6,24(sp)
10104860:	0183a40e 	bge	zero,r6,101056f4 <_dtoa_r+0x11cc>
10104864:	d9800617 	ldw	r6,24(sp)
10104868:	3021883a 	mov	r16,r6
1010486c:	e0001115 	stw	zero,68(fp)
10104870:	008005c4 	movi	r2,23
10104874:	1184c92e 	bgeu	r2,r6,10105b9c <_dtoa_r+0x1674>
10104878:	00c00044 	movi	r3,1
1010487c:	00800104 	movi	r2,4
10104880:	1085883a 	add	r2,r2,r2
10104884:	11000504 	addi	r4,r2,20
10104888:	180b883a 	mov	r5,r3
1010488c:	18c00044 	addi	r3,r3,1
10104890:	313ffb2e 	bgeu	r6,r4,10104880 <_dtoa_r+0x358>
10104894:	e1401115 	stw	r5,68(fp)
10104898:	e009883a 	mov	r4,fp
1010489c:	0107bc40 	call	10107bc4 <_Balloc>
101048a0:	d8800715 	stw	r2,28(sp)
101048a4:	e0801015 	stw	r2,64(fp)
101048a8:	00800384 	movi	r2,14
101048ac:	1400f736 	bltu	r2,r16,10104c8c <_dtoa_r+0x764>
101048b0:	8800f626 	beq	r17,zero,10104c8c <_dtoa_r+0x764>
101048b4:	d9c00517 	ldw	r7,20(sp)
101048b8:	01c39a0e 	bge	zero,r7,10105724 <_dtoa_r+0x11fc>
101048bc:	388003cc 	andi	r2,r7,15
101048c0:	100490fa 	slli	r2,r2,3
101048c4:	382bd13a 	srai	r21,r7,4
101048c8:	00c40474 	movhi	r3,4113
101048cc:	18c3e904 	addi	r3,r3,4004
101048d0:	1885883a 	add	r2,r3,r2
101048d4:	a8c0040c 	andi	r3,r21,16
101048d8:	12400017 	ldw	r9,0(r2)
101048dc:	12000117 	ldw	r8,4(r2)
101048e0:	18037926 	beq	r3,zero,101056c8 <_dtoa_r+0x11a0>
101048e4:	00840474 	movhi	r2,4113
101048e8:	1083df04 	addi	r2,r2,3964
101048ec:	11800817 	ldw	r6,32(r2)
101048f0:	11c00917 	ldw	r7,36(r2)
101048f4:	9009883a 	mov	r4,r18
101048f8:	980b883a 	mov	r5,r19
101048fc:	da001715 	stw	r8,92(sp)
10104900:	da401615 	stw	r9,88(sp)
10104904:	010c8440 	call	1010c844 <__divdf3>
10104908:	da001717 	ldw	r8,92(sp)
1010490c:	da401617 	ldw	r9,88(sp)
10104910:	ad4003cc 	andi	r21,r21,15
10104914:	040000c4 	movi	r16,3
10104918:	1023883a 	mov	r17,r2
1010491c:	1829883a 	mov	r20,r3
10104920:	a8001126 	beq	r21,zero,10104968 <_dtoa_r+0x440>
10104924:	05c40474 	movhi	r23,4113
10104928:	bdc3df04 	addi	r23,r23,3964
1010492c:	4805883a 	mov	r2,r9
10104930:	4007883a 	mov	r3,r8
10104934:	a980004c 	andi	r6,r21,1
10104938:	1009883a 	mov	r4,r2
1010493c:	a82bd07a 	srai	r21,r21,1
10104940:	180b883a 	mov	r5,r3
10104944:	30000426 	beq	r6,zero,10104958 <_dtoa_r+0x430>
10104948:	b9800017 	ldw	r6,0(r23)
1010494c:	b9c00117 	ldw	r7,4(r23)
10104950:	84000044 	addi	r16,r16,1
10104954:	010d3840 	call	1010d384 <__muldf3>
10104958:	bdc00204 	addi	r23,r23,8
1010495c:	a83ff51e 	bne	r21,zero,10104934 <_dtoa_r+0x40c>
10104960:	1013883a 	mov	r9,r2
10104964:	1811883a 	mov	r8,r3
10104968:	480d883a 	mov	r6,r9
1010496c:	400f883a 	mov	r7,r8
10104970:	8809883a 	mov	r4,r17
10104974:	a00b883a 	mov	r5,r20
10104978:	010c8440 	call	1010c844 <__divdf3>
1010497c:	d8800f15 	stw	r2,60(sp)
10104980:	d8c01015 	stw	r3,64(sp)
10104984:	d8c00e17 	ldw	r3,56(sp)
10104988:	18000626 	beq	r3,zero,101049a4 <_dtoa_r+0x47c>
1010498c:	d9000f17 	ldw	r4,60(sp)
10104990:	d9401017 	ldw	r5,64(sp)
10104994:	000d883a 	mov	r6,zero
10104998:	01cffc34 	movhi	r7,16368
1010499c:	010d2900 	call	1010d290 <__ledf2>
101049a0:	10040b16 	blt	r2,zero,101059d0 <_dtoa_r+0x14a8>
101049a4:	8009883a 	mov	r4,r16
101049a8:	010e4180 	call	1010e418 <__floatsidf>
101049ac:	d9800f17 	ldw	r6,60(sp)
101049b0:	d9c01017 	ldw	r7,64(sp)
101049b4:	1009883a 	mov	r4,r2
101049b8:	180b883a 	mov	r5,r3
101049bc:	010d3840 	call	1010d384 <__muldf3>
101049c0:	000d883a 	mov	r6,zero
101049c4:	01d00734 	movhi	r7,16412
101049c8:	1009883a 	mov	r4,r2
101049cc:	180b883a 	mov	r5,r3
101049d0:	010bf980 	call	1010bf98 <__adddf3>
101049d4:	1021883a 	mov	r16,r2
101049d8:	d8800617 	ldw	r2,24(sp)
101049dc:	047f3034 	movhi	r17,64704
101049e0:	1c63883a 	add	r17,r3,r17
101049e4:	10031826 	beq	r2,zero,10105648 <_dtoa_r+0x1120>
101049e8:	d8c00517 	ldw	r3,20(sp)
101049ec:	db000617 	ldw	r12,24(sp)
101049f0:	d8c01315 	stw	r3,76(sp)
101049f4:	d9000b17 	ldw	r4,44(sp)
101049f8:	20038f26 	beq	r4,zero,10105838 <_dtoa_r+0x1310>
101049fc:	60bfffc4 	addi	r2,r12,-1
10104a00:	100490fa 	slli	r2,r2,3
10104a04:	00c40474 	movhi	r3,4113
10104a08:	18c3e904 	addi	r3,r3,4004
10104a0c:	1885883a 	add	r2,r3,r2
10104a10:	11800017 	ldw	r6,0(r2)
10104a14:	11c00117 	ldw	r7,4(r2)
10104a18:	d8800717 	ldw	r2,28(sp)
10104a1c:	0009883a 	mov	r4,zero
10104a20:	014ff834 	movhi	r5,16352
10104a24:	db001615 	stw	r12,88(sp)
10104a28:	15c00044 	addi	r23,r2,1
10104a2c:	010c8440 	call	1010c844 <__divdf3>
10104a30:	800d883a 	mov	r6,r16
10104a34:	880f883a 	mov	r7,r17
10104a38:	1009883a 	mov	r4,r2
10104a3c:	180b883a 	mov	r5,r3
10104a40:	010da9c0 	call	1010da9c <__subdf3>
10104a44:	d9401017 	ldw	r5,64(sp)
10104a48:	d9000f17 	ldw	r4,60(sp)
10104a4c:	102b883a 	mov	r21,r2
10104a50:	d8c01215 	stw	r3,72(sp)
10104a54:	010e3980 	call	1010e398 <__fixdfsi>
10104a58:	1009883a 	mov	r4,r2
10104a5c:	1029883a 	mov	r20,r2
10104a60:	010e4180 	call	1010e418 <__floatsidf>
10104a64:	d9000f17 	ldw	r4,60(sp)
10104a68:	d9401017 	ldw	r5,64(sp)
10104a6c:	100d883a 	mov	r6,r2
10104a70:	180f883a 	mov	r7,r3
10104a74:	010da9c0 	call	1010da9c <__subdf3>
10104a78:	1823883a 	mov	r17,r3
10104a7c:	d8c00717 	ldw	r3,28(sp)
10104a80:	d9401217 	ldw	r5,72(sp)
10104a84:	a2000c04 	addi	r8,r20,48
10104a88:	1021883a 	mov	r16,r2
10104a8c:	1a000005 	stb	r8,0(r3)
10104a90:	800d883a 	mov	r6,r16
10104a94:	880f883a 	mov	r7,r17
10104a98:	a809883a 	mov	r4,r21
10104a9c:	4029883a 	mov	r20,r8
10104aa0:	010d1b40 	call	1010d1b4 <__gedf2>
10104aa4:	00841d16 	blt	zero,r2,10105b1c <_dtoa_r+0x15f4>
10104aa8:	800d883a 	mov	r6,r16
10104aac:	880f883a 	mov	r7,r17
10104ab0:	0009883a 	mov	r4,zero
10104ab4:	014ffc34 	movhi	r5,16368
10104ab8:	010da9c0 	call	1010da9c <__subdf3>
10104abc:	d9401217 	ldw	r5,72(sp)
10104ac0:	100d883a 	mov	r6,r2
10104ac4:	180f883a 	mov	r7,r3
10104ac8:	a809883a 	mov	r4,r21
10104acc:	010d1b40 	call	1010d1b4 <__gedf2>
10104ad0:	db001617 	ldw	r12,88(sp)
10104ad4:	00840e16 	blt	zero,r2,10105b10 <_dtoa_r+0x15e8>
10104ad8:	00800044 	movi	r2,1
10104adc:	13006b0e 	bge	r2,r12,10104c8c <_dtoa_r+0x764>
10104ae0:	d9000717 	ldw	r4,28(sp)
10104ae4:	dd800f15 	stw	r22,60(sp)
10104ae8:	dcc01015 	stw	r19,64(sp)
10104aec:	2319883a 	add	r12,r4,r12
10104af0:	dcc01217 	ldw	r19,72(sp)
10104af4:	602d883a 	mov	r22,r12
10104af8:	dc801215 	stw	r18,72(sp)
10104afc:	b825883a 	mov	r18,r23
10104b00:	00000906 	br	10104b28 <_dtoa_r+0x600>
10104b04:	010da9c0 	call	1010da9c <__subdf3>
10104b08:	a80d883a 	mov	r6,r21
10104b0c:	980f883a 	mov	r7,r19
10104b10:	1009883a 	mov	r4,r2
10104b14:	180b883a 	mov	r5,r3
10104b18:	010d2900 	call	1010d290 <__ledf2>
10104b1c:	1003e816 	blt	r2,zero,10105ac0 <_dtoa_r+0x1598>
10104b20:	b825883a 	mov	r18,r23
10104b24:	bd83e926 	beq	r23,r22,10105acc <_dtoa_r+0x15a4>
10104b28:	a809883a 	mov	r4,r21
10104b2c:	980b883a 	mov	r5,r19
10104b30:	000d883a 	mov	r6,zero
10104b34:	01d00934 	movhi	r7,16420
10104b38:	010d3840 	call	1010d384 <__muldf3>
10104b3c:	000d883a 	mov	r6,zero
10104b40:	01d00934 	movhi	r7,16420
10104b44:	8009883a 	mov	r4,r16
10104b48:	880b883a 	mov	r5,r17
10104b4c:	102b883a 	mov	r21,r2
10104b50:	1827883a 	mov	r19,r3
10104b54:	010d3840 	call	1010d384 <__muldf3>
10104b58:	180b883a 	mov	r5,r3
10104b5c:	1009883a 	mov	r4,r2
10104b60:	1821883a 	mov	r16,r3
10104b64:	1023883a 	mov	r17,r2
10104b68:	010e3980 	call	1010e398 <__fixdfsi>
10104b6c:	1009883a 	mov	r4,r2
10104b70:	1029883a 	mov	r20,r2
10104b74:	010e4180 	call	1010e418 <__floatsidf>
10104b78:	8809883a 	mov	r4,r17
10104b7c:	800b883a 	mov	r5,r16
10104b80:	100d883a 	mov	r6,r2
10104b84:	180f883a 	mov	r7,r3
10104b88:	010da9c0 	call	1010da9c <__subdf3>
10104b8c:	a5000c04 	addi	r20,r20,48
10104b90:	a80d883a 	mov	r6,r21
10104b94:	980f883a 	mov	r7,r19
10104b98:	1009883a 	mov	r4,r2
10104b9c:	180b883a 	mov	r5,r3
10104ba0:	95000005 	stb	r20,0(r18)
10104ba4:	1021883a 	mov	r16,r2
10104ba8:	1823883a 	mov	r17,r3
10104bac:	010d2900 	call	1010d290 <__ledf2>
10104bb0:	bdc00044 	addi	r23,r23,1
10104bb4:	800d883a 	mov	r6,r16
10104bb8:	880f883a 	mov	r7,r17
10104bbc:	0009883a 	mov	r4,zero
10104bc0:	014ffc34 	movhi	r5,16368
10104bc4:	103fcf0e 	bge	r2,zero,10104b04 <_dtoa_r+0x5dc>
10104bc8:	d8c01317 	ldw	r3,76(sp)
10104bcc:	d8c00515 	stw	r3,20(sp)
10104bd0:	d9400917 	ldw	r5,36(sp)
10104bd4:	e009883a 	mov	r4,fp
10104bd8:	0107c6c0 	call	10107c6c <_Bfree>
10104bdc:	d9000517 	ldw	r4,20(sp)
10104be0:	d9802317 	ldw	r6,140(sp)
10104be4:	d9c02517 	ldw	r7,148(sp)
10104be8:	b8000005 	stb	zero,0(r23)
10104bec:	20800044 	addi	r2,r4,1
10104bf0:	30800015 	stw	r2,0(r6)
10104bf4:	3802aa26 	beq	r7,zero,101056a0 <_dtoa_r+0x1178>
10104bf8:	3dc00015 	stw	r23,0(r7)
10104bfc:	d8800717 	ldw	r2,28(sp)
10104c00:	003e7906 	br	101045e8 <_dtoa_r+0xc0>
10104c04:	00800434 	movhi	r2,16
10104c08:	10bfffc4 	addi	r2,r2,-1
10104c0c:	88a2703a 	and	r17,r17,r2
10104c10:	883e851e 	bne	r17,zero,10104628 <_dtoa_r+0x100>
10104c14:	00840474 	movhi	r2,4113
10104c18:	1083ca04 	addi	r2,r2,3880
10104c1c:	003e8406 	br	10104630 <_dtoa_r+0x108>
10104c20:	10c00204 	addi	r3,r2,8
10104c24:	003e8706 	br	10104644 <_dtoa_r+0x11c>
10104c28:	01400434 	movhi	r5,16
10104c2c:	297fffc4 	addi	r5,r5,-1
10104c30:	994a703a 	and	r5,r19,r5
10104c34:	9009883a 	mov	r4,r18
10104c38:	843f0044 	addi	r16,r16,-1023
10104c3c:	294ffc34 	orhi	r5,r5,16368
10104c40:	dd800217 	ldw	r22,8(sp)
10104c44:	d8001115 	stw	zero,68(sp)
10104c48:	003ea506 	br	101046e0 <_dtoa_r+0x1b8>
10104c4c:	00840474 	movhi	r2,4113
10104c50:	1083c104 	addi	r2,r2,3844
10104c54:	003e6406 	br	101045e8 <_dtoa_r+0xc0>
10104c58:	e0001115 	stw	zero,68(fp)
10104c5c:	000b883a 	mov	r5,zero
10104c60:	e009883a 	mov	r4,fp
10104c64:	0107bc40 	call	10107bc4 <_Balloc>
10104c68:	01bfffc4 	movi	r6,-1
10104c6c:	01c00044 	movi	r7,1
10104c70:	d8800715 	stw	r2,28(sp)
10104c74:	d9800c15 	stw	r6,48(sp)
10104c78:	e0801015 	stw	r2,64(fp)
10104c7c:	d8000315 	stw	zero,12(sp)
10104c80:	d9c00b15 	stw	r7,44(sp)
10104c84:	d9800615 	stw	r6,24(sp)
10104c88:	d8002215 	stw	zero,136(sp)
10104c8c:	d8800117 	ldw	r2,4(sp)
10104c90:	10008916 	blt	r2,zero,10104eb8 <_dtoa_r+0x990>
10104c94:	d9000517 	ldw	r4,20(sp)
10104c98:	00c00384 	movi	r3,14
10104c9c:	19008616 	blt	r3,r4,10104eb8 <_dtoa_r+0x990>
10104ca0:	200490fa 	slli	r2,r4,3
10104ca4:	00c40474 	movhi	r3,4113
10104ca8:	d9802217 	ldw	r6,136(sp)
10104cac:	18c3e904 	addi	r3,r3,4004
10104cb0:	1885883a 	add	r2,r3,r2
10104cb4:	14000017 	ldw	r16,0(r2)
10104cb8:	14400117 	ldw	r17,4(r2)
10104cbc:	30016316 	blt	r6,zero,1010524c <_dtoa_r+0xd24>
10104cc0:	800d883a 	mov	r6,r16
10104cc4:	880f883a 	mov	r7,r17
10104cc8:	9009883a 	mov	r4,r18
10104ccc:	980b883a 	mov	r5,r19
10104cd0:	010c8440 	call	1010c844 <__divdf3>
10104cd4:	180b883a 	mov	r5,r3
10104cd8:	1009883a 	mov	r4,r2
10104cdc:	010e3980 	call	1010e398 <__fixdfsi>
10104ce0:	1009883a 	mov	r4,r2
10104ce4:	102b883a 	mov	r21,r2
10104ce8:	010e4180 	call	1010e418 <__floatsidf>
10104cec:	800d883a 	mov	r6,r16
10104cf0:	880f883a 	mov	r7,r17
10104cf4:	1009883a 	mov	r4,r2
10104cf8:	180b883a 	mov	r5,r3
10104cfc:	010d3840 	call	1010d384 <__muldf3>
10104d00:	100d883a 	mov	r6,r2
10104d04:	180f883a 	mov	r7,r3
10104d08:	9009883a 	mov	r4,r18
10104d0c:	980b883a 	mov	r5,r19
10104d10:	010da9c0 	call	1010da9c <__subdf3>
10104d14:	d9c00717 	ldw	r7,28(sp)
10104d18:	1009883a 	mov	r4,r2
10104d1c:	a8800c04 	addi	r2,r21,48
10104d20:	38800005 	stb	r2,0(r7)
10104d24:	3dc00044 	addi	r23,r7,1
10104d28:	d9c00617 	ldw	r7,24(sp)
10104d2c:	01800044 	movi	r6,1
10104d30:	180b883a 	mov	r5,r3
10104d34:	2005883a 	mov	r2,r4
10104d38:	39803826 	beq	r7,r6,10104e1c <_dtoa_r+0x8f4>
10104d3c:	000d883a 	mov	r6,zero
10104d40:	01d00934 	movhi	r7,16420
10104d44:	010d3840 	call	1010d384 <__muldf3>
10104d48:	000d883a 	mov	r6,zero
10104d4c:	000f883a 	mov	r7,zero
10104d50:	1009883a 	mov	r4,r2
10104d54:	180b883a 	mov	r5,r3
10104d58:	1025883a 	mov	r18,r2
10104d5c:	1827883a 	mov	r19,r3
10104d60:	010d12c0 	call	1010d12c <__eqdf2>
10104d64:	103f9a26 	beq	r2,zero,10104bd0 <_dtoa_r+0x6a8>
10104d68:	d9c00617 	ldw	r7,24(sp)
10104d6c:	d8c00717 	ldw	r3,28(sp)
10104d70:	b829883a 	mov	r20,r23
10104d74:	38bfffc4 	addi	r2,r7,-1
10104d78:	18ad883a 	add	r22,r3,r2
10104d7c:	00000a06 	br	10104da8 <_dtoa_r+0x880>
10104d80:	010d3840 	call	1010d384 <__muldf3>
10104d84:	000d883a 	mov	r6,zero
10104d88:	000f883a 	mov	r7,zero
10104d8c:	1009883a 	mov	r4,r2
10104d90:	180b883a 	mov	r5,r3
10104d94:	1025883a 	mov	r18,r2
10104d98:	1827883a 	mov	r19,r3
10104d9c:	b829883a 	mov	r20,r23
10104da0:	010d12c0 	call	1010d12c <__eqdf2>
10104da4:	103f8a26 	beq	r2,zero,10104bd0 <_dtoa_r+0x6a8>
10104da8:	800d883a 	mov	r6,r16
10104dac:	880f883a 	mov	r7,r17
10104db0:	9009883a 	mov	r4,r18
10104db4:	980b883a 	mov	r5,r19
10104db8:	010c8440 	call	1010c844 <__divdf3>
10104dbc:	180b883a 	mov	r5,r3
10104dc0:	1009883a 	mov	r4,r2
10104dc4:	010e3980 	call	1010e398 <__fixdfsi>
10104dc8:	1009883a 	mov	r4,r2
10104dcc:	102b883a 	mov	r21,r2
10104dd0:	010e4180 	call	1010e418 <__floatsidf>
10104dd4:	800d883a 	mov	r6,r16
10104dd8:	880f883a 	mov	r7,r17
10104ddc:	1009883a 	mov	r4,r2
10104de0:	180b883a 	mov	r5,r3
10104de4:	010d3840 	call	1010d384 <__muldf3>
10104de8:	100d883a 	mov	r6,r2
10104dec:	180f883a 	mov	r7,r3
10104df0:	9009883a 	mov	r4,r18
10104df4:	980b883a 	mov	r5,r19
10104df8:	010da9c0 	call	1010da9c <__subdf3>
10104dfc:	aa000c04 	addi	r8,r21,48
10104e00:	a2000005 	stb	r8,0(r20)
10104e04:	000d883a 	mov	r6,zero
10104e08:	01d00934 	movhi	r7,16420
10104e0c:	1009883a 	mov	r4,r2
10104e10:	180b883a 	mov	r5,r3
10104e14:	a5c00044 	addi	r23,r20,1
10104e18:	b53fd91e 	bne	r22,r20,10104d80 <_dtoa_r+0x858>
10104e1c:	100d883a 	mov	r6,r2
10104e20:	180f883a 	mov	r7,r3
10104e24:	1009883a 	mov	r4,r2
10104e28:	180b883a 	mov	r5,r3
10104e2c:	010bf980 	call	1010bf98 <__adddf3>
10104e30:	100d883a 	mov	r6,r2
10104e34:	180f883a 	mov	r7,r3
10104e38:	8009883a 	mov	r4,r16
10104e3c:	880b883a 	mov	r5,r17
10104e40:	1027883a 	mov	r19,r2
10104e44:	1825883a 	mov	r18,r3
10104e48:	010d2900 	call	1010d290 <__ledf2>
10104e4c:	10000816 	blt	r2,zero,10104e70 <_dtoa_r+0x948>
10104e50:	980d883a 	mov	r6,r19
10104e54:	900f883a 	mov	r7,r18
10104e58:	8009883a 	mov	r4,r16
10104e5c:	880b883a 	mov	r5,r17
10104e60:	010d12c0 	call	1010d12c <__eqdf2>
10104e64:	103f5a1e 	bne	r2,zero,10104bd0 <_dtoa_r+0x6a8>
10104e68:	ad40004c 	andi	r21,r21,1
10104e6c:	a83f5826 	beq	r21,zero,10104bd0 <_dtoa_r+0x6a8>
10104e70:	bd3fffc3 	ldbu	r20,-1(r23)
10104e74:	b8bfffc4 	addi	r2,r23,-1
10104e78:	1007883a 	mov	r3,r2
10104e7c:	01400e44 	movi	r5,57
10104e80:	d9800717 	ldw	r6,28(sp)
10104e84:	00000506 	br	10104e9c <_dtoa_r+0x974>
10104e88:	18ffffc4 	addi	r3,r3,-1
10104e8c:	11824726 	beq	r2,r6,101057ac <_dtoa_r+0x1284>
10104e90:	1d000003 	ldbu	r20,0(r3)
10104e94:	102f883a 	mov	r23,r2
10104e98:	10bfffc4 	addi	r2,r2,-1
10104e9c:	a1003fcc 	andi	r4,r20,255
10104ea0:	2100201c 	xori	r4,r4,128
10104ea4:	213fe004 	addi	r4,r4,-128
10104ea8:	217ff726 	beq	r4,r5,10104e88 <_dtoa_r+0x960>
10104eac:	a2000044 	addi	r8,r20,1
10104eb0:	12000005 	stb	r8,0(r2)
10104eb4:	003f4606 	br	10104bd0 <_dtoa_r+0x6a8>
10104eb8:	d9000b17 	ldw	r4,44(sp)
10104ebc:	2000c826 	beq	r4,zero,101051e0 <_dtoa_r+0xcb8>
10104ec0:	d9800317 	ldw	r6,12(sp)
10104ec4:	00c00044 	movi	r3,1
10104ec8:	1980f90e 	bge	r3,r6,101052b0 <_dtoa_r+0xd88>
10104ecc:	d8800617 	ldw	r2,24(sp)
10104ed0:	d8c00a17 	ldw	r3,40(sp)
10104ed4:	157fffc4 	addi	r21,r2,-1
10104ed8:	1d41f316 	blt	r3,r21,101056a8 <_dtoa_r+0x1180>
10104edc:	1d6bc83a 	sub	r21,r3,r21
10104ee0:	d9c00617 	ldw	r7,24(sp)
10104ee4:	3802aa16 	blt	r7,zero,10105990 <_dtoa_r+0x1468>
10104ee8:	dd000817 	ldw	r20,32(sp)
10104eec:	d8800617 	ldw	r2,24(sp)
10104ef0:	d8c00817 	ldw	r3,32(sp)
10104ef4:	01400044 	movi	r5,1
10104ef8:	e009883a 	mov	r4,fp
10104efc:	1887883a 	add	r3,r3,r2
10104f00:	d8c00815 	stw	r3,32(sp)
10104f04:	b0ad883a 	add	r22,r22,r2
10104f08:	0107fd00 	call	10107fd0 <__i2b>
10104f0c:	1023883a 	mov	r17,r2
10104f10:	a0000826 	beq	r20,zero,10104f34 <_dtoa_r+0xa0c>
10104f14:	0580070e 	bge	zero,r22,10104f34 <_dtoa_r+0xa0c>
10104f18:	a005883a 	mov	r2,r20
10104f1c:	b500b916 	blt	r22,r20,10105204 <_dtoa_r+0xcdc>
10104f20:	d9000817 	ldw	r4,32(sp)
10104f24:	a0a9c83a 	sub	r20,r20,r2
10104f28:	b0adc83a 	sub	r22,r22,r2
10104f2c:	2089c83a 	sub	r4,r4,r2
10104f30:	d9000815 	stw	r4,32(sp)
10104f34:	d9800a17 	ldw	r6,40(sp)
10104f38:	0181810e 	bge	zero,r6,10105540 <_dtoa_r+0x1018>
10104f3c:	d9c00b17 	ldw	r7,44(sp)
10104f40:	3800b326 	beq	r7,zero,10105210 <_dtoa_r+0xce8>
10104f44:	a800b226 	beq	r21,zero,10105210 <_dtoa_r+0xce8>
10104f48:	880b883a 	mov	r5,r17
10104f4c:	a80d883a 	mov	r6,r21
10104f50:	e009883a 	mov	r4,fp
10104f54:	01082040 	call	10108204 <__pow5mult>
10104f58:	d9800917 	ldw	r6,36(sp)
10104f5c:	100b883a 	mov	r5,r2
10104f60:	e009883a 	mov	r4,fp
10104f64:	1023883a 	mov	r17,r2
10104f68:	010800c0 	call	1010800c <__multiply>
10104f6c:	1021883a 	mov	r16,r2
10104f70:	d8800a17 	ldw	r2,40(sp)
10104f74:	d9400917 	ldw	r5,36(sp)
10104f78:	e009883a 	mov	r4,fp
10104f7c:	1545c83a 	sub	r2,r2,r21
10104f80:	d8800a15 	stw	r2,40(sp)
10104f84:	0107c6c0 	call	10107c6c <_Bfree>
10104f88:	d8c00a17 	ldw	r3,40(sp)
10104f8c:	18009f1e 	bne	r3,zero,1010520c <_dtoa_r+0xce4>
10104f90:	05c00044 	movi	r23,1
10104f94:	e009883a 	mov	r4,fp
10104f98:	b80b883a 	mov	r5,r23
10104f9c:	0107fd00 	call	10107fd0 <__i2b>
10104fa0:	d9000d17 	ldw	r4,52(sp)
10104fa4:	102b883a 	mov	r21,r2
10104fa8:	2000ce26 	beq	r4,zero,101052e4 <_dtoa_r+0xdbc>
10104fac:	200d883a 	mov	r6,r4
10104fb0:	100b883a 	mov	r5,r2
10104fb4:	e009883a 	mov	r4,fp
10104fb8:	01082040 	call	10108204 <__pow5mult>
10104fbc:	d9800317 	ldw	r6,12(sp)
10104fc0:	102b883a 	mov	r21,r2
10104fc4:	b981810e 	bge	r23,r6,101055cc <_dtoa_r+0x10a4>
10104fc8:	0027883a 	mov	r19,zero
10104fcc:	a8800417 	ldw	r2,16(r21)
10104fd0:	05c00804 	movi	r23,32
10104fd4:	10800104 	addi	r2,r2,4
10104fd8:	1085883a 	add	r2,r2,r2
10104fdc:	1085883a 	add	r2,r2,r2
10104fe0:	a885883a 	add	r2,r21,r2
10104fe4:	11000017 	ldw	r4,0(r2)
10104fe8:	0107eb80 	call	10107eb8 <__hi0bits>
10104fec:	b885c83a 	sub	r2,r23,r2
10104ff0:	1585883a 	add	r2,r2,r22
10104ff4:	108007cc 	andi	r2,r2,31
10104ff8:	1000b326 	beq	r2,zero,101052c8 <_dtoa_r+0xda0>
10104ffc:	00c00804 	movi	r3,32
10105000:	1887c83a 	sub	r3,r3,r2
10105004:	01000104 	movi	r4,4
10105008:	20c2cd0e 	bge	r4,r3,10105b40 <_dtoa_r+0x1618>
1010500c:	00c00704 	movi	r3,28
10105010:	1885c83a 	sub	r2,r3,r2
10105014:	d8c00817 	ldw	r3,32(sp)
10105018:	a0a9883a 	add	r20,r20,r2
1010501c:	b0ad883a 	add	r22,r22,r2
10105020:	1887883a 	add	r3,r3,r2
10105024:	d8c00815 	stw	r3,32(sp)
10105028:	d9800817 	ldw	r6,32(sp)
1010502c:	0180040e 	bge	zero,r6,10105040 <_dtoa_r+0xb18>
10105030:	800b883a 	mov	r5,r16
10105034:	e009883a 	mov	r4,fp
10105038:	01083440 	call	10108344 <__lshift>
1010503c:	1021883a 	mov	r16,r2
10105040:	0580050e 	bge	zero,r22,10105058 <_dtoa_r+0xb30>
10105044:	a80b883a 	mov	r5,r21
10105048:	b00d883a 	mov	r6,r22
1010504c:	e009883a 	mov	r4,fp
10105050:	01083440 	call	10108344 <__lshift>
10105054:	102b883a 	mov	r21,r2
10105058:	d9c00e17 	ldw	r7,56(sp)
1010505c:	3801211e 	bne	r7,zero,101054e4 <_dtoa_r+0xfbc>
10105060:	d9800617 	ldw	r6,24(sp)
10105064:	0181380e 	bge	zero,r6,10105548 <_dtoa_r+0x1020>
10105068:	d8c00b17 	ldw	r3,44(sp)
1010506c:	1800ab1e 	bne	r3,zero,1010531c <_dtoa_r+0xdf4>
10105070:	dc800717 	ldw	r18,28(sp)
10105074:	dcc00617 	ldw	r19,24(sp)
10105078:	9029883a 	mov	r20,r18
1010507c:	00000206 	br	10105088 <_dtoa_r+0xb60>
10105080:	0107c940 	call	10107c94 <__multadd>
10105084:	1021883a 	mov	r16,r2
10105088:	a80b883a 	mov	r5,r21
1010508c:	8009883a 	mov	r4,r16
10105090:	01043280 	call	10104328 <quorem>
10105094:	10800c04 	addi	r2,r2,48
10105098:	90800005 	stb	r2,0(r18)
1010509c:	94800044 	addi	r18,r18,1
101050a0:	9507c83a 	sub	r3,r18,r20
101050a4:	000f883a 	mov	r7,zero
101050a8:	01800284 	movi	r6,10
101050ac:	800b883a 	mov	r5,r16
101050b0:	e009883a 	mov	r4,fp
101050b4:	1cfff216 	blt	r3,r19,10105080 <_dtoa_r+0xb58>
101050b8:	1011883a 	mov	r8,r2
101050bc:	d8800617 	ldw	r2,24(sp)
101050c0:	0082370e 	bge	zero,r2,101059a0 <_dtoa_r+0x1478>
101050c4:	d9000717 	ldw	r4,28(sp)
101050c8:	0025883a 	mov	r18,zero
101050cc:	20af883a 	add	r23,r4,r2
101050d0:	01800044 	movi	r6,1
101050d4:	800b883a 	mov	r5,r16
101050d8:	e009883a 	mov	r4,fp
101050dc:	da001715 	stw	r8,92(sp)
101050e0:	01083440 	call	10108344 <__lshift>
101050e4:	a80b883a 	mov	r5,r21
101050e8:	1009883a 	mov	r4,r2
101050ec:	d8800915 	stw	r2,36(sp)
101050f0:	010848c0 	call	1010848c <__mcmp>
101050f4:	da001717 	ldw	r8,92(sp)
101050f8:	0081800e 	bge	zero,r2,101056fc <_dtoa_r+0x11d4>
101050fc:	b93fffc3 	ldbu	r4,-1(r23)
10105100:	b8bfffc4 	addi	r2,r23,-1
10105104:	1007883a 	mov	r3,r2
10105108:	01800e44 	movi	r6,57
1010510c:	d9c00717 	ldw	r7,28(sp)
10105110:	00000506 	br	10105128 <_dtoa_r+0xc00>
10105114:	18ffffc4 	addi	r3,r3,-1
10105118:	11c12326 	beq	r2,r7,101055a8 <_dtoa_r+0x1080>
1010511c:	19000003 	ldbu	r4,0(r3)
10105120:	102f883a 	mov	r23,r2
10105124:	10bfffc4 	addi	r2,r2,-1
10105128:	21403fcc 	andi	r5,r4,255
1010512c:	2940201c 	xori	r5,r5,128
10105130:	297fe004 	addi	r5,r5,-128
10105134:	29bff726 	beq	r5,r6,10105114 <_dtoa_r+0xbec>
10105138:	21000044 	addi	r4,r4,1
1010513c:	11000005 	stb	r4,0(r2)
10105140:	a80b883a 	mov	r5,r21
10105144:	e009883a 	mov	r4,fp
10105148:	0107c6c0 	call	10107c6c <_Bfree>
1010514c:	883ea026 	beq	r17,zero,10104bd0 <_dtoa_r+0x6a8>
10105150:	90000426 	beq	r18,zero,10105164 <_dtoa_r+0xc3c>
10105154:	94400326 	beq	r18,r17,10105164 <_dtoa_r+0xc3c>
10105158:	900b883a 	mov	r5,r18
1010515c:	e009883a 	mov	r4,fp
10105160:	0107c6c0 	call	10107c6c <_Bfree>
10105164:	880b883a 	mov	r5,r17
10105168:	e009883a 	mov	r4,fp
1010516c:	0107c6c0 	call	10107c6c <_Bfree>
10105170:	003e9706 	br	10104bd0 <_dtoa_r+0x6a8>
10105174:	01800044 	movi	r6,1
10105178:	d9800e15 	stw	r6,56(sp)
1010517c:	003d9606 	br	101047d8 <_dtoa_r+0x2b0>
10105180:	d8800817 	ldw	r2,32(sp)
10105184:	d8c00517 	ldw	r3,20(sp)
10105188:	d8000d15 	stw	zero,52(sp)
1010518c:	10c5c83a 	sub	r2,r2,r3
10105190:	00c9c83a 	sub	r4,zero,r3
10105194:	d8800815 	stw	r2,32(sp)
10105198:	d9000a15 	stw	r4,40(sp)
1010519c:	003d9706 	br	101047fc <_dtoa_r+0x2d4>
101051a0:	05adc83a 	sub	r22,zero,r22
101051a4:	dd800815 	stw	r22,32(sp)
101051a8:	002d883a 	mov	r22,zero
101051ac:	003d8e06 	br	101047e8 <_dtoa_r+0x2c0>
101051b0:	d9000517 	ldw	r4,20(sp)
101051b4:	010e4180 	call	1010e418 <__floatsidf>
101051b8:	100d883a 	mov	r6,r2
101051bc:	180f883a 	mov	r7,r3
101051c0:	a009883a 	mov	r4,r20
101051c4:	880b883a 	mov	r5,r17
101051c8:	010d12c0 	call	1010d12c <__eqdf2>
101051cc:	103d7126 	beq	r2,zero,10104794 <_dtoa_r+0x26c>
101051d0:	d9c00517 	ldw	r7,20(sp)
101051d4:	39ffffc4 	addi	r7,r7,-1
101051d8:	d9c00515 	stw	r7,20(sp)
101051dc:	003d6d06 	br	10104794 <_dtoa_r+0x26c>
101051e0:	dd400a17 	ldw	r21,40(sp)
101051e4:	dd000817 	ldw	r20,32(sp)
101051e8:	0023883a 	mov	r17,zero
101051ec:	003f4806 	br	10104f10 <_dtoa_r+0x9e8>
101051f0:	10e3c83a 	sub	r17,r2,r3
101051f4:	9448983a 	sll	r4,r18,r17
101051f8:	003d3206 	br	101046c4 <_dtoa_r+0x19c>
101051fc:	d8000e15 	stw	zero,56(sp)
10105200:	003d7506 	br	101047d8 <_dtoa_r+0x2b0>
10105204:	b005883a 	mov	r2,r22
10105208:	003f4506 	br	10104f20 <_dtoa_r+0x9f8>
1010520c:	dc000915 	stw	r16,36(sp)
10105210:	d9800a17 	ldw	r6,40(sp)
10105214:	d9400917 	ldw	r5,36(sp)
10105218:	e009883a 	mov	r4,fp
1010521c:	01082040 	call	10108204 <__pow5mult>
10105220:	1021883a 	mov	r16,r2
10105224:	003f5a06 	br	10104f90 <_dtoa_r+0xa68>
10105228:	01c00044 	movi	r7,1
1010522c:	d9c00b15 	stw	r7,44(sp)
10105230:	d8802217 	ldw	r2,136(sp)
10105234:	0081280e 	bge	zero,r2,101056d8 <_dtoa_r+0x11b0>
10105238:	100d883a 	mov	r6,r2
1010523c:	1021883a 	mov	r16,r2
10105240:	d8800c15 	stw	r2,48(sp)
10105244:	d8800615 	stw	r2,24(sp)
10105248:	003d8806 	br	1010486c <_dtoa_r+0x344>
1010524c:	d8800617 	ldw	r2,24(sp)
10105250:	00be9b16 	blt	zero,r2,10104cc0 <_dtoa_r+0x798>
10105254:	10010f1e 	bne	r2,zero,10105694 <_dtoa_r+0x116c>
10105258:	880b883a 	mov	r5,r17
1010525c:	000d883a 	mov	r6,zero
10105260:	01d00534 	movhi	r7,16404
10105264:	8009883a 	mov	r4,r16
10105268:	010d3840 	call	1010d384 <__muldf3>
1010526c:	900d883a 	mov	r6,r18
10105270:	980f883a 	mov	r7,r19
10105274:	1009883a 	mov	r4,r2
10105278:	180b883a 	mov	r5,r3
1010527c:	010d1b40 	call	1010d1b4 <__gedf2>
10105280:	002b883a 	mov	r21,zero
10105284:	0023883a 	mov	r17,zero
10105288:	1000bf16 	blt	r2,zero,10105588 <_dtoa_r+0x1060>
1010528c:	d9802217 	ldw	r6,136(sp)
10105290:	ddc00717 	ldw	r23,28(sp)
10105294:	018c303a 	nor	r6,zero,r6
10105298:	d9800515 	stw	r6,20(sp)
1010529c:	a80b883a 	mov	r5,r21
101052a0:	e009883a 	mov	r4,fp
101052a4:	0107c6c0 	call	10107c6c <_Bfree>
101052a8:	883e4926 	beq	r17,zero,10104bd0 <_dtoa_r+0x6a8>
101052ac:	003fad06 	br	10105164 <_dtoa_r+0xc3c>
101052b0:	d9c01117 	ldw	r7,68(sp)
101052b4:	3801bc26 	beq	r7,zero,101059a8 <_dtoa_r+0x1480>
101052b8:	10810cc4 	addi	r2,r2,1075
101052bc:	dd400a17 	ldw	r21,40(sp)
101052c0:	dd000817 	ldw	r20,32(sp)
101052c4:	003f0a06 	br	10104ef0 <_dtoa_r+0x9c8>
101052c8:	00800704 	movi	r2,28
101052cc:	d9000817 	ldw	r4,32(sp)
101052d0:	a0a9883a 	add	r20,r20,r2
101052d4:	b0ad883a 	add	r22,r22,r2
101052d8:	2089883a 	add	r4,r4,r2
101052dc:	d9000815 	stw	r4,32(sp)
101052e0:	003f5106 	br	10105028 <_dtoa_r+0xb00>
101052e4:	d8c00317 	ldw	r3,12(sp)
101052e8:	b8c1fc0e 	bge	r23,r3,10105adc <_dtoa_r+0x15b4>
101052ec:	0027883a 	mov	r19,zero
101052f0:	b805883a 	mov	r2,r23
101052f4:	003f3e06 	br	10104ff0 <_dtoa_r+0xac8>
101052f8:	880b883a 	mov	r5,r17
101052fc:	e009883a 	mov	r4,fp
10105300:	000f883a 	mov	r7,zero
10105304:	01800284 	movi	r6,10
10105308:	0107c940 	call	10107c94 <__multadd>
1010530c:	d9000c17 	ldw	r4,48(sp)
10105310:	1023883a 	mov	r17,r2
10105314:	0102040e 	bge	zero,r4,10105b28 <_dtoa_r+0x1600>
10105318:	d9000615 	stw	r4,24(sp)
1010531c:	0500050e 	bge	zero,r20,10105334 <_dtoa_r+0xe0c>
10105320:	880b883a 	mov	r5,r17
10105324:	a00d883a 	mov	r6,r20
10105328:	e009883a 	mov	r4,fp
1010532c:	01083440 	call	10108344 <__lshift>
10105330:	1023883a 	mov	r17,r2
10105334:	9801241e 	bne	r19,zero,101057c8 <_dtoa_r+0x12a0>
10105338:	8829883a 	mov	r20,r17
1010533c:	d9000617 	ldw	r4,24(sp)
10105340:	dcc00717 	ldw	r19,28(sp)
10105344:	9480004c 	andi	r18,r18,1
10105348:	20bfffc4 	addi	r2,r4,-1
1010534c:	9885883a 	add	r2,r19,r2
10105350:	d8800415 	stw	r2,16(sp)
10105354:	dc800615 	stw	r18,24(sp)
10105358:	a80b883a 	mov	r5,r21
1010535c:	8009883a 	mov	r4,r16
10105360:	01043280 	call	10104328 <quorem>
10105364:	880b883a 	mov	r5,r17
10105368:	8009883a 	mov	r4,r16
1010536c:	102f883a 	mov	r23,r2
10105370:	010848c0 	call	1010848c <__mcmp>
10105374:	a80b883a 	mov	r5,r21
10105378:	a00d883a 	mov	r6,r20
1010537c:	e009883a 	mov	r4,fp
10105380:	102d883a 	mov	r22,r2
10105384:	01084ec0 	call	101084ec <__mdiff>
10105388:	1007883a 	mov	r3,r2
1010538c:	10800317 	ldw	r2,12(r2)
10105390:	bc800c04 	addi	r18,r23,48
10105394:	180b883a 	mov	r5,r3
10105398:	10004e1e 	bne	r2,zero,101054d4 <_dtoa_r+0xfac>
1010539c:	8009883a 	mov	r4,r16
101053a0:	d8c01615 	stw	r3,88(sp)
101053a4:	010848c0 	call	1010848c <__mcmp>
101053a8:	d8c01617 	ldw	r3,88(sp)
101053ac:	e009883a 	mov	r4,fp
101053b0:	d8801615 	stw	r2,88(sp)
101053b4:	180b883a 	mov	r5,r3
101053b8:	0107c6c0 	call	10107c6c <_Bfree>
101053bc:	d8801617 	ldw	r2,88(sp)
101053c0:	1000041e 	bne	r2,zero,101053d4 <_dtoa_r+0xeac>
101053c4:	d9800317 	ldw	r6,12(sp)
101053c8:	3000021e 	bne	r6,zero,101053d4 <_dtoa_r+0xeac>
101053cc:	d8c00617 	ldw	r3,24(sp)
101053d0:	18003726 	beq	r3,zero,101054b0 <_dtoa_r+0xf88>
101053d4:	b0002016 	blt	r22,zero,10105458 <_dtoa_r+0xf30>
101053d8:	b000041e 	bne	r22,zero,101053ec <_dtoa_r+0xec4>
101053dc:	d9000317 	ldw	r4,12(sp)
101053e0:	2000021e 	bne	r4,zero,101053ec <_dtoa_r+0xec4>
101053e4:	d8c00617 	ldw	r3,24(sp)
101053e8:	18001b26 	beq	r3,zero,10105458 <_dtoa_r+0xf30>
101053ec:	00810716 	blt	zero,r2,1010580c <_dtoa_r+0x12e4>
101053f0:	d8c00417 	ldw	r3,16(sp)
101053f4:	9d800044 	addi	r22,r19,1
101053f8:	9c800005 	stb	r18,0(r19)
101053fc:	b02f883a 	mov	r23,r22
10105400:	98c10626 	beq	r19,r3,1010581c <_dtoa_r+0x12f4>
10105404:	800b883a 	mov	r5,r16
10105408:	000f883a 	mov	r7,zero
1010540c:	01800284 	movi	r6,10
10105410:	e009883a 	mov	r4,fp
10105414:	0107c940 	call	10107c94 <__multadd>
10105418:	1021883a 	mov	r16,r2
1010541c:	000f883a 	mov	r7,zero
10105420:	01800284 	movi	r6,10
10105424:	880b883a 	mov	r5,r17
10105428:	e009883a 	mov	r4,fp
1010542c:	8d002526 	beq	r17,r20,101054c4 <_dtoa_r+0xf9c>
10105430:	0107c940 	call	10107c94 <__multadd>
10105434:	a00b883a 	mov	r5,r20
10105438:	000f883a 	mov	r7,zero
1010543c:	01800284 	movi	r6,10
10105440:	e009883a 	mov	r4,fp
10105444:	1023883a 	mov	r17,r2
10105448:	0107c940 	call	10107c94 <__multadd>
1010544c:	1029883a 	mov	r20,r2
10105450:	b027883a 	mov	r19,r22
10105454:	003fc006 	br	10105358 <_dtoa_r+0xe30>
10105458:	9011883a 	mov	r8,r18
1010545c:	00800e0e 	bge	zero,r2,10105498 <_dtoa_r+0xf70>
10105460:	800b883a 	mov	r5,r16
10105464:	01800044 	movi	r6,1
10105468:	e009883a 	mov	r4,fp
1010546c:	da001715 	stw	r8,92(sp)
10105470:	01083440 	call	10108344 <__lshift>
10105474:	a80b883a 	mov	r5,r21
10105478:	1009883a 	mov	r4,r2
1010547c:	1021883a 	mov	r16,r2
10105480:	010848c0 	call	1010848c <__mcmp>
10105484:	da001717 	ldw	r8,92(sp)
10105488:	0081960e 	bge	zero,r2,10105ae4 <_dtoa_r+0x15bc>
1010548c:	00800e44 	movi	r2,57
10105490:	40817026 	beq	r8,r2,10105a54 <_dtoa_r+0x152c>
10105494:	ba000c44 	addi	r8,r23,49
10105498:	8825883a 	mov	r18,r17
1010549c:	9dc00044 	addi	r23,r19,1
101054a0:	9a000005 	stb	r8,0(r19)
101054a4:	a023883a 	mov	r17,r20
101054a8:	dc000915 	stw	r16,36(sp)
101054ac:	003f2406 	br	10105140 <_dtoa_r+0xc18>
101054b0:	00800e44 	movi	r2,57
101054b4:	9011883a 	mov	r8,r18
101054b8:	90816626 	beq	r18,r2,10105a54 <_dtoa_r+0x152c>
101054bc:	05bff516 	blt	zero,r22,10105494 <_dtoa_r+0xf6c>
101054c0:	003ff506 	br	10105498 <_dtoa_r+0xf70>
101054c4:	0107c940 	call	10107c94 <__multadd>
101054c8:	1023883a 	mov	r17,r2
101054cc:	1029883a 	mov	r20,r2
101054d0:	003fdf06 	br	10105450 <_dtoa_r+0xf28>
101054d4:	e009883a 	mov	r4,fp
101054d8:	0107c6c0 	call	10107c6c <_Bfree>
101054dc:	00800044 	movi	r2,1
101054e0:	003fbc06 	br	101053d4 <_dtoa_r+0xeac>
101054e4:	a80b883a 	mov	r5,r21
101054e8:	8009883a 	mov	r4,r16
101054ec:	010848c0 	call	1010848c <__mcmp>
101054f0:	103edb0e 	bge	r2,zero,10105060 <_dtoa_r+0xb38>
101054f4:	800b883a 	mov	r5,r16
101054f8:	000f883a 	mov	r7,zero
101054fc:	01800284 	movi	r6,10
10105500:	e009883a 	mov	r4,fp
10105504:	0107c940 	call	10107c94 <__multadd>
10105508:	1021883a 	mov	r16,r2
1010550c:	d8800517 	ldw	r2,20(sp)
10105510:	d8c00b17 	ldw	r3,44(sp)
10105514:	10bfffc4 	addi	r2,r2,-1
10105518:	d8800515 	stw	r2,20(sp)
1010551c:	183f761e 	bne	r3,zero,101052f8 <_dtoa_r+0xdd0>
10105520:	d9000c17 	ldw	r4,48(sp)
10105524:	0101730e 	bge	zero,r4,10105af4 <_dtoa_r+0x15cc>
10105528:	d9000615 	stw	r4,24(sp)
1010552c:	003ed006 	br	10105070 <_dtoa_r+0xb48>
10105530:	00800084 	movi	r2,2
10105534:	3081861e 	bne	r6,r2,10105b50 <_dtoa_r+0x1628>
10105538:	d8000b15 	stw	zero,44(sp)
1010553c:	003f3c06 	br	10105230 <_dtoa_r+0xd08>
10105540:	dc000917 	ldw	r16,36(sp)
10105544:	003e9206 	br	10104f90 <_dtoa_r+0xa68>
10105548:	d9c00317 	ldw	r7,12(sp)
1010554c:	00800084 	movi	r2,2
10105550:	11fec50e 	bge	r2,r7,10105068 <_dtoa_r+0xb40>
10105554:	d9000617 	ldw	r4,24(sp)
10105558:	20013c1e 	bne	r4,zero,10105a4c <_dtoa_r+0x1524>
1010555c:	a80b883a 	mov	r5,r21
10105560:	000f883a 	mov	r7,zero
10105564:	01800144 	movi	r6,5
10105568:	e009883a 	mov	r4,fp
1010556c:	0107c940 	call	10107c94 <__multadd>
10105570:	100b883a 	mov	r5,r2
10105574:	8009883a 	mov	r4,r16
10105578:	102b883a 	mov	r21,r2
1010557c:	010848c0 	call	1010848c <__mcmp>
10105580:	dc000915 	stw	r16,36(sp)
10105584:	00bf410e 	bge	zero,r2,1010528c <_dtoa_r+0xd64>
10105588:	d9c00717 	ldw	r7,28(sp)
1010558c:	00800c44 	movi	r2,49
10105590:	38800005 	stb	r2,0(r7)
10105594:	d8800517 	ldw	r2,20(sp)
10105598:	3dc00044 	addi	r23,r7,1
1010559c:	10800044 	addi	r2,r2,1
101055a0:	d8800515 	stw	r2,20(sp)
101055a4:	003f3d06 	br	1010529c <_dtoa_r+0xd74>
101055a8:	d9800517 	ldw	r6,20(sp)
101055ac:	d9c00717 	ldw	r7,28(sp)
101055b0:	00800c44 	movi	r2,49
101055b4:	31800044 	addi	r6,r6,1
101055b8:	d9800515 	stw	r6,20(sp)
101055bc:	38800005 	stb	r2,0(r7)
101055c0:	003edf06 	br	10105140 <_dtoa_r+0xc18>
101055c4:	d8000b15 	stw	zero,44(sp)
101055c8:	003c9f06 	br	10104848 <_dtoa_r+0x320>
101055cc:	903e7e1e 	bne	r18,zero,10104fc8 <_dtoa_r+0xaa0>
101055d0:	00800434 	movhi	r2,16
101055d4:	10bfffc4 	addi	r2,r2,-1
101055d8:	9884703a 	and	r2,r19,r2
101055dc:	1000ea1e 	bne	r2,zero,10105988 <_dtoa_r+0x1460>
101055e0:	9cdffc2c 	andhi	r19,r19,32752
101055e4:	9800e826 	beq	r19,zero,10105988 <_dtoa_r+0x1460>
101055e8:	d9c00817 	ldw	r7,32(sp)
101055ec:	b5800044 	addi	r22,r22,1
101055f0:	04c00044 	movi	r19,1
101055f4:	39c00044 	addi	r7,r7,1
101055f8:	d9c00815 	stw	r7,32(sp)
101055fc:	d8800d17 	ldw	r2,52(sp)
10105600:	103e721e 	bne	r2,zero,10104fcc <_dtoa_r+0xaa4>
10105604:	00800044 	movi	r2,1
10105608:	003e7906 	br	10104ff0 <_dtoa_r+0xac8>
1010560c:	8009883a 	mov	r4,r16
10105610:	010e4180 	call	1010e418 <__floatsidf>
10105614:	d9800f17 	ldw	r6,60(sp)
10105618:	d9c01017 	ldw	r7,64(sp)
1010561c:	1009883a 	mov	r4,r2
10105620:	180b883a 	mov	r5,r3
10105624:	010d3840 	call	1010d384 <__muldf3>
10105628:	000d883a 	mov	r6,zero
1010562c:	01d00734 	movhi	r7,16412
10105630:	1009883a 	mov	r4,r2
10105634:	180b883a 	mov	r5,r3
10105638:	010bf980 	call	1010bf98 <__adddf3>
1010563c:	047f3034 	movhi	r17,64704
10105640:	1021883a 	mov	r16,r2
10105644:	1c63883a 	add	r17,r3,r17
10105648:	d9000f17 	ldw	r4,60(sp)
1010564c:	d9401017 	ldw	r5,64(sp)
10105650:	000d883a 	mov	r6,zero
10105654:	01d00534 	movhi	r7,16404
10105658:	010da9c0 	call	1010da9c <__subdf3>
1010565c:	800d883a 	mov	r6,r16
10105660:	880f883a 	mov	r7,r17
10105664:	1009883a 	mov	r4,r2
10105668:	180b883a 	mov	r5,r3
1010566c:	102b883a 	mov	r21,r2
10105670:	1829883a 	mov	r20,r3
10105674:	010d1b40 	call	1010d1b4 <__gedf2>
10105678:	00806c16 	blt	zero,r2,1010582c <_dtoa_r+0x1304>
1010567c:	89e0003c 	xorhi	r7,r17,32768
10105680:	800d883a 	mov	r6,r16
10105684:	a809883a 	mov	r4,r21
10105688:	a00b883a 	mov	r5,r20
1010568c:	010d2900 	call	1010d290 <__ledf2>
10105690:	103d7e0e 	bge	r2,zero,10104c8c <_dtoa_r+0x764>
10105694:	002b883a 	mov	r21,zero
10105698:	0023883a 	mov	r17,zero
1010569c:	003efb06 	br	1010528c <_dtoa_r+0xd64>
101056a0:	d8800717 	ldw	r2,28(sp)
101056a4:	003bd006 	br	101045e8 <_dtoa_r+0xc0>
101056a8:	d9000a17 	ldw	r4,40(sp)
101056ac:	d9800d17 	ldw	r6,52(sp)
101056b0:	dd400a15 	stw	r21,40(sp)
101056b4:	a905c83a 	sub	r2,r21,r4
101056b8:	308d883a 	add	r6,r6,r2
101056bc:	d9800d15 	stw	r6,52(sp)
101056c0:	002b883a 	mov	r21,zero
101056c4:	003e0606 	br	10104ee0 <_dtoa_r+0x9b8>
101056c8:	9023883a 	mov	r17,r18
101056cc:	9829883a 	mov	r20,r19
101056d0:	04000084 	movi	r16,2
101056d4:	003c9206 	br	10104920 <_dtoa_r+0x3f8>
101056d8:	04000044 	movi	r16,1
101056dc:	dc000c15 	stw	r16,48(sp)
101056e0:	dc000615 	stw	r16,24(sp)
101056e4:	dc002215 	stw	r16,136(sp)
101056e8:	e0001115 	stw	zero,68(fp)
101056ec:	000b883a 	mov	r5,zero
101056f0:	003c6906 	br	10104898 <_dtoa_r+0x370>
101056f4:	3021883a 	mov	r16,r6
101056f8:	003ffb06 	br	101056e8 <_dtoa_r+0x11c0>
101056fc:	1000021e 	bne	r2,zero,10105708 <_dtoa_r+0x11e0>
10105700:	4200004c 	andi	r8,r8,1
10105704:	403e7d1e 	bne	r8,zero,101050fc <_dtoa_r+0xbd4>
10105708:	01000c04 	movi	r4,48
1010570c:	00000106 	br	10105714 <_dtoa_r+0x11ec>
10105710:	102f883a 	mov	r23,r2
10105714:	b8bfffc4 	addi	r2,r23,-1
10105718:	10c00007 	ldb	r3,0(r2)
1010571c:	193ffc26 	beq	r3,r4,10105710 <_dtoa_r+0x11e8>
10105720:	003e8706 	br	10105140 <_dtoa_r+0xc18>
10105724:	d8800517 	ldw	r2,20(sp)
10105728:	00a3c83a 	sub	r17,zero,r2
1010572c:	8800a426 	beq	r17,zero,101059c0 <_dtoa_r+0x1498>
10105730:	888003cc 	andi	r2,r17,15
10105734:	100490fa 	slli	r2,r2,3
10105738:	00c40474 	movhi	r3,4113
1010573c:	18c3e904 	addi	r3,r3,4004
10105740:	1885883a 	add	r2,r3,r2
10105744:	11800017 	ldw	r6,0(r2)
10105748:	11c00117 	ldw	r7,4(r2)
1010574c:	9009883a 	mov	r4,r18
10105750:	980b883a 	mov	r5,r19
10105754:	8823d13a 	srai	r17,r17,4
10105758:	010d3840 	call	1010d384 <__muldf3>
1010575c:	d8800f15 	stw	r2,60(sp)
10105760:	d8c01015 	stw	r3,64(sp)
10105764:	8800e826 	beq	r17,zero,10105b08 <_dtoa_r+0x15e0>
10105768:	05040474 	movhi	r20,4113
1010576c:	a503df04 	addi	r20,r20,3964
10105770:	04000084 	movi	r16,2
10105774:	8980004c 	andi	r6,r17,1
10105778:	1009883a 	mov	r4,r2
1010577c:	8823d07a 	srai	r17,r17,1
10105780:	180b883a 	mov	r5,r3
10105784:	30000426 	beq	r6,zero,10105798 <_dtoa_r+0x1270>
10105788:	a1800017 	ldw	r6,0(r20)
1010578c:	a1c00117 	ldw	r7,4(r20)
10105790:	84000044 	addi	r16,r16,1
10105794:	010d3840 	call	1010d384 <__muldf3>
10105798:	a5000204 	addi	r20,r20,8
1010579c:	883ff51e 	bne	r17,zero,10105774 <_dtoa_r+0x124c>
101057a0:	d8800f15 	stw	r2,60(sp)
101057a4:	d8c01015 	stw	r3,64(sp)
101057a8:	003c7606 	br	10104984 <_dtoa_r+0x45c>
101057ac:	00c00c04 	movi	r3,48
101057b0:	10c00005 	stb	r3,0(r2)
101057b4:	d8c00517 	ldw	r3,20(sp)
101057b8:	bd3fffc3 	ldbu	r20,-1(r23)
101057bc:	18c00044 	addi	r3,r3,1
101057c0:	d8c00515 	stw	r3,20(sp)
101057c4:	003db906 	br	10104eac <_dtoa_r+0x984>
101057c8:	89400117 	ldw	r5,4(r17)
101057cc:	e009883a 	mov	r4,fp
101057d0:	0107bc40 	call	10107bc4 <_Balloc>
101057d4:	89800417 	ldw	r6,16(r17)
101057d8:	89400304 	addi	r5,r17,12
101057dc:	11000304 	addi	r4,r2,12
101057e0:	31800084 	addi	r6,r6,2
101057e4:	318d883a 	add	r6,r6,r6
101057e8:	318d883a 	add	r6,r6,r6
101057ec:	1027883a 	mov	r19,r2
101057f0:	01077f80 	call	101077f8 <memcpy>
101057f4:	01800044 	movi	r6,1
101057f8:	980b883a 	mov	r5,r19
101057fc:	e009883a 	mov	r4,fp
10105800:	01083440 	call	10108344 <__lshift>
10105804:	1029883a 	mov	r20,r2
10105808:	003ecc06 	br	1010533c <_dtoa_r+0xe14>
1010580c:	00800e44 	movi	r2,57
10105810:	90809026 	beq	r18,r2,10105a54 <_dtoa_r+0x152c>
10105814:	92000044 	addi	r8,r18,1
10105818:	003f1f06 	br	10105498 <_dtoa_r+0xf70>
1010581c:	9011883a 	mov	r8,r18
10105820:	8825883a 	mov	r18,r17
10105824:	a023883a 	mov	r17,r20
10105828:	003e2906 	br	101050d0 <_dtoa_r+0xba8>
1010582c:	002b883a 	mov	r21,zero
10105830:	0023883a 	mov	r17,zero
10105834:	003f5406 	br	10105588 <_dtoa_r+0x1060>
10105838:	61bfffc4 	addi	r6,r12,-1
1010583c:	300490fa 	slli	r2,r6,3
10105840:	00c40474 	movhi	r3,4113
10105844:	18c3e904 	addi	r3,r3,4004
10105848:	1885883a 	add	r2,r3,r2
1010584c:	11000017 	ldw	r4,0(r2)
10105850:	11400117 	ldw	r5,4(r2)
10105854:	d8800717 	ldw	r2,28(sp)
10105858:	880f883a 	mov	r7,r17
1010585c:	d9801215 	stw	r6,72(sp)
10105860:	800d883a 	mov	r6,r16
10105864:	db001615 	stw	r12,88(sp)
10105868:	15c00044 	addi	r23,r2,1
1010586c:	010d3840 	call	1010d384 <__muldf3>
10105870:	d9401017 	ldw	r5,64(sp)
10105874:	d9000f17 	ldw	r4,60(sp)
10105878:	d8c01515 	stw	r3,84(sp)
1010587c:	d8801415 	stw	r2,80(sp)
10105880:	010e3980 	call	1010e398 <__fixdfsi>
10105884:	1009883a 	mov	r4,r2
10105888:	1021883a 	mov	r16,r2
1010588c:	010e4180 	call	1010e418 <__floatsidf>
10105890:	d9000f17 	ldw	r4,60(sp)
10105894:	d9401017 	ldw	r5,64(sp)
10105898:	100d883a 	mov	r6,r2
1010589c:	180f883a 	mov	r7,r3
101058a0:	010da9c0 	call	1010da9c <__subdf3>
101058a4:	1829883a 	mov	r20,r3
101058a8:	d8c00717 	ldw	r3,28(sp)
101058ac:	84000c04 	addi	r16,r16,48
101058b0:	1023883a 	mov	r17,r2
101058b4:	1c000005 	stb	r16,0(r3)
101058b8:	db001617 	ldw	r12,88(sp)
101058bc:	00800044 	movi	r2,1
101058c0:	60802226 	beq	r12,r2,1010594c <_dtoa_r+0x1424>
101058c4:	d9c00717 	ldw	r7,28(sp)
101058c8:	8805883a 	mov	r2,r17
101058cc:	b82b883a 	mov	r21,r23
101058d0:	3b19883a 	add	r12,r7,r12
101058d4:	6023883a 	mov	r17,r12
101058d8:	a007883a 	mov	r3,r20
101058dc:	dc800f15 	stw	r18,60(sp)
101058e0:	000d883a 	mov	r6,zero
101058e4:	01d00934 	movhi	r7,16420
101058e8:	1009883a 	mov	r4,r2
101058ec:	180b883a 	mov	r5,r3
101058f0:	010d3840 	call	1010d384 <__muldf3>
101058f4:	180b883a 	mov	r5,r3
101058f8:	1009883a 	mov	r4,r2
101058fc:	1829883a 	mov	r20,r3
10105900:	1025883a 	mov	r18,r2
10105904:	010e3980 	call	1010e398 <__fixdfsi>
10105908:	1009883a 	mov	r4,r2
1010590c:	1021883a 	mov	r16,r2
10105910:	010e4180 	call	1010e418 <__floatsidf>
10105914:	100d883a 	mov	r6,r2
10105918:	180f883a 	mov	r7,r3
1010591c:	9009883a 	mov	r4,r18
10105920:	a00b883a 	mov	r5,r20
10105924:	84000c04 	addi	r16,r16,48
10105928:	010da9c0 	call	1010da9c <__subdf3>
1010592c:	ad400044 	addi	r21,r21,1
10105930:	ac3fffc5 	stb	r16,-1(r21)
10105934:	ac7fea1e 	bne	r21,r17,101058e0 <_dtoa_r+0x13b8>
10105938:	1023883a 	mov	r17,r2
1010593c:	d8801217 	ldw	r2,72(sp)
10105940:	dc800f17 	ldw	r18,60(sp)
10105944:	1829883a 	mov	r20,r3
10105948:	b8af883a 	add	r23,r23,r2
1010594c:	d9001417 	ldw	r4,80(sp)
10105950:	d9401517 	ldw	r5,84(sp)
10105954:	000d883a 	mov	r6,zero
10105958:	01cff834 	movhi	r7,16352
1010595c:	010bf980 	call	1010bf98 <__adddf3>
10105960:	880d883a 	mov	r6,r17
10105964:	a00f883a 	mov	r7,r20
10105968:	1009883a 	mov	r4,r2
1010596c:	180b883a 	mov	r5,r3
10105970:	010d2900 	call	1010d290 <__ledf2>
10105974:	10003e0e 	bge	r2,zero,10105a70 <_dtoa_r+0x1548>
10105978:	d9001317 	ldw	r4,76(sp)
1010597c:	bd3fffc3 	ldbu	r20,-1(r23)
10105980:	d9000515 	stw	r4,20(sp)
10105984:	003d3b06 	br	10104e74 <_dtoa_r+0x94c>
10105988:	0027883a 	mov	r19,zero
1010598c:	003f1b06 	br	101055fc <_dtoa_r+0x10d4>
10105990:	d8800817 	ldw	r2,32(sp)
10105994:	11e9c83a 	sub	r20,r2,r7
10105998:	0005883a 	mov	r2,zero
1010599c:	003d5406 	br	10104ef0 <_dtoa_r+0x9c8>
101059a0:	00800044 	movi	r2,1
101059a4:	003dc706 	br	101050c4 <_dtoa_r+0xb9c>
101059a8:	d8c00217 	ldw	r3,8(sp)
101059ac:	00800d84 	movi	r2,54
101059b0:	dd400a17 	ldw	r21,40(sp)
101059b4:	10c5c83a 	sub	r2,r2,r3
101059b8:	dd000817 	ldw	r20,32(sp)
101059bc:	003d4c06 	br	10104ef0 <_dtoa_r+0x9c8>
101059c0:	dc800f15 	stw	r18,60(sp)
101059c4:	dcc01015 	stw	r19,64(sp)
101059c8:	04000084 	movi	r16,2
101059cc:	003bed06 	br	10104984 <_dtoa_r+0x45c>
101059d0:	d9000617 	ldw	r4,24(sp)
101059d4:	203f0d26 	beq	r4,zero,1010560c <_dtoa_r+0x10e4>
101059d8:	d9800c17 	ldw	r6,48(sp)
101059dc:	01bcab0e 	bge	zero,r6,10104c8c <_dtoa_r+0x764>
101059e0:	d9401017 	ldw	r5,64(sp)
101059e4:	d9000f17 	ldw	r4,60(sp)
101059e8:	000d883a 	mov	r6,zero
101059ec:	01d00934 	movhi	r7,16420
101059f0:	010d3840 	call	1010d384 <__muldf3>
101059f4:	81000044 	addi	r4,r16,1
101059f8:	d8800f15 	stw	r2,60(sp)
101059fc:	d8c01015 	stw	r3,64(sp)
10105a00:	010e4180 	call	1010e418 <__floatsidf>
10105a04:	d9800f17 	ldw	r6,60(sp)
10105a08:	d9c01017 	ldw	r7,64(sp)
10105a0c:	1009883a 	mov	r4,r2
10105a10:	180b883a 	mov	r5,r3
10105a14:	010d3840 	call	1010d384 <__muldf3>
10105a18:	01d00734 	movhi	r7,16412
10105a1c:	000d883a 	mov	r6,zero
10105a20:	1009883a 	mov	r4,r2
10105a24:	180b883a 	mov	r5,r3
10105a28:	010bf980 	call	1010bf98 <__adddf3>
10105a2c:	d9c00517 	ldw	r7,20(sp)
10105a30:	047f3034 	movhi	r17,64704
10105a34:	1021883a 	mov	r16,r2
10105a38:	39ffffc4 	addi	r7,r7,-1
10105a3c:	d9c01315 	stw	r7,76(sp)
10105a40:	1c63883a 	add	r17,r3,r17
10105a44:	db000c17 	ldw	r12,48(sp)
10105a48:	003bea06 	br	101049f4 <_dtoa_r+0x4cc>
10105a4c:	dc000915 	stw	r16,36(sp)
10105a50:	003e0e06 	br	1010528c <_dtoa_r+0xd64>
10105a54:	01000e44 	movi	r4,57
10105a58:	8825883a 	mov	r18,r17
10105a5c:	9dc00044 	addi	r23,r19,1
10105a60:	99000005 	stb	r4,0(r19)
10105a64:	a023883a 	mov	r17,r20
10105a68:	dc000915 	stw	r16,36(sp)
10105a6c:	003da406 	br	10105100 <_dtoa_r+0xbd8>
10105a70:	d9801417 	ldw	r6,80(sp)
10105a74:	d9c01517 	ldw	r7,84(sp)
10105a78:	0009883a 	mov	r4,zero
10105a7c:	014ff834 	movhi	r5,16352
10105a80:	010da9c0 	call	1010da9c <__subdf3>
10105a84:	880d883a 	mov	r6,r17
10105a88:	a00f883a 	mov	r7,r20
10105a8c:	1009883a 	mov	r4,r2
10105a90:	180b883a 	mov	r5,r3
10105a94:	010d1b40 	call	1010d1b4 <__gedf2>
10105a98:	00bc7c0e 	bge	zero,r2,10104c8c <_dtoa_r+0x764>
10105a9c:	01000c04 	movi	r4,48
10105aa0:	00000106 	br	10105aa8 <_dtoa_r+0x1580>
10105aa4:	102f883a 	mov	r23,r2
10105aa8:	b8bfffc4 	addi	r2,r23,-1
10105aac:	10c00007 	ldb	r3,0(r2)
10105ab0:	193ffc26 	beq	r3,r4,10105aa4 <_dtoa_r+0x157c>
10105ab4:	d9801317 	ldw	r6,76(sp)
10105ab8:	d9800515 	stw	r6,20(sp)
10105abc:	003c4406 	br	10104bd0 <_dtoa_r+0x6a8>
10105ac0:	d9801317 	ldw	r6,76(sp)
10105ac4:	d9800515 	stw	r6,20(sp)
10105ac8:	003cea06 	br	10104e74 <_dtoa_r+0x94c>
10105acc:	dd800f17 	ldw	r22,60(sp)
10105ad0:	dcc01017 	ldw	r19,64(sp)
10105ad4:	dc801217 	ldw	r18,72(sp)
10105ad8:	003c6c06 	br	10104c8c <_dtoa_r+0x764>
10105adc:	903e031e 	bne	r18,zero,101052ec <_dtoa_r+0xdc4>
10105ae0:	003ebb06 	br	101055d0 <_dtoa_r+0x10a8>
10105ae4:	103e6c1e 	bne	r2,zero,10105498 <_dtoa_r+0xf70>
10105ae8:	4080004c 	andi	r2,r8,1
10105aec:	103e6a26 	beq	r2,zero,10105498 <_dtoa_r+0xf70>
10105af0:	003e6606 	br	1010548c <_dtoa_r+0xf64>
10105af4:	d8c00317 	ldw	r3,12(sp)
10105af8:	00800084 	movi	r2,2
10105afc:	10c02916 	blt	r2,r3,10105ba4 <_dtoa_r+0x167c>
10105b00:	d9000c17 	ldw	r4,48(sp)
10105b04:	003e8806 	br	10105528 <_dtoa_r+0x1000>
10105b08:	04000084 	movi	r16,2
10105b0c:	003b9d06 	br	10104984 <_dtoa_r+0x45c>
10105b10:	d9001317 	ldw	r4,76(sp)
10105b14:	d9000515 	stw	r4,20(sp)
10105b18:	003cd606 	br	10104e74 <_dtoa_r+0x94c>
10105b1c:	d8801317 	ldw	r2,76(sp)
10105b20:	d8800515 	stw	r2,20(sp)
10105b24:	003c2a06 	br	10104bd0 <_dtoa_r+0x6a8>
10105b28:	d9800317 	ldw	r6,12(sp)
10105b2c:	00800084 	movi	r2,2
10105b30:	11801516 	blt	r2,r6,10105b88 <_dtoa_r+0x1660>
10105b34:	d9c00c17 	ldw	r7,48(sp)
10105b38:	d9c00615 	stw	r7,24(sp)
10105b3c:	003df706 	br	1010531c <_dtoa_r+0xdf4>
10105b40:	193d3926 	beq	r3,r4,10105028 <_dtoa_r+0xb00>
10105b44:	00c00f04 	movi	r3,60
10105b48:	1885c83a 	sub	r2,r3,r2
10105b4c:	003ddf06 	br	101052cc <_dtoa_r+0xda4>
10105b50:	e009883a 	mov	r4,fp
10105b54:	e0001115 	stw	zero,68(fp)
10105b58:	000b883a 	mov	r5,zero
10105b5c:	0107bc40 	call	10107bc4 <_Balloc>
10105b60:	d8800715 	stw	r2,28(sp)
10105b64:	d8c00717 	ldw	r3,28(sp)
10105b68:	00bfffc4 	movi	r2,-1
10105b6c:	01000044 	movi	r4,1
10105b70:	d8800c15 	stw	r2,48(sp)
10105b74:	e0c01015 	stw	r3,64(fp)
10105b78:	d9000b15 	stw	r4,44(sp)
10105b7c:	d8800615 	stw	r2,24(sp)
10105b80:	d8002215 	stw	zero,136(sp)
10105b84:	003c4106 	br	10104c8c <_dtoa_r+0x764>
10105b88:	d8c00c17 	ldw	r3,48(sp)
10105b8c:	d8c00615 	stw	r3,24(sp)
10105b90:	003e7006 	br	10105554 <_dtoa_r+0x102c>
10105b94:	04400044 	movi	r17,1
10105b98:	003b2006 	br	1010481c <_dtoa_r+0x2f4>
10105b9c:	000b883a 	mov	r5,zero
10105ba0:	003b3d06 	br	10104898 <_dtoa_r+0x370>
10105ba4:	d8800c17 	ldw	r2,48(sp)
10105ba8:	d8800615 	stw	r2,24(sp)
10105bac:	003e6906 	br	10105554 <_dtoa_r+0x102c>

10105bb0 <__sflush_r>:
10105bb0:	2880030b 	ldhu	r2,12(r5)
10105bb4:	defffb04 	addi	sp,sp,-20
10105bb8:	dcc00315 	stw	r19,12(sp)
10105bbc:	dc400115 	stw	r17,4(sp)
10105bc0:	dfc00415 	stw	ra,16(sp)
10105bc4:	dc800215 	stw	r18,8(sp)
10105bc8:	dc000015 	stw	r16,0(sp)
10105bcc:	10c0020c 	andi	r3,r2,8
10105bd0:	2823883a 	mov	r17,r5
10105bd4:	2027883a 	mov	r19,r4
10105bd8:	1800311e 	bne	r3,zero,10105ca0 <__sflush_r+0xf0>
10105bdc:	28c00117 	ldw	r3,4(r5)
10105be0:	10820014 	ori	r2,r2,2048
10105be4:	2880030d 	sth	r2,12(r5)
10105be8:	00c04b0e 	bge	zero,r3,10105d18 <__sflush_r+0x168>
10105bec:	8a000a17 	ldw	r8,40(r17)
10105bf0:	40002326 	beq	r8,zero,10105c80 <__sflush_r+0xd0>
10105bf4:	9c000017 	ldw	r16,0(r19)
10105bf8:	10c4000c 	andi	r3,r2,4096
10105bfc:	98000015 	stw	zero,0(r19)
10105c00:	18004826 	beq	r3,zero,10105d24 <__sflush_r+0x174>
10105c04:	89801417 	ldw	r6,80(r17)
10105c08:	10c0010c 	andi	r3,r2,4
10105c0c:	18000626 	beq	r3,zero,10105c28 <__sflush_r+0x78>
10105c10:	88c00117 	ldw	r3,4(r17)
10105c14:	88800c17 	ldw	r2,48(r17)
10105c18:	30cdc83a 	sub	r6,r6,r3
10105c1c:	10000226 	beq	r2,zero,10105c28 <__sflush_r+0x78>
10105c20:	88800f17 	ldw	r2,60(r17)
10105c24:	308dc83a 	sub	r6,r6,r2
10105c28:	89400717 	ldw	r5,28(r17)
10105c2c:	000f883a 	mov	r7,zero
10105c30:	9809883a 	mov	r4,r19
10105c34:	403ee83a 	callr	r8
10105c38:	00ffffc4 	movi	r3,-1
10105c3c:	10c04426 	beq	r2,r3,10105d50 <__sflush_r+0x1a0>
10105c40:	88c0030b 	ldhu	r3,12(r17)
10105c44:	89000417 	ldw	r4,16(r17)
10105c48:	88000115 	stw	zero,4(r17)
10105c4c:	197dffcc 	andi	r5,r3,63487
10105c50:	8940030d 	sth	r5,12(r17)
10105c54:	89000015 	stw	r4,0(r17)
10105c58:	18c4000c 	andi	r3,r3,4096
10105c5c:	18002c1e 	bne	r3,zero,10105d10 <__sflush_r+0x160>
10105c60:	89400c17 	ldw	r5,48(r17)
10105c64:	9c000015 	stw	r16,0(r19)
10105c68:	28000526 	beq	r5,zero,10105c80 <__sflush_r+0xd0>
10105c6c:	88801004 	addi	r2,r17,64
10105c70:	28800226 	beq	r5,r2,10105c7c <__sflush_r+0xcc>
10105c74:	9809883a 	mov	r4,r19
10105c78:	010631c0 	call	1010631c <_free_r>
10105c7c:	88000c15 	stw	zero,48(r17)
10105c80:	0005883a 	mov	r2,zero
10105c84:	dfc00417 	ldw	ra,16(sp)
10105c88:	dcc00317 	ldw	r19,12(sp)
10105c8c:	dc800217 	ldw	r18,8(sp)
10105c90:	dc400117 	ldw	r17,4(sp)
10105c94:	dc000017 	ldw	r16,0(sp)
10105c98:	dec00504 	addi	sp,sp,20
10105c9c:	f800283a 	ret
10105ca0:	2c800417 	ldw	r18,16(r5)
10105ca4:	903ff626 	beq	r18,zero,10105c80 <__sflush_r+0xd0>
10105ca8:	2c000017 	ldw	r16,0(r5)
10105cac:	108000cc 	andi	r2,r2,3
10105cb0:	2c800015 	stw	r18,0(r5)
10105cb4:	84a1c83a 	sub	r16,r16,r18
10105cb8:	1000131e 	bne	r2,zero,10105d08 <__sflush_r+0x158>
10105cbc:	28800517 	ldw	r2,20(r5)
10105cc0:	88800215 	stw	r2,8(r17)
10105cc4:	04000316 	blt	zero,r16,10105cd4 <__sflush_r+0x124>
10105cc8:	003fed06 	br	10105c80 <__sflush_r+0xd0>
10105ccc:	90a5883a 	add	r18,r18,r2
10105cd0:	043feb0e 	bge	zero,r16,10105c80 <__sflush_r+0xd0>
10105cd4:	88800917 	ldw	r2,36(r17)
10105cd8:	89400717 	ldw	r5,28(r17)
10105cdc:	800f883a 	mov	r7,r16
10105ce0:	900d883a 	mov	r6,r18
10105ce4:	9809883a 	mov	r4,r19
10105ce8:	103ee83a 	callr	r2
10105cec:	80a1c83a 	sub	r16,r16,r2
10105cf0:	00bff616 	blt	zero,r2,10105ccc <__sflush_r+0x11c>
10105cf4:	88c0030b 	ldhu	r3,12(r17)
10105cf8:	00bfffc4 	movi	r2,-1
10105cfc:	18c01014 	ori	r3,r3,64
10105d00:	88c0030d 	sth	r3,12(r17)
10105d04:	003fdf06 	br	10105c84 <__sflush_r+0xd4>
10105d08:	0005883a 	mov	r2,zero
10105d0c:	003fec06 	br	10105cc0 <__sflush_r+0x110>
10105d10:	88801415 	stw	r2,80(r17)
10105d14:	003fd206 	br	10105c60 <__sflush_r+0xb0>
10105d18:	28c00f17 	ldw	r3,60(r5)
10105d1c:	00ffb316 	blt	zero,r3,10105bec <__sflush_r+0x3c>
10105d20:	003fd706 	br	10105c80 <__sflush_r+0xd0>
10105d24:	89400717 	ldw	r5,28(r17)
10105d28:	000d883a 	mov	r6,zero
10105d2c:	01c00044 	movi	r7,1
10105d30:	9809883a 	mov	r4,r19
10105d34:	403ee83a 	callr	r8
10105d38:	100d883a 	mov	r6,r2
10105d3c:	00bfffc4 	movi	r2,-1
10105d40:	30801426 	beq	r6,r2,10105d94 <__sflush_r+0x1e4>
10105d44:	8880030b 	ldhu	r2,12(r17)
10105d48:	8a000a17 	ldw	r8,40(r17)
10105d4c:	003fae06 	br	10105c08 <__sflush_r+0x58>
10105d50:	98c00017 	ldw	r3,0(r19)
10105d54:	183fba26 	beq	r3,zero,10105c40 <__sflush_r+0x90>
10105d58:	01000744 	movi	r4,29
10105d5c:	19000626 	beq	r3,r4,10105d78 <__sflush_r+0x1c8>
10105d60:	01000584 	movi	r4,22
10105d64:	19000426 	beq	r3,r4,10105d78 <__sflush_r+0x1c8>
10105d68:	88c0030b 	ldhu	r3,12(r17)
10105d6c:	18c01014 	ori	r3,r3,64
10105d70:	88c0030d 	sth	r3,12(r17)
10105d74:	003fc306 	br	10105c84 <__sflush_r+0xd4>
10105d78:	8880030b 	ldhu	r2,12(r17)
10105d7c:	88c00417 	ldw	r3,16(r17)
10105d80:	88000115 	stw	zero,4(r17)
10105d84:	10bdffcc 	andi	r2,r2,63487
10105d88:	8880030d 	sth	r2,12(r17)
10105d8c:	88c00015 	stw	r3,0(r17)
10105d90:	003fb306 	br	10105c60 <__sflush_r+0xb0>
10105d94:	98800017 	ldw	r2,0(r19)
10105d98:	103fea26 	beq	r2,zero,10105d44 <__sflush_r+0x194>
10105d9c:	00c00744 	movi	r3,29
10105da0:	10c00226 	beq	r2,r3,10105dac <__sflush_r+0x1fc>
10105da4:	00c00584 	movi	r3,22
10105da8:	10c0031e 	bne	r2,r3,10105db8 <__sflush_r+0x208>
10105dac:	9c000015 	stw	r16,0(r19)
10105db0:	0005883a 	mov	r2,zero
10105db4:	003fb306 	br	10105c84 <__sflush_r+0xd4>
10105db8:	88c0030b 	ldhu	r3,12(r17)
10105dbc:	3005883a 	mov	r2,r6
10105dc0:	18c01014 	ori	r3,r3,64
10105dc4:	88c0030d 	sth	r3,12(r17)
10105dc8:	003fae06 	br	10105c84 <__sflush_r+0xd4>

10105dcc <_fflush_r>:
10105dcc:	defffd04 	addi	sp,sp,-12
10105dd0:	dc000115 	stw	r16,4(sp)
10105dd4:	dfc00215 	stw	ra,8(sp)
10105dd8:	2021883a 	mov	r16,r4
10105ddc:	20000226 	beq	r4,zero,10105de8 <_fflush_r+0x1c>
10105de0:	20800e17 	ldw	r2,56(r4)
10105de4:	10000c26 	beq	r2,zero,10105e18 <_fflush_r+0x4c>
10105de8:	2880030f 	ldh	r2,12(r5)
10105dec:	1000051e 	bne	r2,zero,10105e04 <_fflush_r+0x38>
10105df0:	0005883a 	mov	r2,zero
10105df4:	dfc00217 	ldw	ra,8(sp)
10105df8:	dc000117 	ldw	r16,4(sp)
10105dfc:	dec00304 	addi	sp,sp,12
10105e00:	f800283a 	ret
10105e04:	8009883a 	mov	r4,r16
10105e08:	dfc00217 	ldw	ra,8(sp)
10105e0c:	dc000117 	ldw	r16,4(sp)
10105e10:	dec00304 	addi	sp,sp,12
10105e14:	0105bb01 	jmpi	10105bb0 <__sflush_r>
10105e18:	d9400015 	stw	r5,0(sp)
10105e1c:	01061a80 	call	101061a8 <__sinit>
10105e20:	d9400017 	ldw	r5,0(sp)
10105e24:	003ff006 	br	10105de8 <_fflush_r+0x1c>

10105e28 <fflush>:
10105e28:	20000526 	beq	r4,zero,10105e40 <fflush+0x18>
10105e2c:	00840474 	movhi	r2,4113
10105e30:	108b1c04 	addi	r2,r2,11376
10105e34:	200b883a 	mov	r5,r4
10105e38:	11000017 	ldw	r4,0(r2)
10105e3c:	0105dcc1 	jmpi	10105dcc <_fflush_r>
10105e40:	00840474 	movhi	r2,4113
10105e44:	108b1b04 	addi	r2,r2,11372
10105e48:	11000017 	ldw	r4,0(r2)
10105e4c:	01440434 	movhi	r5,4112
10105e50:	29577304 	addi	r5,r5,24012
10105e54:	0106bac1 	jmpi	10106bac <_fwalk_reent>

10105e58 <__fp_unlock>:
10105e58:	0005883a 	mov	r2,zero
10105e5c:	f800283a 	ret

10105e60 <_cleanup_r>:
10105e60:	01440474 	movhi	r5,4113
10105e64:	296ba104 	addi	r5,r5,-20860
10105e68:	0106bac1 	jmpi	10106bac <_fwalk_reent>

10105e6c <__sinit.part.1>:
10105e6c:	defff704 	addi	sp,sp,-36
10105e70:	00c40434 	movhi	r3,4112
10105e74:	dfc00815 	stw	ra,32(sp)
10105e78:	ddc00715 	stw	r23,28(sp)
10105e7c:	dd800615 	stw	r22,24(sp)
10105e80:	dd400515 	stw	r21,20(sp)
10105e84:	dd000415 	stw	r20,16(sp)
10105e88:	dcc00315 	stw	r19,12(sp)
10105e8c:	dc800215 	stw	r18,8(sp)
10105e90:	dc400115 	stw	r17,4(sp)
10105e94:	dc000015 	stw	r16,0(sp)
10105e98:	18d79804 	addi	r3,r3,24160
10105e9c:	24000117 	ldw	r16,4(r4)
10105ea0:	20c00f15 	stw	r3,60(r4)
10105ea4:	2080bb04 	addi	r2,r4,748
10105ea8:	00c000c4 	movi	r3,3
10105eac:	20c0b915 	stw	r3,740(r4)
10105eb0:	2080ba15 	stw	r2,744(r4)
10105eb4:	2000b815 	stw	zero,736(r4)
10105eb8:	05c00204 	movi	r23,8
10105ebc:	00800104 	movi	r2,4
10105ec0:	2025883a 	mov	r18,r4
10105ec4:	b80d883a 	mov	r6,r23
10105ec8:	81001704 	addi	r4,r16,92
10105ecc:	000b883a 	mov	r5,zero
10105ed0:	80000015 	stw	zero,0(r16)
10105ed4:	80000115 	stw	zero,4(r16)
10105ed8:	80000215 	stw	zero,8(r16)
10105edc:	8080030d 	sth	r2,12(r16)
10105ee0:	80001915 	stw	zero,100(r16)
10105ee4:	8000038d 	sth	zero,14(r16)
10105ee8:	80000415 	stw	zero,16(r16)
10105eec:	80000515 	stw	zero,20(r16)
10105ef0:	80000615 	stw	zero,24(r16)
10105ef4:	0107a9c0 	call	10107a9c <memset>
10105ef8:	05840474 	movhi	r22,4113
10105efc:	94400217 	ldw	r17,8(r18)
10105f00:	05440474 	movhi	r21,4113
10105f04:	05040474 	movhi	r20,4113
10105f08:	04c40474 	movhi	r19,4113
10105f0c:	b5a4d504 	addi	r22,r22,-27820
10105f10:	ad64ec04 	addi	r21,r21,-27728
10105f14:	a5250b04 	addi	r20,r20,-27604
10105f18:	9ce52204 	addi	r19,r19,-27512
10105f1c:	85800815 	stw	r22,32(r16)
10105f20:	85400915 	stw	r21,36(r16)
10105f24:	85000a15 	stw	r20,40(r16)
10105f28:	84c00b15 	stw	r19,44(r16)
10105f2c:	84000715 	stw	r16,28(r16)
10105f30:	00800284 	movi	r2,10
10105f34:	8880030d 	sth	r2,12(r17)
10105f38:	00800044 	movi	r2,1
10105f3c:	b80d883a 	mov	r6,r23
10105f40:	89001704 	addi	r4,r17,92
10105f44:	000b883a 	mov	r5,zero
10105f48:	88000015 	stw	zero,0(r17)
10105f4c:	88000115 	stw	zero,4(r17)
10105f50:	88000215 	stw	zero,8(r17)
10105f54:	88001915 	stw	zero,100(r17)
10105f58:	8880038d 	sth	r2,14(r17)
10105f5c:	88000415 	stw	zero,16(r17)
10105f60:	88000515 	stw	zero,20(r17)
10105f64:	88000615 	stw	zero,24(r17)
10105f68:	0107a9c0 	call	10107a9c <memset>
10105f6c:	94000317 	ldw	r16,12(r18)
10105f70:	00800484 	movi	r2,18
10105f74:	8c400715 	stw	r17,28(r17)
10105f78:	8d800815 	stw	r22,32(r17)
10105f7c:	8d400915 	stw	r21,36(r17)
10105f80:	8d000a15 	stw	r20,40(r17)
10105f84:	8cc00b15 	stw	r19,44(r17)
10105f88:	8080030d 	sth	r2,12(r16)
10105f8c:	00800084 	movi	r2,2
10105f90:	80000015 	stw	zero,0(r16)
10105f94:	80000115 	stw	zero,4(r16)
10105f98:	80000215 	stw	zero,8(r16)
10105f9c:	80001915 	stw	zero,100(r16)
10105fa0:	8080038d 	sth	r2,14(r16)
10105fa4:	80000415 	stw	zero,16(r16)
10105fa8:	80000515 	stw	zero,20(r16)
10105fac:	80000615 	stw	zero,24(r16)
10105fb0:	b80d883a 	mov	r6,r23
10105fb4:	000b883a 	mov	r5,zero
10105fb8:	81001704 	addi	r4,r16,92
10105fbc:	0107a9c0 	call	10107a9c <memset>
10105fc0:	00800044 	movi	r2,1
10105fc4:	84000715 	stw	r16,28(r16)
10105fc8:	85800815 	stw	r22,32(r16)
10105fcc:	85400915 	stw	r21,36(r16)
10105fd0:	85000a15 	stw	r20,40(r16)
10105fd4:	84c00b15 	stw	r19,44(r16)
10105fd8:	90800e15 	stw	r2,56(r18)
10105fdc:	dfc00817 	ldw	ra,32(sp)
10105fe0:	ddc00717 	ldw	r23,28(sp)
10105fe4:	dd800617 	ldw	r22,24(sp)
10105fe8:	dd400517 	ldw	r21,20(sp)
10105fec:	dd000417 	ldw	r20,16(sp)
10105ff0:	dcc00317 	ldw	r19,12(sp)
10105ff4:	dc800217 	ldw	r18,8(sp)
10105ff8:	dc400117 	ldw	r17,4(sp)
10105ffc:	dc000017 	ldw	r16,0(sp)
10106000:	dec00904 	addi	sp,sp,36
10106004:	f800283a 	ret

10106008 <__fp_lock>:
10106008:	0005883a 	mov	r2,zero
1010600c:	f800283a 	ret

10106010 <__sfmoreglue>:
10106010:	defffc04 	addi	sp,sp,-16
10106014:	dc400115 	stw	r17,4(sp)
10106018:	2c7fffc4 	addi	r17,r5,-1
1010601c:	8c401a24 	muli	r17,r17,104
10106020:	dc800215 	stw	r18,8(sp)
10106024:	2825883a 	mov	r18,r5
10106028:	89401d04 	addi	r5,r17,116
1010602c:	dc000015 	stw	r16,0(sp)
10106030:	dfc00315 	stw	ra,12(sp)
10106034:	0106f080 	call	10106f08 <_malloc_r>
10106038:	1021883a 	mov	r16,r2
1010603c:	10000726 	beq	r2,zero,1010605c <__sfmoreglue+0x4c>
10106040:	11000304 	addi	r4,r2,12
10106044:	10000015 	stw	zero,0(r2)
10106048:	14800115 	stw	r18,4(r2)
1010604c:	11000215 	stw	r4,8(r2)
10106050:	89801a04 	addi	r6,r17,104
10106054:	000b883a 	mov	r5,zero
10106058:	0107a9c0 	call	10107a9c <memset>
1010605c:	8005883a 	mov	r2,r16
10106060:	dfc00317 	ldw	ra,12(sp)
10106064:	dc800217 	ldw	r18,8(sp)
10106068:	dc400117 	ldw	r17,4(sp)
1010606c:	dc000017 	ldw	r16,0(sp)
10106070:	dec00404 	addi	sp,sp,16
10106074:	f800283a 	ret

10106078 <__sfp>:
10106078:	defffb04 	addi	sp,sp,-20
1010607c:	dc000015 	stw	r16,0(sp)
10106080:	04040474 	movhi	r16,4113
10106084:	840b1b04 	addi	r16,r16,11372
10106088:	dcc00315 	stw	r19,12(sp)
1010608c:	2027883a 	mov	r19,r4
10106090:	81000017 	ldw	r4,0(r16)
10106094:	dfc00415 	stw	ra,16(sp)
10106098:	dc800215 	stw	r18,8(sp)
1010609c:	20800e17 	ldw	r2,56(r4)
101060a0:	dc400115 	stw	r17,4(sp)
101060a4:	1000021e 	bne	r2,zero,101060b0 <__sfp+0x38>
101060a8:	0105e6c0 	call	10105e6c <__sinit.part.1>
101060ac:	81000017 	ldw	r4,0(r16)
101060b0:	2480b804 	addi	r18,r4,736
101060b4:	047fffc4 	movi	r17,-1
101060b8:	91000117 	ldw	r4,4(r18)
101060bc:	94000217 	ldw	r16,8(r18)
101060c0:	213fffc4 	addi	r4,r4,-1
101060c4:	20000a16 	blt	r4,zero,101060f0 <__sfp+0x78>
101060c8:	8080030f 	ldh	r2,12(r16)
101060cc:	10000c26 	beq	r2,zero,10106100 <__sfp+0x88>
101060d0:	80c01d04 	addi	r3,r16,116
101060d4:	00000206 	br	101060e0 <__sfp+0x68>
101060d8:	18bfe60f 	ldh	r2,-104(r3)
101060dc:	10000826 	beq	r2,zero,10106100 <__sfp+0x88>
101060e0:	213fffc4 	addi	r4,r4,-1
101060e4:	1c3ffd04 	addi	r16,r3,-12
101060e8:	18c01a04 	addi	r3,r3,104
101060ec:	247ffa1e 	bne	r4,r17,101060d8 <__sfp+0x60>
101060f0:	90800017 	ldw	r2,0(r18)
101060f4:	10001d26 	beq	r2,zero,1010616c <__sfp+0xf4>
101060f8:	1025883a 	mov	r18,r2
101060fc:	003fee06 	br	101060b8 <__sfp+0x40>
10106100:	00bfffc4 	movi	r2,-1
10106104:	8080038d 	sth	r2,14(r16)
10106108:	00800044 	movi	r2,1
1010610c:	8080030d 	sth	r2,12(r16)
10106110:	80001915 	stw	zero,100(r16)
10106114:	80000015 	stw	zero,0(r16)
10106118:	80000215 	stw	zero,8(r16)
1010611c:	80000115 	stw	zero,4(r16)
10106120:	80000415 	stw	zero,16(r16)
10106124:	80000515 	stw	zero,20(r16)
10106128:	80000615 	stw	zero,24(r16)
1010612c:	01800204 	movi	r6,8
10106130:	000b883a 	mov	r5,zero
10106134:	81001704 	addi	r4,r16,92
10106138:	0107a9c0 	call	10107a9c <memset>
1010613c:	8005883a 	mov	r2,r16
10106140:	80000c15 	stw	zero,48(r16)
10106144:	80000d15 	stw	zero,52(r16)
10106148:	80001115 	stw	zero,68(r16)
1010614c:	80001215 	stw	zero,72(r16)
10106150:	dfc00417 	ldw	ra,16(sp)
10106154:	dcc00317 	ldw	r19,12(sp)
10106158:	dc800217 	ldw	r18,8(sp)
1010615c:	dc400117 	ldw	r17,4(sp)
10106160:	dc000017 	ldw	r16,0(sp)
10106164:	dec00504 	addi	sp,sp,20
10106168:	f800283a 	ret
1010616c:	01400104 	movi	r5,4
10106170:	9809883a 	mov	r4,r19
10106174:	01060100 	call	10106010 <__sfmoreglue>
10106178:	90800015 	stw	r2,0(r18)
1010617c:	103fde1e 	bne	r2,zero,101060f8 <__sfp+0x80>
10106180:	00800304 	movi	r2,12
10106184:	98800015 	stw	r2,0(r19)
10106188:	0005883a 	mov	r2,zero
1010618c:	003ff006 	br	10106150 <__sfp+0xd8>

10106190 <_cleanup>:
10106190:	00840474 	movhi	r2,4113
10106194:	108b1b04 	addi	r2,r2,11372
10106198:	11000017 	ldw	r4,0(r2)
1010619c:	01440474 	movhi	r5,4113
101061a0:	296ba104 	addi	r5,r5,-20860
101061a4:	0106bac1 	jmpi	10106bac <_fwalk_reent>

101061a8 <__sinit>:
101061a8:	20800e17 	ldw	r2,56(r4)
101061ac:	10000126 	beq	r2,zero,101061b4 <__sinit+0xc>
101061b0:	f800283a 	ret
101061b4:	0105e6c1 	jmpi	10105e6c <__sinit.part.1>

101061b8 <__sfp_lock_acquire>:
101061b8:	f800283a 	ret

101061bc <__sfp_lock_release>:
101061bc:	f800283a 	ret

101061c0 <__sinit_lock_acquire>:
101061c0:	f800283a 	ret

101061c4 <__sinit_lock_release>:
101061c4:	f800283a 	ret

101061c8 <__fp_lock_all>:
101061c8:	00840474 	movhi	r2,4113
101061cc:	108b1c04 	addi	r2,r2,11376
101061d0:	11000017 	ldw	r4,0(r2)
101061d4:	01440434 	movhi	r5,4112
101061d8:	29580204 	addi	r5,r5,24584
101061dc:	0106ae81 	jmpi	10106ae8 <_fwalk>

101061e0 <__fp_unlock_all>:
101061e0:	00840474 	movhi	r2,4113
101061e4:	108b1c04 	addi	r2,r2,11376
101061e8:	11000017 	ldw	r4,0(r2)
101061ec:	01440434 	movhi	r5,4112
101061f0:	29579604 	addi	r5,r5,24152
101061f4:	0106ae81 	jmpi	10106ae8 <_fwalk>

101061f8 <_malloc_trim_r>:
101061f8:	defffb04 	addi	sp,sp,-20
101061fc:	dcc00315 	stw	r19,12(sp)
10106200:	04c40474 	movhi	r19,4113
10106204:	dc800215 	stw	r18,8(sp)
10106208:	dc400115 	stw	r17,4(sp)
1010620c:	dc000015 	stw	r16,0(sp)
10106210:	dfc00415 	stw	ra,16(sp)
10106214:	2821883a 	mov	r16,r5
10106218:	9cc59704 	addi	r19,r19,5724
1010621c:	2025883a 	mov	r18,r4
10106220:	010eb7c0 	call	1010eb7c <__malloc_lock>
10106224:	98800217 	ldw	r2,8(r19)
10106228:	14400117 	ldw	r17,4(r2)
1010622c:	00bfff04 	movi	r2,-4
10106230:	88a2703a 	and	r17,r17,r2
10106234:	8c21c83a 	sub	r16,r17,r16
10106238:	8403fbc4 	addi	r16,r16,4079
1010623c:	8020d33a 	srli	r16,r16,12
10106240:	0083ffc4 	movi	r2,4095
10106244:	843fffc4 	addi	r16,r16,-1
10106248:	8020933a 	slli	r16,r16,12
1010624c:	1400060e 	bge	r2,r16,10106268 <_malloc_trim_r+0x70>
10106250:	000b883a 	mov	r5,zero
10106254:	9009883a 	mov	r4,r18
10106258:	01093000 	call	10109300 <_sbrk_r>
1010625c:	98c00217 	ldw	r3,8(r19)
10106260:	1c47883a 	add	r3,r3,r17
10106264:	10c00a26 	beq	r2,r3,10106290 <_malloc_trim_r+0x98>
10106268:	9009883a 	mov	r4,r18
1010626c:	010eba00 	call	1010eba0 <__malloc_unlock>
10106270:	0005883a 	mov	r2,zero
10106274:	dfc00417 	ldw	ra,16(sp)
10106278:	dcc00317 	ldw	r19,12(sp)
1010627c:	dc800217 	ldw	r18,8(sp)
10106280:	dc400117 	ldw	r17,4(sp)
10106284:	dc000017 	ldw	r16,0(sp)
10106288:	dec00504 	addi	sp,sp,20
1010628c:	f800283a 	ret
10106290:	040bc83a 	sub	r5,zero,r16
10106294:	9009883a 	mov	r4,r18
10106298:	01093000 	call	10109300 <_sbrk_r>
1010629c:	00ffffc4 	movi	r3,-1
101062a0:	10c00d26 	beq	r2,r3,101062d8 <_malloc_trim_r+0xe0>
101062a4:	00c40474 	movhi	r3,4113
101062a8:	18d1f404 	addi	r3,r3,18384
101062ac:	18800017 	ldw	r2,0(r3)
101062b0:	99000217 	ldw	r4,8(r19)
101062b4:	8c23c83a 	sub	r17,r17,r16
101062b8:	8c400054 	ori	r17,r17,1
101062bc:	1421c83a 	sub	r16,r2,r16
101062c0:	24400115 	stw	r17,4(r4)
101062c4:	9009883a 	mov	r4,r18
101062c8:	1c000015 	stw	r16,0(r3)
101062cc:	010eba00 	call	1010eba0 <__malloc_unlock>
101062d0:	00800044 	movi	r2,1
101062d4:	003fe706 	br	10106274 <_malloc_trim_r+0x7c>
101062d8:	000b883a 	mov	r5,zero
101062dc:	9009883a 	mov	r4,r18
101062e0:	01093000 	call	10109300 <_sbrk_r>
101062e4:	99000217 	ldw	r4,8(r19)
101062e8:	014003c4 	movi	r5,15
101062ec:	1107c83a 	sub	r3,r2,r4
101062f0:	28ffdd0e 	bge	r5,r3,10106268 <_malloc_trim_r+0x70>
101062f4:	01440474 	movhi	r5,4113
101062f8:	294b1e04 	addi	r5,r5,11384
101062fc:	29400017 	ldw	r5,0(r5)
10106300:	18c00054 	ori	r3,r3,1
10106304:	20c00115 	stw	r3,4(r4)
10106308:	00c40474 	movhi	r3,4113
1010630c:	1145c83a 	sub	r2,r2,r5
10106310:	18d1f404 	addi	r3,r3,18384
10106314:	18800015 	stw	r2,0(r3)
10106318:	003fd306 	br	10106268 <_malloc_trim_r+0x70>

1010631c <_free_r>:
1010631c:	28004126 	beq	r5,zero,10106424 <_free_r+0x108>
10106320:	defffd04 	addi	sp,sp,-12
10106324:	dc400115 	stw	r17,4(sp)
10106328:	dc000015 	stw	r16,0(sp)
1010632c:	2023883a 	mov	r17,r4
10106330:	2821883a 	mov	r16,r5
10106334:	dfc00215 	stw	ra,8(sp)
10106338:	010eb7c0 	call	1010eb7c <__malloc_lock>
1010633c:	81ffff17 	ldw	r7,-4(r16)
10106340:	00bfff84 	movi	r2,-2
10106344:	01040474 	movhi	r4,4113
10106348:	81bffe04 	addi	r6,r16,-8
1010634c:	3884703a 	and	r2,r7,r2
10106350:	21059704 	addi	r4,r4,5724
10106354:	308b883a 	add	r5,r6,r2
10106358:	2a400117 	ldw	r9,4(r5)
1010635c:	22000217 	ldw	r8,8(r4)
10106360:	00ffff04 	movi	r3,-4
10106364:	48c6703a 	and	r3,r9,r3
10106368:	2a005726 	beq	r5,r8,101064c8 <_free_r+0x1ac>
1010636c:	28c00115 	stw	r3,4(r5)
10106370:	39c0004c 	andi	r7,r7,1
10106374:	3800091e 	bne	r7,zero,1010639c <_free_r+0x80>
10106378:	823ffe17 	ldw	r8,-8(r16)
1010637c:	22400204 	addi	r9,r4,8
10106380:	320dc83a 	sub	r6,r6,r8
10106384:	31c00217 	ldw	r7,8(r6)
10106388:	1205883a 	add	r2,r2,r8
1010638c:	3a406526 	beq	r7,r9,10106524 <_free_r+0x208>
10106390:	32000317 	ldw	r8,12(r6)
10106394:	3a000315 	stw	r8,12(r7)
10106398:	41c00215 	stw	r7,8(r8)
1010639c:	28cf883a 	add	r7,r5,r3
101063a0:	39c00117 	ldw	r7,4(r7)
101063a4:	39c0004c 	andi	r7,r7,1
101063a8:	38003a26 	beq	r7,zero,10106494 <_free_r+0x178>
101063ac:	10c00054 	ori	r3,r2,1
101063b0:	30c00115 	stw	r3,4(r6)
101063b4:	3087883a 	add	r3,r6,r2
101063b8:	18800015 	stw	r2,0(r3)
101063bc:	00c07fc4 	movi	r3,511
101063c0:	18801936 	bltu	r3,r2,10106428 <_free_r+0x10c>
101063c4:	1004d0fa 	srli	r2,r2,3
101063c8:	01c00044 	movi	r7,1
101063cc:	21400117 	ldw	r5,4(r4)
101063d0:	10c00044 	addi	r3,r2,1
101063d4:	18c7883a 	add	r3,r3,r3
101063d8:	1005d0ba 	srai	r2,r2,2
101063dc:	18c7883a 	add	r3,r3,r3
101063e0:	18c7883a 	add	r3,r3,r3
101063e4:	1907883a 	add	r3,r3,r4
101063e8:	3884983a 	sll	r2,r7,r2
101063ec:	19c00017 	ldw	r7,0(r3)
101063f0:	1a3ffe04 	addi	r8,r3,-8
101063f4:	1144b03a 	or	r2,r2,r5
101063f8:	32000315 	stw	r8,12(r6)
101063fc:	31c00215 	stw	r7,8(r6)
10106400:	20800115 	stw	r2,4(r4)
10106404:	19800015 	stw	r6,0(r3)
10106408:	39800315 	stw	r6,12(r7)
1010640c:	8809883a 	mov	r4,r17
10106410:	dfc00217 	ldw	ra,8(sp)
10106414:	dc400117 	ldw	r17,4(sp)
10106418:	dc000017 	ldw	r16,0(sp)
1010641c:	dec00304 	addi	sp,sp,12
10106420:	010eba01 	jmpi	1010eba0 <__malloc_unlock>
10106424:	f800283a 	ret
10106428:	100ad27a 	srli	r5,r2,9
1010642c:	00c00104 	movi	r3,4
10106430:	19404a36 	bltu	r3,r5,1010655c <_free_r+0x240>
10106434:	100ad1ba 	srli	r5,r2,6
10106438:	28c00e44 	addi	r3,r5,57
1010643c:	18c7883a 	add	r3,r3,r3
10106440:	29400e04 	addi	r5,r5,56
10106444:	18c7883a 	add	r3,r3,r3
10106448:	18c7883a 	add	r3,r3,r3
1010644c:	1909883a 	add	r4,r3,r4
10106450:	20c00017 	ldw	r3,0(r4)
10106454:	01c40474 	movhi	r7,4113
10106458:	213ffe04 	addi	r4,r4,-8
1010645c:	39c59704 	addi	r7,r7,5724
10106460:	20c04426 	beq	r4,r3,10106574 <_free_r+0x258>
10106464:	01ffff04 	movi	r7,-4
10106468:	19400117 	ldw	r5,4(r3)
1010646c:	29ca703a 	and	r5,r5,r7
10106470:	1140022e 	bgeu	r2,r5,1010647c <_free_r+0x160>
10106474:	18c00217 	ldw	r3,8(r3)
10106478:	20fffb1e 	bne	r4,r3,10106468 <_free_r+0x14c>
1010647c:	19000317 	ldw	r4,12(r3)
10106480:	31000315 	stw	r4,12(r6)
10106484:	30c00215 	stw	r3,8(r6)
10106488:	21800215 	stw	r6,8(r4)
1010648c:	19800315 	stw	r6,12(r3)
10106490:	003fde06 	br	1010640c <_free_r+0xf0>
10106494:	29c00217 	ldw	r7,8(r5)
10106498:	10c5883a 	add	r2,r2,r3
1010649c:	00c40474 	movhi	r3,4113
101064a0:	18c59904 	addi	r3,r3,5732
101064a4:	38c03b26 	beq	r7,r3,10106594 <_free_r+0x278>
101064a8:	2a000317 	ldw	r8,12(r5)
101064ac:	11400054 	ori	r5,r2,1
101064b0:	3087883a 	add	r3,r6,r2
101064b4:	3a000315 	stw	r8,12(r7)
101064b8:	41c00215 	stw	r7,8(r8)
101064bc:	31400115 	stw	r5,4(r6)
101064c0:	18800015 	stw	r2,0(r3)
101064c4:	003fbd06 	br	101063bc <_free_r+0xa0>
101064c8:	39c0004c 	andi	r7,r7,1
101064cc:	10c5883a 	add	r2,r2,r3
101064d0:	3800071e 	bne	r7,zero,101064f0 <_free_r+0x1d4>
101064d4:	81fffe17 	ldw	r7,-8(r16)
101064d8:	31cdc83a 	sub	r6,r6,r7
101064dc:	30c00317 	ldw	r3,12(r6)
101064e0:	31400217 	ldw	r5,8(r6)
101064e4:	11c5883a 	add	r2,r2,r7
101064e8:	28c00315 	stw	r3,12(r5)
101064ec:	19400215 	stw	r5,8(r3)
101064f0:	10c00054 	ori	r3,r2,1
101064f4:	30c00115 	stw	r3,4(r6)
101064f8:	00c40474 	movhi	r3,4113
101064fc:	18cb1f04 	addi	r3,r3,11388
10106500:	18c00017 	ldw	r3,0(r3)
10106504:	21800215 	stw	r6,8(r4)
10106508:	10ffc036 	bltu	r2,r3,1010640c <_free_r+0xf0>
1010650c:	00840474 	movhi	r2,4113
10106510:	1091eb04 	addi	r2,r2,18348
10106514:	11400017 	ldw	r5,0(r2)
10106518:	8809883a 	mov	r4,r17
1010651c:	01061f80 	call	101061f8 <_malloc_trim_r>
10106520:	003fba06 	br	1010640c <_free_r+0xf0>
10106524:	28c9883a 	add	r4,r5,r3
10106528:	21000117 	ldw	r4,4(r4)
1010652c:	2100004c 	andi	r4,r4,1
10106530:	2000391e 	bne	r4,zero,10106618 <_free_r+0x2fc>
10106534:	29c00217 	ldw	r7,8(r5)
10106538:	29000317 	ldw	r4,12(r5)
1010653c:	1885883a 	add	r2,r3,r2
10106540:	10c00054 	ori	r3,r2,1
10106544:	39000315 	stw	r4,12(r7)
10106548:	21c00215 	stw	r7,8(r4)
1010654c:	30c00115 	stw	r3,4(r6)
10106550:	308d883a 	add	r6,r6,r2
10106554:	30800015 	stw	r2,0(r6)
10106558:	003fac06 	br	1010640c <_free_r+0xf0>
1010655c:	00c00504 	movi	r3,20
10106560:	19401536 	bltu	r3,r5,101065b8 <_free_r+0x29c>
10106564:	28c01704 	addi	r3,r5,92
10106568:	18c7883a 	add	r3,r3,r3
1010656c:	294016c4 	addi	r5,r5,91
10106570:	003fb406 	br	10106444 <_free_r+0x128>
10106574:	280bd0ba 	srai	r5,r5,2
10106578:	00c00044 	movi	r3,1
1010657c:	38800117 	ldw	r2,4(r7)
10106580:	194a983a 	sll	r5,r3,r5
10106584:	2007883a 	mov	r3,r4
10106588:	2884b03a 	or	r2,r5,r2
1010658c:	38800115 	stw	r2,4(r7)
10106590:	003fbb06 	br	10106480 <_free_r+0x164>
10106594:	21800515 	stw	r6,20(r4)
10106598:	21800415 	stw	r6,16(r4)
1010659c:	10c00054 	ori	r3,r2,1
101065a0:	31c00315 	stw	r7,12(r6)
101065a4:	31c00215 	stw	r7,8(r6)
101065a8:	30c00115 	stw	r3,4(r6)
101065ac:	308d883a 	add	r6,r6,r2
101065b0:	30800015 	stw	r2,0(r6)
101065b4:	003f9506 	br	1010640c <_free_r+0xf0>
101065b8:	00c01504 	movi	r3,84
101065bc:	19400536 	bltu	r3,r5,101065d4 <_free_r+0x2b8>
101065c0:	100ad33a 	srli	r5,r2,12
101065c4:	28c01bc4 	addi	r3,r5,111
101065c8:	18c7883a 	add	r3,r3,r3
101065cc:	29401b84 	addi	r5,r5,110
101065d0:	003f9c06 	br	10106444 <_free_r+0x128>
101065d4:	00c05504 	movi	r3,340
101065d8:	19400536 	bltu	r3,r5,101065f0 <_free_r+0x2d4>
101065dc:	100ad3fa 	srli	r5,r2,15
101065e0:	28c01e04 	addi	r3,r5,120
101065e4:	18c7883a 	add	r3,r3,r3
101065e8:	29401dc4 	addi	r5,r5,119
101065ec:	003f9506 	br	10106444 <_free_r+0x128>
101065f0:	00c15504 	movi	r3,1364
101065f4:	19400536 	bltu	r3,r5,1010660c <_free_r+0x2f0>
101065f8:	100ad4ba 	srli	r5,r2,18
101065fc:	28c01f44 	addi	r3,r5,125
10106600:	18c7883a 	add	r3,r3,r3
10106604:	29401f04 	addi	r5,r5,124
10106608:	003f8e06 	br	10106444 <_free_r+0x128>
1010660c:	00c03f84 	movi	r3,254
10106610:	01401f84 	movi	r5,126
10106614:	003f8b06 	br	10106444 <_free_r+0x128>
10106618:	10c00054 	ori	r3,r2,1
1010661c:	30c00115 	stw	r3,4(r6)
10106620:	308d883a 	add	r6,r6,r2
10106624:	30800015 	stw	r2,0(r6)
10106628:	003f7806 	br	1010640c <_free_r+0xf0>

1010662c <__sfvwrite_r>:
1010662c:	30800217 	ldw	r2,8(r6)
10106630:	10006726 	beq	r2,zero,101067d0 <__sfvwrite_r+0x1a4>
10106634:	28c0030b 	ldhu	r3,12(r5)
10106638:	defff404 	addi	sp,sp,-48
1010663c:	dd400715 	stw	r21,28(sp)
10106640:	dd000615 	stw	r20,24(sp)
10106644:	dc000215 	stw	r16,8(sp)
10106648:	dfc00b15 	stw	ra,44(sp)
1010664c:	df000a15 	stw	fp,40(sp)
10106650:	ddc00915 	stw	r23,36(sp)
10106654:	dd800815 	stw	r22,32(sp)
10106658:	dcc00515 	stw	r19,20(sp)
1010665c:	dc800415 	stw	r18,16(sp)
10106660:	dc400315 	stw	r17,12(sp)
10106664:	1880020c 	andi	r2,r3,8
10106668:	2821883a 	mov	r16,r5
1010666c:	202b883a 	mov	r21,r4
10106670:	3029883a 	mov	r20,r6
10106674:	10002726 	beq	r2,zero,10106714 <__sfvwrite_r+0xe8>
10106678:	28800417 	ldw	r2,16(r5)
1010667c:	10002526 	beq	r2,zero,10106714 <__sfvwrite_r+0xe8>
10106680:	1880008c 	andi	r2,r3,2
10106684:	a4400017 	ldw	r17,0(r20)
10106688:	10002a26 	beq	r2,zero,10106734 <__sfvwrite_r+0x108>
1010668c:	05a00034 	movhi	r22,32768
10106690:	0027883a 	mov	r19,zero
10106694:	0025883a 	mov	r18,zero
10106698:	b5bf0004 	addi	r22,r22,-1024
1010669c:	980d883a 	mov	r6,r19
101066a0:	a809883a 	mov	r4,r21
101066a4:	90004626 	beq	r18,zero,101067c0 <__sfvwrite_r+0x194>
101066a8:	900f883a 	mov	r7,r18
101066ac:	b480022e 	bgeu	r22,r18,101066b8 <__sfvwrite_r+0x8c>
101066b0:	01e00034 	movhi	r7,32768
101066b4:	39ff0004 	addi	r7,r7,-1024
101066b8:	80800917 	ldw	r2,36(r16)
101066bc:	81400717 	ldw	r5,28(r16)
101066c0:	103ee83a 	callr	r2
101066c4:	0080570e 	bge	zero,r2,10106824 <__sfvwrite_r+0x1f8>
101066c8:	a0c00217 	ldw	r3,8(r20)
101066cc:	98a7883a 	add	r19,r19,r2
101066d0:	90a5c83a 	sub	r18,r18,r2
101066d4:	1885c83a 	sub	r2,r3,r2
101066d8:	a0800215 	stw	r2,8(r20)
101066dc:	103fef1e 	bne	r2,zero,1010669c <__sfvwrite_r+0x70>
101066e0:	0005883a 	mov	r2,zero
101066e4:	dfc00b17 	ldw	ra,44(sp)
101066e8:	df000a17 	ldw	fp,40(sp)
101066ec:	ddc00917 	ldw	r23,36(sp)
101066f0:	dd800817 	ldw	r22,32(sp)
101066f4:	dd400717 	ldw	r21,28(sp)
101066f8:	dd000617 	ldw	r20,24(sp)
101066fc:	dcc00517 	ldw	r19,20(sp)
10106700:	dc800417 	ldw	r18,16(sp)
10106704:	dc400317 	ldw	r17,12(sp)
10106708:	dc000217 	ldw	r16,8(sp)
1010670c:	dec00c04 	addi	sp,sp,48
10106710:	f800283a 	ret
10106714:	800b883a 	mov	r5,r16
10106718:	a809883a 	mov	r4,r21
1010671c:	01041d40 	call	101041d4 <__swsetup_r>
10106720:	1000eb1e 	bne	r2,zero,10106ad0 <__sfvwrite_r+0x4a4>
10106724:	80c0030b 	ldhu	r3,12(r16)
10106728:	a4400017 	ldw	r17,0(r20)
1010672c:	1880008c 	andi	r2,r3,2
10106730:	103fd61e 	bne	r2,zero,1010668c <__sfvwrite_r+0x60>
10106734:	1880004c 	andi	r2,r3,1
10106738:	10003f1e 	bne	r2,zero,10106838 <__sfvwrite_r+0x20c>
1010673c:	0039883a 	mov	fp,zero
10106740:	0025883a 	mov	r18,zero
10106744:	90001a26 	beq	r18,zero,101067b0 <__sfvwrite_r+0x184>
10106748:	1880800c 	andi	r2,r3,512
1010674c:	84c00217 	ldw	r19,8(r16)
10106750:	10002126 	beq	r2,zero,101067d8 <__sfvwrite_r+0x1ac>
10106754:	982f883a 	mov	r23,r19
10106758:	94c09336 	bltu	r18,r19,101069a8 <__sfvwrite_r+0x37c>
1010675c:	1881200c 	andi	r2,r3,1152
10106760:	10009e1e 	bne	r2,zero,101069dc <__sfvwrite_r+0x3b0>
10106764:	81000017 	ldw	r4,0(r16)
10106768:	b80d883a 	mov	r6,r23
1010676c:	e00b883a 	mov	r5,fp
10106770:	01079400 	call	10107940 <memmove>
10106774:	80c00217 	ldw	r3,8(r16)
10106778:	81000017 	ldw	r4,0(r16)
1010677c:	9005883a 	mov	r2,r18
10106780:	1ce7c83a 	sub	r19,r3,r19
10106784:	25cf883a 	add	r7,r4,r23
10106788:	84c00215 	stw	r19,8(r16)
1010678c:	81c00015 	stw	r7,0(r16)
10106790:	a0c00217 	ldw	r3,8(r20)
10106794:	e0b9883a 	add	fp,fp,r2
10106798:	90a5c83a 	sub	r18,r18,r2
1010679c:	18a7c83a 	sub	r19,r3,r2
101067a0:	a4c00215 	stw	r19,8(r20)
101067a4:	983fce26 	beq	r19,zero,101066e0 <__sfvwrite_r+0xb4>
101067a8:	80c0030b 	ldhu	r3,12(r16)
101067ac:	903fe61e 	bne	r18,zero,10106748 <__sfvwrite_r+0x11c>
101067b0:	8f000017 	ldw	fp,0(r17)
101067b4:	8c800117 	ldw	r18,4(r17)
101067b8:	8c400204 	addi	r17,r17,8
101067bc:	003fe106 	br	10106744 <__sfvwrite_r+0x118>
101067c0:	8cc00017 	ldw	r19,0(r17)
101067c4:	8c800117 	ldw	r18,4(r17)
101067c8:	8c400204 	addi	r17,r17,8
101067cc:	003fb306 	br	1010669c <__sfvwrite_r+0x70>
101067d0:	0005883a 	mov	r2,zero
101067d4:	f800283a 	ret
101067d8:	81000017 	ldw	r4,0(r16)
101067dc:	80800417 	ldw	r2,16(r16)
101067e0:	11005736 	bltu	r2,r4,10106940 <__sfvwrite_r+0x314>
101067e4:	85c00517 	ldw	r23,20(r16)
101067e8:	95c05536 	bltu	r18,r23,10106940 <__sfvwrite_r+0x314>
101067ec:	00a00034 	movhi	r2,32768
101067f0:	10bfffc4 	addi	r2,r2,-1
101067f4:	9009883a 	mov	r4,r18
101067f8:	1480012e 	bgeu	r2,r18,10106800 <__sfvwrite_r+0x1d4>
101067fc:	1009883a 	mov	r4,r2
10106800:	b80b883a 	mov	r5,r23
10106804:	0101b580 	call	10101b58 <__divsi3>
10106808:	15cf383a 	mul	r7,r2,r23
1010680c:	81400717 	ldw	r5,28(r16)
10106810:	80800917 	ldw	r2,36(r16)
10106814:	e00d883a 	mov	r6,fp
10106818:	a809883a 	mov	r4,r21
1010681c:	103ee83a 	callr	r2
10106820:	00bfdb16 	blt	zero,r2,10106790 <__sfvwrite_r+0x164>
10106824:	8080030b 	ldhu	r2,12(r16)
10106828:	10801014 	ori	r2,r2,64
1010682c:	8080030d 	sth	r2,12(r16)
10106830:	00bfffc4 	movi	r2,-1
10106834:	003fab06 	br	101066e4 <__sfvwrite_r+0xb8>
10106838:	0027883a 	mov	r19,zero
1010683c:	0011883a 	mov	r8,zero
10106840:	0039883a 	mov	fp,zero
10106844:	0025883a 	mov	r18,zero
10106848:	90001f26 	beq	r18,zero,101068c8 <__sfvwrite_r+0x29c>
1010684c:	40005a26 	beq	r8,zero,101069b8 <__sfvwrite_r+0x38c>
10106850:	982d883a 	mov	r22,r19
10106854:	94c0012e 	bgeu	r18,r19,1010685c <__sfvwrite_r+0x230>
10106858:	902d883a 	mov	r22,r18
1010685c:	81000017 	ldw	r4,0(r16)
10106860:	80800417 	ldw	r2,16(r16)
10106864:	b02f883a 	mov	r23,r22
10106868:	81c00517 	ldw	r7,20(r16)
1010686c:	1100032e 	bgeu	r2,r4,1010687c <__sfvwrite_r+0x250>
10106870:	80c00217 	ldw	r3,8(r16)
10106874:	38c7883a 	add	r3,r7,r3
10106878:	1d801816 	blt	r3,r22,101068dc <__sfvwrite_r+0x2b0>
1010687c:	b1c03e16 	blt	r22,r7,10106978 <__sfvwrite_r+0x34c>
10106880:	80800917 	ldw	r2,36(r16)
10106884:	81400717 	ldw	r5,28(r16)
10106888:	e00d883a 	mov	r6,fp
1010688c:	da000115 	stw	r8,4(sp)
10106890:	a809883a 	mov	r4,r21
10106894:	103ee83a 	callr	r2
10106898:	102f883a 	mov	r23,r2
1010689c:	da000117 	ldw	r8,4(sp)
101068a0:	00bfe00e 	bge	zero,r2,10106824 <__sfvwrite_r+0x1f8>
101068a4:	9de7c83a 	sub	r19,r19,r23
101068a8:	98001f26 	beq	r19,zero,10106928 <__sfvwrite_r+0x2fc>
101068ac:	a0800217 	ldw	r2,8(r20)
101068b0:	e5f9883a 	add	fp,fp,r23
101068b4:	95e5c83a 	sub	r18,r18,r23
101068b8:	15efc83a 	sub	r23,r2,r23
101068bc:	a5c00215 	stw	r23,8(r20)
101068c0:	b83f8726 	beq	r23,zero,101066e0 <__sfvwrite_r+0xb4>
101068c4:	903fe11e 	bne	r18,zero,1010684c <__sfvwrite_r+0x220>
101068c8:	8f000017 	ldw	fp,0(r17)
101068cc:	8c800117 	ldw	r18,4(r17)
101068d0:	0011883a 	mov	r8,zero
101068d4:	8c400204 	addi	r17,r17,8
101068d8:	003fdb06 	br	10106848 <__sfvwrite_r+0x21c>
101068dc:	180d883a 	mov	r6,r3
101068e0:	e00b883a 	mov	r5,fp
101068e4:	da000115 	stw	r8,4(sp)
101068e8:	d8c00015 	stw	r3,0(sp)
101068ec:	01079400 	call	10107940 <memmove>
101068f0:	d8c00017 	ldw	r3,0(sp)
101068f4:	80800017 	ldw	r2,0(r16)
101068f8:	800b883a 	mov	r5,r16
101068fc:	a809883a 	mov	r4,r21
10106900:	10c5883a 	add	r2,r2,r3
10106904:	80800015 	stw	r2,0(r16)
10106908:	d8c00015 	stw	r3,0(sp)
1010690c:	0105dcc0 	call	10105dcc <_fflush_r>
10106910:	d8c00017 	ldw	r3,0(sp)
10106914:	da000117 	ldw	r8,4(sp)
10106918:	103fc21e 	bne	r2,zero,10106824 <__sfvwrite_r+0x1f8>
1010691c:	182f883a 	mov	r23,r3
10106920:	9de7c83a 	sub	r19,r19,r23
10106924:	983fe11e 	bne	r19,zero,101068ac <__sfvwrite_r+0x280>
10106928:	800b883a 	mov	r5,r16
1010692c:	a809883a 	mov	r4,r21
10106930:	0105dcc0 	call	10105dcc <_fflush_r>
10106934:	103fbb1e 	bne	r2,zero,10106824 <__sfvwrite_r+0x1f8>
10106938:	0011883a 	mov	r8,zero
1010693c:	003fdb06 	br	101068ac <__sfvwrite_r+0x280>
10106940:	94c0012e 	bgeu	r18,r19,10106948 <__sfvwrite_r+0x31c>
10106944:	9027883a 	mov	r19,r18
10106948:	980d883a 	mov	r6,r19
1010694c:	e00b883a 	mov	r5,fp
10106950:	01079400 	call	10107940 <memmove>
10106954:	80800217 	ldw	r2,8(r16)
10106958:	80c00017 	ldw	r3,0(r16)
1010695c:	14c5c83a 	sub	r2,r2,r19
10106960:	1cc7883a 	add	r3,r3,r19
10106964:	80800215 	stw	r2,8(r16)
10106968:	80c00015 	stw	r3,0(r16)
1010696c:	10004326 	beq	r2,zero,10106a7c <__sfvwrite_r+0x450>
10106970:	9805883a 	mov	r2,r19
10106974:	003f8606 	br	10106790 <__sfvwrite_r+0x164>
10106978:	b00d883a 	mov	r6,r22
1010697c:	e00b883a 	mov	r5,fp
10106980:	da000115 	stw	r8,4(sp)
10106984:	01079400 	call	10107940 <memmove>
10106988:	80800217 	ldw	r2,8(r16)
1010698c:	80c00017 	ldw	r3,0(r16)
10106990:	da000117 	ldw	r8,4(sp)
10106994:	1585c83a 	sub	r2,r2,r22
10106998:	1dad883a 	add	r22,r3,r22
1010699c:	80800215 	stw	r2,8(r16)
101069a0:	85800015 	stw	r22,0(r16)
101069a4:	003fbf06 	br	101068a4 <__sfvwrite_r+0x278>
101069a8:	81000017 	ldw	r4,0(r16)
101069ac:	9027883a 	mov	r19,r18
101069b0:	902f883a 	mov	r23,r18
101069b4:	003f6c06 	br	10106768 <__sfvwrite_r+0x13c>
101069b8:	900d883a 	mov	r6,r18
101069bc:	01400284 	movi	r5,10
101069c0:	e009883a 	mov	r4,fp
101069c4:	01077140 	call	10107714 <memchr>
101069c8:	10003e26 	beq	r2,zero,10106ac4 <__sfvwrite_r+0x498>
101069cc:	10800044 	addi	r2,r2,1
101069d0:	1727c83a 	sub	r19,r2,fp
101069d4:	02000044 	movi	r8,1
101069d8:	003f9d06 	br	10106850 <__sfvwrite_r+0x224>
101069dc:	80800517 	ldw	r2,20(r16)
101069e0:	81400417 	ldw	r5,16(r16)
101069e4:	81c00017 	ldw	r7,0(r16)
101069e8:	10a7883a 	add	r19,r2,r2
101069ec:	9885883a 	add	r2,r19,r2
101069f0:	1026d7fa 	srli	r19,r2,31
101069f4:	396dc83a 	sub	r22,r7,r5
101069f8:	b1000044 	addi	r4,r22,1
101069fc:	9885883a 	add	r2,r19,r2
10106a00:	1027d07a 	srai	r19,r2,1
10106a04:	2485883a 	add	r2,r4,r18
10106a08:	980d883a 	mov	r6,r19
10106a0c:	9880022e 	bgeu	r19,r2,10106a18 <__sfvwrite_r+0x3ec>
10106a10:	1027883a 	mov	r19,r2
10106a14:	100d883a 	mov	r6,r2
10106a18:	18c1000c 	andi	r3,r3,1024
10106a1c:	18001c26 	beq	r3,zero,10106a90 <__sfvwrite_r+0x464>
10106a20:	300b883a 	mov	r5,r6
10106a24:	a809883a 	mov	r4,r21
10106a28:	0106f080 	call	10106f08 <_malloc_r>
10106a2c:	102f883a 	mov	r23,r2
10106a30:	10002926 	beq	r2,zero,10106ad8 <__sfvwrite_r+0x4ac>
10106a34:	81400417 	ldw	r5,16(r16)
10106a38:	b00d883a 	mov	r6,r22
10106a3c:	1009883a 	mov	r4,r2
10106a40:	01077f80 	call	101077f8 <memcpy>
10106a44:	8080030b 	ldhu	r2,12(r16)
10106a48:	00fedfc4 	movi	r3,-1153
10106a4c:	10c4703a 	and	r2,r2,r3
10106a50:	10802014 	ori	r2,r2,128
10106a54:	8080030d 	sth	r2,12(r16)
10106a58:	bd89883a 	add	r4,r23,r22
10106a5c:	9d8fc83a 	sub	r7,r19,r22
10106a60:	85c00415 	stw	r23,16(r16)
10106a64:	84c00515 	stw	r19,20(r16)
10106a68:	81000015 	stw	r4,0(r16)
10106a6c:	9027883a 	mov	r19,r18
10106a70:	81c00215 	stw	r7,8(r16)
10106a74:	902f883a 	mov	r23,r18
10106a78:	003f3b06 	br	10106768 <__sfvwrite_r+0x13c>
10106a7c:	800b883a 	mov	r5,r16
10106a80:	a809883a 	mov	r4,r21
10106a84:	0105dcc0 	call	10105dcc <_fflush_r>
10106a88:	103fb926 	beq	r2,zero,10106970 <__sfvwrite_r+0x344>
10106a8c:	003f6506 	br	10106824 <__sfvwrite_r+0x1f8>
10106a90:	a809883a 	mov	r4,r21
10106a94:	0108d280 	call	10108d28 <_realloc_r>
10106a98:	102f883a 	mov	r23,r2
10106a9c:	103fee1e 	bne	r2,zero,10106a58 <__sfvwrite_r+0x42c>
10106aa0:	81400417 	ldw	r5,16(r16)
10106aa4:	a809883a 	mov	r4,r21
10106aa8:	010631c0 	call	1010631c <_free_r>
10106aac:	8080030b 	ldhu	r2,12(r16)
10106ab0:	00ffdfc4 	movi	r3,-129
10106ab4:	1884703a 	and	r2,r3,r2
10106ab8:	00c00304 	movi	r3,12
10106abc:	a8c00015 	stw	r3,0(r21)
10106ac0:	003f5906 	br	10106828 <__sfvwrite_r+0x1fc>
10106ac4:	94c00044 	addi	r19,r18,1
10106ac8:	02000044 	movi	r8,1
10106acc:	003f6006 	br	10106850 <__sfvwrite_r+0x224>
10106ad0:	00bfffc4 	movi	r2,-1
10106ad4:	003f0306 	br	101066e4 <__sfvwrite_r+0xb8>
10106ad8:	00800304 	movi	r2,12
10106adc:	a8800015 	stw	r2,0(r21)
10106ae0:	8080030b 	ldhu	r2,12(r16)
10106ae4:	003f5006 	br	10106828 <__sfvwrite_r+0x1fc>

10106ae8 <_fwalk>:
10106ae8:	defff704 	addi	sp,sp,-36
10106aec:	dd000415 	stw	r20,16(sp)
10106af0:	dfc00815 	stw	ra,32(sp)
10106af4:	ddc00715 	stw	r23,28(sp)
10106af8:	dd800615 	stw	r22,24(sp)
10106afc:	dd400515 	stw	r21,20(sp)
10106b00:	dcc00315 	stw	r19,12(sp)
10106b04:	dc800215 	stw	r18,8(sp)
10106b08:	dc400115 	stw	r17,4(sp)
10106b0c:	dc000015 	stw	r16,0(sp)
10106b10:	2500b804 	addi	r20,r4,736
10106b14:	a0002326 	beq	r20,zero,10106ba4 <_fwalk+0xbc>
10106b18:	282b883a 	mov	r21,r5
10106b1c:	002f883a 	mov	r23,zero
10106b20:	05800044 	movi	r22,1
10106b24:	04ffffc4 	movi	r19,-1
10106b28:	a4400117 	ldw	r17,4(r20)
10106b2c:	a4800217 	ldw	r18,8(r20)
10106b30:	8c7fffc4 	addi	r17,r17,-1
10106b34:	88000d16 	blt	r17,zero,10106b6c <_fwalk+0x84>
10106b38:	94000304 	addi	r16,r18,12
10106b3c:	94800384 	addi	r18,r18,14
10106b40:	8080000b 	ldhu	r2,0(r16)
10106b44:	8c7fffc4 	addi	r17,r17,-1
10106b48:	813ffd04 	addi	r4,r16,-12
10106b4c:	b080042e 	bgeu	r22,r2,10106b60 <_fwalk+0x78>
10106b50:	9080000f 	ldh	r2,0(r18)
10106b54:	14c00226 	beq	r2,r19,10106b60 <_fwalk+0x78>
10106b58:	a83ee83a 	callr	r21
10106b5c:	b8aeb03a 	or	r23,r23,r2
10106b60:	84001a04 	addi	r16,r16,104
10106b64:	94801a04 	addi	r18,r18,104
10106b68:	8cfff51e 	bne	r17,r19,10106b40 <_fwalk+0x58>
10106b6c:	a5000017 	ldw	r20,0(r20)
10106b70:	a03fed1e 	bne	r20,zero,10106b28 <_fwalk+0x40>
10106b74:	b805883a 	mov	r2,r23
10106b78:	dfc00817 	ldw	ra,32(sp)
10106b7c:	ddc00717 	ldw	r23,28(sp)
10106b80:	dd800617 	ldw	r22,24(sp)
10106b84:	dd400517 	ldw	r21,20(sp)
10106b88:	dd000417 	ldw	r20,16(sp)
10106b8c:	dcc00317 	ldw	r19,12(sp)
10106b90:	dc800217 	ldw	r18,8(sp)
10106b94:	dc400117 	ldw	r17,4(sp)
10106b98:	dc000017 	ldw	r16,0(sp)
10106b9c:	dec00904 	addi	sp,sp,36
10106ba0:	f800283a 	ret
10106ba4:	002f883a 	mov	r23,zero
10106ba8:	003ff206 	br	10106b74 <_fwalk+0x8c>

10106bac <_fwalk_reent>:
10106bac:	defff704 	addi	sp,sp,-36
10106bb0:	dd000415 	stw	r20,16(sp)
10106bb4:	dfc00815 	stw	ra,32(sp)
10106bb8:	ddc00715 	stw	r23,28(sp)
10106bbc:	dd800615 	stw	r22,24(sp)
10106bc0:	dd400515 	stw	r21,20(sp)
10106bc4:	dcc00315 	stw	r19,12(sp)
10106bc8:	dc800215 	stw	r18,8(sp)
10106bcc:	dc400115 	stw	r17,4(sp)
10106bd0:	dc000015 	stw	r16,0(sp)
10106bd4:	2500b804 	addi	r20,r4,736
10106bd8:	a0002326 	beq	r20,zero,10106c68 <_fwalk_reent+0xbc>
10106bdc:	282b883a 	mov	r21,r5
10106be0:	2027883a 	mov	r19,r4
10106be4:	002f883a 	mov	r23,zero
10106be8:	05800044 	movi	r22,1
10106bec:	04bfffc4 	movi	r18,-1
10106bf0:	a4400117 	ldw	r17,4(r20)
10106bf4:	a4000217 	ldw	r16,8(r20)
10106bf8:	8c7fffc4 	addi	r17,r17,-1
10106bfc:	88000c16 	blt	r17,zero,10106c30 <_fwalk_reent+0x84>
10106c00:	84000304 	addi	r16,r16,12
10106c04:	8080000b 	ldhu	r2,0(r16)
10106c08:	8c7fffc4 	addi	r17,r17,-1
10106c0c:	817ffd04 	addi	r5,r16,-12
10106c10:	b080052e 	bgeu	r22,r2,10106c28 <_fwalk_reent+0x7c>
10106c14:	8080008f 	ldh	r2,2(r16)
10106c18:	9809883a 	mov	r4,r19
10106c1c:	14800226 	beq	r2,r18,10106c28 <_fwalk_reent+0x7c>
10106c20:	a83ee83a 	callr	r21
10106c24:	b8aeb03a 	or	r23,r23,r2
10106c28:	84001a04 	addi	r16,r16,104
10106c2c:	8cbff51e 	bne	r17,r18,10106c04 <_fwalk_reent+0x58>
10106c30:	a5000017 	ldw	r20,0(r20)
10106c34:	a03fee1e 	bne	r20,zero,10106bf0 <_fwalk_reent+0x44>
10106c38:	b805883a 	mov	r2,r23
10106c3c:	dfc00817 	ldw	ra,32(sp)
10106c40:	ddc00717 	ldw	r23,28(sp)
10106c44:	dd800617 	ldw	r22,24(sp)
10106c48:	dd400517 	ldw	r21,20(sp)
10106c4c:	dd000417 	ldw	r20,16(sp)
10106c50:	dcc00317 	ldw	r19,12(sp)
10106c54:	dc800217 	ldw	r18,8(sp)
10106c58:	dc400117 	ldw	r17,4(sp)
10106c5c:	dc000017 	ldw	r16,0(sp)
10106c60:	dec00904 	addi	sp,sp,36
10106c64:	f800283a 	ret
10106c68:	002f883a 	mov	r23,zero
10106c6c:	003ff206 	br	10106c38 <_fwalk_reent+0x8c>

10106c70 <_setlocale_r>:
10106c70:	30001b26 	beq	r6,zero,10106ce0 <_setlocale_r+0x70>
10106c74:	01440474 	movhi	r5,4113
10106c78:	defffe04 	addi	sp,sp,-8
10106c7c:	2943cf04 	addi	r5,r5,3900
10106c80:	3009883a 	mov	r4,r6
10106c84:	dc000015 	stw	r16,0(sp)
10106c88:	dfc00115 	stw	ra,4(sp)
10106c8c:	3021883a 	mov	r16,r6
10106c90:	01094900 	call	10109490 <strcmp>
10106c94:	1000061e 	bne	r2,zero,10106cb0 <_setlocale_r+0x40>
10106c98:	00840474 	movhi	r2,4113
10106c9c:	1083ce04 	addi	r2,r2,3896
10106ca0:	dfc00117 	ldw	ra,4(sp)
10106ca4:	dc000017 	ldw	r16,0(sp)
10106ca8:	dec00204 	addi	sp,sp,8
10106cac:	f800283a 	ret
10106cb0:	01440474 	movhi	r5,4113
10106cb4:	2943ce04 	addi	r5,r5,3896
10106cb8:	8009883a 	mov	r4,r16
10106cbc:	01094900 	call	10109490 <strcmp>
10106cc0:	103ff526 	beq	r2,zero,10106c98 <_setlocale_r+0x28>
10106cc4:	01440474 	movhi	r5,4113
10106cc8:	2943b904 	addi	r5,r5,3812
10106ccc:	8009883a 	mov	r4,r16
10106cd0:	01094900 	call	10109490 <strcmp>
10106cd4:	103ff026 	beq	r2,zero,10106c98 <_setlocale_r+0x28>
10106cd8:	0005883a 	mov	r2,zero
10106cdc:	003ff006 	br	10106ca0 <_setlocale_r+0x30>
10106ce0:	00840474 	movhi	r2,4113
10106ce4:	1083ce04 	addi	r2,r2,3896
10106ce8:	f800283a 	ret

10106cec <__locale_charset>:
10106cec:	00840474 	movhi	r2,4113
10106cf0:	10858104 	addi	r2,r2,5636
10106cf4:	f800283a 	ret

10106cf8 <__locale_mb_cur_max>:
10106cf8:	00840474 	movhi	r2,4113
10106cfc:	108b1d04 	addi	r2,r2,11380
10106d00:	10800017 	ldw	r2,0(r2)
10106d04:	f800283a 	ret

10106d08 <__locale_msgcharset>:
10106d08:	00840474 	movhi	r2,4113
10106d0c:	10857904 	addi	r2,r2,5604
10106d10:	f800283a 	ret

10106d14 <__locale_cjk_lang>:
10106d14:	0005883a 	mov	r2,zero
10106d18:	f800283a 	ret

10106d1c <_localeconv_r>:
10106d1c:	00840474 	movhi	r2,4113
10106d20:	10858904 	addi	r2,r2,5668
10106d24:	f800283a 	ret

10106d28 <setlocale>:
10106d28:	00840474 	movhi	r2,4113
10106d2c:	108b1c04 	addi	r2,r2,11376
10106d30:	280d883a 	mov	r6,r5
10106d34:	200b883a 	mov	r5,r4
10106d38:	11000017 	ldw	r4,0(r2)
10106d3c:	0106c701 	jmpi	10106c70 <_setlocale_r>

10106d40 <localeconv>:
10106d40:	00840474 	movhi	r2,4113
10106d44:	10858904 	addi	r2,r2,5668
10106d48:	f800283a 	ret

10106d4c <__smakebuf_r>:
10106d4c:	2880030b 	ldhu	r2,12(r5)
10106d50:	10c0008c 	andi	r3,r2,2
10106d54:	1800411e 	bne	r3,zero,10106e5c <__smakebuf_r+0x110>
10106d58:	deffec04 	addi	sp,sp,-80
10106d5c:	dc000f15 	stw	r16,60(sp)
10106d60:	2821883a 	mov	r16,r5
10106d64:	2940038f 	ldh	r5,14(r5)
10106d68:	dc401015 	stw	r17,64(sp)
10106d6c:	dfc01315 	stw	ra,76(sp)
10106d70:	dcc01215 	stw	r19,72(sp)
10106d74:	dc801115 	stw	r18,68(sp)
10106d78:	2023883a 	mov	r17,r4
10106d7c:	28001c16 	blt	r5,zero,10106df0 <__smakebuf_r+0xa4>
10106d80:	d80d883a 	mov	r6,sp
10106d84:	010b1900 	call	1010b190 <_fstat_r>
10106d88:	10001816 	blt	r2,zero,10106dec <__smakebuf_r+0xa0>
10106d8c:	d8800117 	ldw	r2,4(sp)
10106d90:	00e00014 	movui	r3,32768
10106d94:	10bc000c 	andi	r2,r2,61440
10106d98:	14c80020 	cmpeqi	r19,r2,8192
10106d9c:	10c03726 	beq	r2,r3,10106e7c <__smakebuf_r+0x130>
10106da0:	80c0030b 	ldhu	r3,12(r16)
10106da4:	18c20014 	ori	r3,r3,2048
10106da8:	80c0030d 	sth	r3,12(r16)
10106dac:	00c80004 	movi	r3,8192
10106db0:	10c0521e 	bne	r2,r3,10106efc <__smakebuf_r+0x1b0>
10106db4:	8140038f 	ldh	r5,14(r16)
10106db8:	8809883a 	mov	r4,r17
10106dbc:	010b1ec0 	call	1010b1ec <_isatty_r>
10106dc0:	10004c26 	beq	r2,zero,10106ef4 <__smakebuf_r+0x1a8>
10106dc4:	8080030b 	ldhu	r2,12(r16)
10106dc8:	80c010c4 	addi	r3,r16,67
10106dcc:	80c00015 	stw	r3,0(r16)
10106dd0:	10800054 	ori	r2,r2,1
10106dd4:	8080030d 	sth	r2,12(r16)
10106dd8:	00800044 	movi	r2,1
10106ddc:	80c00415 	stw	r3,16(r16)
10106de0:	80800515 	stw	r2,20(r16)
10106de4:	04810004 	movi	r18,1024
10106de8:	00000706 	br	10106e08 <__smakebuf_r+0xbc>
10106dec:	8080030b 	ldhu	r2,12(r16)
10106df0:	10c0200c 	andi	r3,r2,128
10106df4:	18001f1e 	bne	r3,zero,10106e74 <__smakebuf_r+0x128>
10106df8:	04810004 	movi	r18,1024
10106dfc:	10820014 	ori	r2,r2,2048
10106e00:	8080030d 	sth	r2,12(r16)
10106e04:	0027883a 	mov	r19,zero
10106e08:	900b883a 	mov	r5,r18
10106e0c:	8809883a 	mov	r4,r17
10106e10:	0106f080 	call	10106f08 <_malloc_r>
10106e14:	10002c26 	beq	r2,zero,10106ec8 <__smakebuf_r+0x17c>
10106e18:	80c0030b 	ldhu	r3,12(r16)
10106e1c:	01040434 	movhi	r4,4112
10106e20:	21179804 	addi	r4,r4,24160
10106e24:	89000f15 	stw	r4,60(r17)
10106e28:	18c02014 	ori	r3,r3,128
10106e2c:	80c0030d 	sth	r3,12(r16)
10106e30:	80800015 	stw	r2,0(r16)
10106e34:	80800415 	stw	r2,16(r16)
10106e38:	84800515 	stw	r18,20(r16)
10106e3c:	98001a1e 	bne	r19,zero,10106ea8 <__smakebuf_r+0x15c>
10106e40:	dfc01317 	ldw	ra,76(sp)
10106e44:	dcc01217 	ldw	r19,72(sp)
10106e48:	dc801117 	ldw	r18,68(sp)
10106e4c:	dc401017 	ldw	r17,64(sp)
10106e50:	dc000f17 	ldw	r16,60(sp)
10106e54:	dec01404 	addi	sp,sp,80
10106e58:	f800283a 	ret
10106e5c:	288010c4 	addi	r2,r5,67
10106e60:	28800015 	stw	r2,0(r5)
10106e64:	28800415 	stw	r2,16(r5)
10106e68:	00800044 	movi	r2,1
10106e6c:	28800515 	stw	r2,20(r5)
10106e70:	f800283a 	ret
10106e74:	04801004 	movi	r18,64
10106e78:	003fe006 	br	10106dfc <__smakebuf_r+0xb0>
10106e7c:	81000a17 	ldw	r4,40(r16)
10106e80:	00c40474 	movhi	r3,4113
10106e84:	18e50b04 	addi	r3,r3,-27604
10106e88:	20ffc51e 	bne	r4,r3,10106da0 <__smakebuf_r+0x54>
10106e8c:	8080030b 	ldhu	r2,12(r16)
10106e90:	04810004 	movi	r18,1024
10106e94:	84801315 	stw	r18,76(r16)
10106e98:	1484b03a 	or	r2,r2,r18
10106e9c:	8080030d 	sth	r2,12(r16)
10106ea0:	0027883a 	mov	r19,zero
10106ea4:	003fd806 	br	10106e08 <__smakebuf_r+0xbc>
10106ea8:	8140038f 	ldh	r5,14(r16)
10106eac:	8809883a 	mov	r4,r17
10106eb0:	010b1ec0 	call	1010b1ec <_isatty_r>
10106eb4:	103fe226 	beq	r2,zero,10106e40 <__smakebuf_r+0xf4>
10106eb8:	8080030b 	ldhu	r2,12(r16)
10106ebc:	10800054 	ori	r2,r2,1
10106ec0:	8080030d 	sth	r2,12(r16)
10106ec4:	003fde06 	br	10106e40 <__smakebuf_r+0xf4>
10106ec8:	8080030b 	ldhu	r2,12(r16)
10106ecc:	10c0800c 	andi	r3,r2,512
10106ed0:	183fdb1e 	bne	r3,zero,10106e40 <__smakebuf_r+0xf4>
10106ed4:	10800094 	ori	r2,r2,2
10106ed8:	80c010c4 	addi	r3,r16,67
10106edc:	8080030d 	sth	r2,12(r16)
10106ee0:	00800044 	movi	r2,1
10106ee4:	80c00015 	stw	r3,0(r16)
10106ee8:	80c00415 	stw	r3,16(r16)
10106eec:	80800515 	stw	r2,20(r16)
10106ef0:	003fd306 	br	10106e40 <__smakebuf_r+0xf4>
10106ef4:	04810004 	movi	r18,1024
10106ef8:	003fc306 	br	10106e08 <__smakebuf_r+0xbc>
10106efc:	0027883a 	mov	r19,zero
10106f00:	04810004 	movi	r18,1024
10106f04:	003fc006 	br	10106e08 <__smakebuf_r+0xbc>

10106f08 <_malloc_r>:
10106f08:	defff504 	addi	sp,sp,-44
10106f0c:	dc800315 	stw	r18,12(sp)
10106f10:	dfc00a15 	stw	ra,40(sp)
10106f14:	df000915 	stw	fp,36(sp)
10106f18:	ddc00815 	stw	r23,32(sp)
10106f1c:	dd800715 	stw	r22,28(sp)
10106f20:	dd400615 	stw	r21,24(sp)
10106f24:	dd000515 	stw	r20,20(sp)
10106f28:	dcc00415 	stw	r19,16(sp)
10106f2c:	dc400215 	stw	r17,8(sp)
10106f30:	dc000115 	stw	r16,4(sp)
10106f34:	288002c4 	addi	r2,r5,11
10106f38:	00c00584 	movi	r3,22
10106f3c:	2025883a 	mov	r18,r4
10106f40:	18807f2e 	bgeu	r3,r2,10107140 <_malloc_r+0x238>
10106f44:	047ffe04 	movi	r17,-8
10106f48:	1462703a 	and	r17,r2,r17
10106f4c:	8800a316 	blt	r17,zero,101071dc <_malloc_r+0x2d4>
10106f50:	8940a236 	bltu	r17,r5,101071dc <_malloc_r+0x2d4>
10106f54:	010eb7c0 	call	1010eb7c <__malloc_lock>
10106f58:	00807dc4 	movi	r2,503
10106f5c:	1441e92e 	bgeu	r2,r17,10107704 <_malloc_r+0x7fc>
10106f60:	8804d27a 	srli	r2,r17,9
10106f64:	1000a126 	beq	r2,zero,101071ec <_malloc_r+0x2e4>
10106f68:	00c00104 	movi	r3,4
10106f6c:	18811e36 	bltu	r3,r2,101073e8 <_malloc_r+0x4e0>
10106f70:	8804d1ba 	srli	r2,r17,6
10106f74:	12000e44 	addi	r8,r2,57
10106f78:	11c00e04 	addi	r7,r2,56
10106f7c:	4209883a 	add	r4,r8,r8
10106f80:	04c40474 	movhi	r19,4113
10106f84:	2109883a 	add	r4,r4,r4
10106f88:	9cc59704 	addi	r19,r19,5724
10106f8c:	2109883a 	add	r4,r4,r4
10106f90:	9909883a 	add	r4,r19,r4
10106f94:	24000117 	ldw	r16,4(r4)
10106f98:	213ffe04 	addi	r4,r4,-8
10106f9c:	24009726 	beq	r4,r16,101071fc <_malloc_r+0x2f4>
10106fa0:	80800117 	ldw	r2,4(r16)
10106fa4:	01bfff04 	movi	r6,-4
10106fa8:	014003c4 	movi	r5,15
10106fac:	1184703a 	and	r2,r2,r6
10106fb0:	1447c83a 	sub	r3,r2,r17
10106fb4:	28c00716 	blt	r5,r3,10106fd4 <_malloc_r+0xcc>
10106fb8:	1800920e 	bge	r3,zero,10107204 <_malloc_r+0x2fc>
10106fbc:	84000317 	ldw	r16,12(r16)
10106fc0:	24008e26 	beq	r4,r16,101071fc <_malloc_r+0x2f4>
10106fc4:	80800117 	ldw	r2,4(r16)
10106fc8:	1184703a 	and	r2,r2,r6
10106fcc:	1447c83a 	sub	r3,r2,r17
10106fd0:	28fff90e 	bge	r5,r3,10106fb8 <_malloc_r+0xb0>
10106fd4:	3809883a 	mov	r4,r7
10106fd8:	01840474 	movhi	r6,4113
10106fdc:	9c000417 	ldw	r16,16(r19)
10106fe0:	31859704 	addi	r6,r6,5724
10106fe4:	32000204 	addi	r8,r6,8
10106fe8:	82013426 	beq	r16,r8,101074bc <_malloc_r+0x5b4>
10106fec:	80c00117 	ldw	r3,4(r16)
10106ff0:	00bfff04 	movi	r2,-4
10106ff4:	188e703a 	and	r7,r3,r2
10106ff8:	3c45c83a 	sub	r2,r7,r17
10106ffc:	00c003c4 	movi	r3,15
10107000:	18811f16 	blt	r3,r2,10107480 <_malloc_r+0x578>
10107004:	32000515 	stw	r8,20(r6)
10107008:	32000415 	stw	r8,16(r6)
1010700c:	10007f0e 	bge	r2,zero,1010720c <_malloc_r+0x304>
10107010:	00807fc4 	movi	r2,511
10107014:	11c0fd36 	bltu	r2,r7,1010740c <_malloc_r+0x504>
10107018:	3806d0fa 	srli	r3,r7,3
1010701c:	01c00044 	movi	r7,1
10107020:	30800117 	ldw	r2,4(r6)
10107024:	19400044 	addi	r5,r3,1
10107028:	294b883a 	add	r5,r5,r5
1010702c:	1807d0ba 	srai	r3,r3,2
10107030:	294b883a 	add	r5,r5,r5
10107034:	294b883a 	add	r5,r5,r5
10107038:	298b883a 	add	r5,r5,r6
1010703c:	38c6983a 	sll	r3,r7,r3
10107040:	29c00017 	ldw	r7,0(r5)
10107044:	2a7ffe04 	addi	r9,r5,-8
10107048:	1886b03a 	or	r3,r3,r2
1010704c:	82400315 	stw	r9,12(r16)
10107050:	81c00215 	stw	r7,8(r16)
10107054:	30c00115 	stw	r3,4(r6)
10107058:	2c000015 	stw	r16,0(r5)
1010705c:	3c000315 	stw	r16,12(r7)
10107060:	2005d0ba 	srai	r2,r4,2
10107064:	01400044 	movi	r5,1
10107068:	288a983a 	sll	r5,r5,r2
1010706c:	19406f36 	bltu	r3,r5,1010722c <_malloc_r+0x324>
10107070:	28c4703a 	and	r2,r5,r3
10107074:	10000a1e 	bne	r2,zero,101070a0 <_malloc_r+0x198>
10107078:	00bfff04 	movi	r2,-4
1010707c:	294b883a 	add	r5,r5,r5
10107080:	2088703a 	and	r4,r4,r2
10107084:	28c4703a 	and	r2,r5,r3
10107088:	21000104 	addi	r4,r4,4
1010708c:	1000041e 	bne	r2,zero,101070a0 <_malloc_r+0x198>
10107090:	294b883a 	add	r5,r5,r5
10107094:	28c4703a 	and	r2,r5,r3
10107098:	21000104 	addi	r4,r4,4
1010709c:	103ffc26 	beq	r2,zero,10107090 <_malloc_r+0x188>
101070a0:	02bfff04 	movi	r10,-4
101070a4:	024003c4 	movi	r9,15
101070a8:	21800044 	addi	r6,r4,1
101070ac:	318d883a 	add	r6,r6,r6
101070b0:	318d883a 	add	r6,r6,r6
101070b4:	318d883a 	add	r6,r6,r6
101070b8:	998d883a 	add	r6,r19,r6
101070bc:	333ffe04 	addi	r12,r6,-8
101070c0:	2017883a 	mov	r11,r4
101070c4:	31800104 	addi	r6,r6,4
101070c8:	34000017 	ldw	r16,0(r6)
101070cc:	31fffd04 	addi	r7,r6,-12
101070d0:	81c0041e 	bne	r16,r7,101070e4 <_malloc_r+0x1dc>
101070d4:	0000fb06 	br	101074c4 <_malloc_r+0x5bc>
101070d8:	1801030e 	bge	r3,zero,101074e8 <_malloc_r+0x5e0>
101070dc:	84000317 	ldw	r16,12(r16)
101070e0:	81c0f826 	beq	r16,r7,101074c4 <_malloc_r+0x5bc>
101070e4:	80800117 	ldw	r2,4(r16)
101070e8:	1284703a 	and	r2,r2,r10
101070ec:	1447c83a 	sub	r3,r2,r17
101070f0:	48fff90e 	bge	r9,r3,101070d8 <_malloc_r+0x1d0>
101070f4:	80800317 	ldw	r2,12(r16)
101070f8:	81000217 	ldw	r4,8(r16)
101070fc:	89400054 	ori	r5,r17,1
10107100:	81400115 	stw	r5,4(r16)
10107104:	20800315 	stw	r2,12(r4)
10107108:	11000215 	stw	r4,8(r2)
1010710c:	8463883a 	add	r17,r16,r17
10107110:	9c400515 	stw	r17,20(r19)
10107114:	9c400415 	stw	r17,16(r19)
10107118:	18800054 	ori	r2,r3,1
1010711c:	88800115 	stw	r2,4(r17)
10107120:	8a000315 	stw	r8,12(r17)
10107124:	8a000215 	stw	r8,8(r17)
10107128:	88e3883a 	add	r17,r17,r3
1010712c:	88c00015 	stw	r3,0(r17)
10107130:	9009883a 	mov	r4,r18
10107134:	010eba00 	call	1010eba0 <__malloc_unlock>
10107138:	80800204 	addi	r2,r16,8
1010713c:	00001b06 	br	101071ac <_malloc_r+0x2a4>
10107140:	04400404 	movi	r17,16
10107144:	89402536 	bltu	r17,r5,101071dc <_malloc_r+0x2d4>
10107148:	010eb7c0 	call	1010eb7c <__malloc_lock>
1010714c:	00800184 	movi	r2,6
10107150:	01000084 	movi	r4,2
10107154:	04c40474 	movhi	r19,4113
10107158:	1085883a 	add	r2,r2,r2
1010715c:	9cc59704 	addi	r19,r19,5724
10107160:	1085883a 	add	r2,r2,r2
10107164:	9885883a 	add	r2,r19,r2
10107168:	14000117 	ldw	r16,4(r2)
1010716c:	10fffe04 	addi	r3,r2,-8
10107170:	80c0d926 	beq	r16,r3,101074d8 <_malloc_r+0x5d0>
10107174:	80c00117 	ldw	r3,4(r16)
10107178:	81000317 	ldw	r4,12(r16)
1010717c:	00bfff04 	movi	r2,-4
10107180:	1884703a 	and	r2,r3,r2
10107184:	81400217 	ldw	r5,8(r16)
10107188:	8085883a 	add	r2,r16,r2
1010718c:	10c00117 	ldw	r3,4(r2)
10107190:	29000315 	stw	r4,12(r5)
10107194:	21400215 	stw	r5,8(r4)
10107198:	18c00054 	ori	r3,r3,1
1010719c:	10c00115 	stw	r3,4(r2)
101071a0:	9009883a 	mov	r4,r18
101071a4:	010eba00 	call	1010eba0 <__malloc_unlock>
101071a8:	80800204 	addi	r2,r16,8
101071ac:	dfc00a17 	ldw	ra,40(sp)
101071b0:	df000917 	ldw	fp,36(sp)
101071b4:	ddc00817 	ldw	r23,32(sp)
101071b8:	dd800717 	ldw	r22,28(sp)
101071bc:	dd400617 	ldw	r21,24(sp)
101071c0:	dd000517 	ldw	r20,20(sp)
101071c4:	dcc00417 	ldw	r19,16(sp)
101071c8:	dc800317 	ldw	r18,12(sp)
101071cc:	dc400217 	ldw	r17,8(sp)
101071d0:	dc000117 	ldw	r16,4(sp)
101071d4:	dec00b04 	addi	sp,sp,44
101071d8:	f800283a 	ret
101071dc:	00800304 	movi	r2,12
101071e0:	90800015 	stw	r2,0(r18)
101071e4:	0005883a 	mov	r2,zero
101071e8:	003ff006 	br	101071ac <_malloc_r+0x2a4>
101071ec:	01002004 	movi	r4,128
101071f0:	02001004 	movi	r8,64
101071f4:	01c00fc4 	movi	r7,63
101071f8:	003f6106 	br	10106f80 <_malloc_r+0x78>
101071fc:	4009883a 	mov	r4,r8
10107200:	003f7506 	br	10106fd8 <_malloc_r+0xd0>
10107204:	81000317 	ldw	r4,12(r16)
10107208:	003fde06 	br	10107184 <_malloc_r+0x27c>
1010720c:	81c5883a 	add	r2,r16,r7
10107210:	11400117 	ldw	r5,4(r2)
10107214:	9009883a 	mov	r4,r18
10107218:	29400054 	ori	r5,r5,1
1010721c:	11400115 	stw	r5,4(r2)
10107220:	010eba00 	call	1010eba0 <__malloc_unlock>
10107224:	80800204 	addi	r2,r16,8
10107228:	003fe006 	br	101071ac <_malloc_r+0x2a4>
1010722c:	9c000217 	ldw	r16,8(r19)
10107230:	00bfff04 	movi	r2,-4
10107234:	85800117 	ldw	r22,4(r16)
10107238:	b0ac703a 	and	r22,r22,r2
1010723c:	b4400336 	bltu	r22,r17,1010724c <_malloc_r+0x344>
10107240:	b445c83a 	sub	r2,r22,r17
10107244:	00c003c4 	movi	r3,15
10107248:	18805d16 	blt	r3,r2,101073c0 <_malloc_r+0x4b8>
1010724c:	05c40474 	movhi	r23,4113
10107250:	00840474 	movhi	r2,4113
10107254:	1091eb04 	addi	r2,r2,18348
10107258:	bdcb1e04 	addi	r23,r23,11384
1010725c:	15400017 	ldw	r21,0(r2)
10107260:	b8c00017 	ldw	r3,0(r23)
10107264:	00bfffc4 	movi	r2,-1
10107268:	858d883a 	add	r6,r16,r22
1010726c:	8d6b883a 	add	r21,r17,r21
10107270:	1880ea26 	beq	r3,r2,1010761c <_malloc_r+0x714>
10107274:	ad4403c4 	addi	r21,r21,4111
10107278:	00bc0004 	movi	r2,-4096
1010727c:	a8aa703a 	and	r21,r21,r2
10107280:	a80b883a 	mov	r5,r21
10107284:	9009883a 	mov	r4,r18
10107288:	d9800015 	stw	r6,0(sp)
1010728c:	01093000 	call	10109300 <_sbrk_r>
10107290:	1029883a 	mov	r20,r2
10107294:	00bfffc4 	movi	r2,-1
10107298:	d9800017 	ldw	r6,0(sp)
1010729c:	a080e826 	beq	r20,r2,10107640 <_malloc_r+0x738>
101072a0:	a180a636 	bltu	r20,r6,1010753c <_malloc_r+0x634>
101072a4:	07040474 	movhi	fp,4113
101072a8:	e711f404 	addi	fp,fp,18384
101072ac:	e0800017 	ldw	r2,0(fp)
101072b0:	a887883a 	add	r3,r21,r2
101072b4:	e0c00015 	stw	r3,0(fp)
101072b8:	3500e626 	beq	r6,r20,10107654 <_malloc_r+0x74c>
101072bc:	b9000017 	ldw	r4,0(r23)
101072c0:	00bfffc4 	movi	r2,-1
101072c4:	2080ee26 	beq	r4,r2,10107680 <_malloc_r+0x778>
101072c8:	a185c83a 	sub	r2,r20,r6
101072cc:	10c5883a 	add	r2,r2,r3
101072d0:	e0800015 	stw	r2,0(fp)
101072d4:	a0c001cc 	andi	r3,r20,7
101072d8:	1800bc26 	beq	r3,zero,101075cc <_malloc_r+0x6c4>
101072dc:	a0e9c83a 	sub	r20,r20,r3
101072e0:	00840204 	movi	r2,4104
101072e4:	a5000204 	addi	r20,r20,8
101072e8:	10c7c83a 	sub	r3,r2,r3
101072ec:	a545883a 	add	r2,r20,r21
101072f0:	1083ffcc 	andi	r2,r2,4095
101072f4:	18abc83a 	sub	r21,r3,r2
101072f8:	a80b883a 	mov	r5,r21
101072fc:	9009883a 	mov	r4,r18
10107300:	01093000 	call	10109300 <_sbrk_r>
10107304:	00ffffc4 	movi	r3,-1
10107308:	10c0e126 	beq	r2,r3,10107690 <_malloc_r+0x788>
1010730c:	1505c83a 	sub	r2,r2,r20
10107310:	1545883a 	add	r2,r2,r21
10107314:	10800054 	ori	r2,r2,1
10107318:	e0c00017 	ldw	r3,0(fp)
1010731c:	9d000215 	stw	r20,8(r19)
10107320:	a0800115 	stw	r2,4(r20)
10107324:	a8c7883a 	add	r3,r21,r3
10107328:	e0c00015 	stw	r3,0(fp)
1010732c:	84c00e26 	beq	r16,r19,10107368 <_malloc_r+0x460>
10107330:	018003c4 	movi	r6,15
10107334:	3580a72e 	bgeu	r6,r22,101075d4 <_malloc_r+0x6cc>
10107338:	81400117 	ldw	r5,4(r16)
1010733c:	013ffe04 	movi	r4,-8
10107340:	b0bffd04 	addi	r2,r22,-12
10107344:	1104703a 	and	r2,r2,r4
10107348:	2900004c 	andi	r4,r5,1
1010734c:	2088b03a 	or	r4,r4,r2
10107350:	81000115 	stw	r4,4(r16)
10107354:	01400144 	movi	r5,5
10107358:	8089883a 	add	r4,r16,r2
1010735c:	21400115 	stw	r5,4(r4)
10107360:	21400215 	stw	r5,8(r4)
10107364:	3080cd36 	bltu	r6,r2,1010769c <_malloc_r+0x794>
10107368:	00840474 	movhi	r2,4113
1010736c:	1091ea04 	addi	r2,r2,18344
10107370:	11000017 	ldw	r4,0(r2)
10107374:	20c0012e 	bgeu	r4,r3,1010737c <_malloc_r+0x474>
10107378:	10c00015 	stw	r3,0(r2)
1010737c:	00840474 	movhi	r2,4113
10107380:	1091e904 	addi	r2,r2,18340
10107384:	11000017 	ldw	r4,0(r2)
10107388:	9c000217 	ldw	r16,8(r19)
1010738c:	20c0012e 	bgeu	r4,r3,10107394 <_malloc_r+0x48c>
10107390:	10c00015 	stw	r3,0(r2)
10107394:	80c00117 	ldw	r3,4(r16)
10107398:	00bfff04 	movi	r2,-4
1010739c:	1886703a 	and	r3,r3,r2
101073a0:	1c45c83a 	sub	r2,r3,r17
101073a4:	1c400236 	bltu	r3,r17,101073b0 <_malloc_r+0x4a8>
101073a8:	00c003c4 	movi	r3,15
101073ac:	18800416 	blt	r3,r2,101073c0 <_malloc_r+0x4b8>
101073b0:	9009883a 	mov	r4,r18
101073b4:	010eba00 	call	1010eba0 <__malloc_unlock>
101073b8:	0005883a 	mov	r2,zero
101073bc:	003f7b06 	br	101071ac <_malloc_r+0x2a4>
101073c0:	88c00054 	ori	r3,r17,1
101073c4:	80c00115 	stw	r3,4(r16)
101073c8:	8463883a 	add	r17,r16,r17
101073cc:	10800054 	ori	r2,r2,1
101073d0:	9c400215 	stw	r17,8(r19)
101073d4:	88800115 	stw	r2,4(r17)
101073d8:	9009883a 	mov	r4,r18
101073dc:	010eba00 	call	1010eba0 <__malloc_unlock>
101073e0:	80800204 	addi	r2,r16,8
101073e4:	003f7106 	br	101071ac <_malloc_r+0x2a4>
101073e8:	00c00504 	movi	r3,20
101073ec:	18804a2e 	bgeu	r3,r2,10107518 <_malloc_r+0x610>
101073f0:	00c01504 	movi	r3,84
101073f4:	18806e36 	bltu	r3,r2,101075b0 <_malloc_r+0x6a8>
101073f8:	8804d33a 	srli	r2,r17,12
101073fc:	12001bc4 	addi	r8,r2,111
10107400:	11c01b84 	addi	r7,r2,110
10107404:	4209883a 	add	r4,r8,r8
10107408:	003edd06 	br	10106f80 <_malloc_r+0x78>
1010740c:	3804d27a 	srli	r2,r7,9
10107410:	00c00104 	movi	r3,4
10107414:	1880442e 	bgeu	r3,r2,10107528 <_malloc_r+0x620>
10107418:	00c00504 	movi	r3,20
1010741c:	18808136 	bltu	r3,r2,10107624 <_malloc_r+0x71c>
10107420:	11401704 	addi	r5,r2,92
10107424:	10c016c4 	addi	r3,r2,91
10107428:	294b883a 	add	r5,r5,r5
1010742c:	294b883a 	add	r5,r5,r5
10107430:	294b883a 	add	r5,r5,r5
10107434:	994b883a 	add	r5,r19,r5
10107438:	28800017 	ldw	r2,0(r5)
1010743c:	01840474 	movhi	r6,4113
10107440:	297ffe04 	addi	r5,r5,-8
10107444:	31859704 	addi	r6,r6,5724
10107448:	28806526 	beq	r5,r2,101075e0 <_malloc_r+0x6d8>
1010744c:	01bfff04 	movi	r6,-4
10107450:	10c00117 	ldw	r3,4(r2)
10107454:	1986703a 	and	r3,r3,r6
10107458:	38c0022e 	bgeu	r7,r3,10107464 <_malloc_r+0x55c>
1010745c:	10800217 	ldw	r2,8(r2)
10107460:	28bffb1e 	bne	r5,r2,10107450 <_malloc_r+0x548>
10107464:	11400317 	ldw	r5,12(r2)
10107468:	98c00117 	ldw	r3,4(r19)
1010746c:	81400315 	stw	r5,12(r16)
10107470:	80800215 	stw	r2,8(r16)
10107474:	2c000215 	stw	r16,8(r5)
10107478:	14000315 	stw	r16,12(r2)
1010747c:	003ef806 	br	10107060 <_malloc_r+0x158>
10107480:	88c00054 	ori	r3,r17,1
10107484:	80c00115 	stw	r3,4(r16)
10107488:	8463883a 	add	r17,r16,r17
1010748c:	34400515 	stw	r17,20(r6)
10107490:	34400415 	stw	r17,16(r6)
10107494:	10c00054 	ori	r3,r2,1
10107498:	8a000315 	stw	r8,12(r17)
1010749c:	8a000215 	stw	r8,8(r17)
101074a0:	88c00115 	stw	r3,4(r17)
101074a4:	88a3883a 	add	r17,r17,r2
101074a8:	88800015 	stw	r2,0(r17)
101074ac:	9009883a 	mov	r4,r18
101074b0:	010eba00 	call	1010eba0 <__malloc_unlock>
101074b4:	80800204 	addi	r2,r16,8
101074b8:	003f3c06 	br	101071ac <_malloc_r+0x2a4>
101074bc:	30c00117 	ldw	r3,4(r6)
101074c0:	003ee706 	br	10107060 <_malloc_r+0x158>
101074c4:	5ac00044 	addi	r11,r11,1
101074c8:	588000cc 	andi	r2,r11,3
101074cc:	31800204 	addi	r6,r6,8
101074d0:	103efd1e 	bne	r2,zero,101070c8 <_malloc_r+0x1c0>
101074d4:	00002406 	br	10107568 <_malloc_r+0x660>
101074d8:	14000317 	ldw	r16,12(r2)
101074dc:	143f251e 	bne	r2,r16,10107174 <_malloc_r+0x26c>
101074e0:	21000084 	addi	r4,r4,2
101074e4:	003ebc06 	br	10106fd8 <_malloc_r+0xd0>
101074e8:	8085883a 	add	r2,r16,r2
101074ec:	10c00117 	ldw	r3,4(r2)
101074f0:	81000317 	ldw	r4,12(r16)
101074f4:	81400217 	ldw	r5,8(r16)
101074f8:	18c00054 	ori	r3,r3,1
101074fc:	10c00115 	stw	r3,4(r2)
10107500:	29000315 	stw	r4,12(r5)
10107504:	21400215 	stw	r5,8(r4)
10107508:	9009883a 	mov	r4,r18
1010750c:	010eba00 	call	1010eba0 <__malloc_unlock>
10107510:	80800204 	addi	r2,r16,8
10107514:	003f2506 	br	101071ac <_malloc_r+0x2a4>
10107518:	12001704 	addi	r8,r2,92
1010751c:	11c016c4 	addi	r7,r2,91
10107520:	4209883a 	add	r4,r8,r8
10107524:	003e9606 	br	10106f80 <_malloc_r+0x78>
10107528:	3804d1ba 	srli	r2,r7,6
1010752c:	11400e44 	addi	r5,r2,57
10107530:	10c00e04 	addi	r3,r2,56
10107534:	294b883a 	add	r5,r5,r5
10107538:	003fbc06 	br	1010742c <_malloc_r+0x524>
1010753c:	84ff5926 	beq	r16,r19,101072a4 <_malloc_r+0x39c>
10107540:	00840474 	movhi	r2,4113
10107544:	10859704 	addi	r2,r2,5724
10107548:	14000217 	ldw	r16,8(r2)
1010754c:	00bfff04 	movi	r2,-4
10107550:	80c00117 	ldw	r3,4(r16)
10107554:	1886703a 	and	r3,r3,r2
10107558:	003f9106 	br	101073a0 <_malloc_r+0x498>
1010755c:	60800217 	ldw	r2,8(r12)
10107560:	213fffc4 	addi	r4,r4,-1
10107564:	1300651e 	bne	r2,r12,101076fc <_malloc_r+0x7f4>
10107568:	208000cc 	andi	r2,r4,3
1010756c:	633ffe04 	addi	r12,r12,-8
10107570:	103ffa1e 	bne	r2,zero,1010755c <_malloc_r+0x654>
10107574:	98800117 	ldw	r2,4(r19)
10107578:	0146303a 	nor	r3,zero,r5
1010757c:	1884703a 	and	r2,r3,r2
10107580:	98800115 	stw	r2,4(r19)
10107584:	294b883a 	add	r5,r5,r5
10107588:	117f2836 	bltu	r2,r5,1010722c <_malloc_r+0x324>
1010758c:	283f2726 	beq	r5,zero,1010722c <_malloc_r+0x324>
10107590:	2886703a 	and	r3,r5,r2
10107594:	5809883a 	mov	r4,r11
10107598:	183ec31e 	bne	r3,zero,101070a8 <_malloc_r+0x1a0>
1010759c:	294b883a 	add	r5,r5,r5
101075a0:	2886703a 	and	r3,r5,r2
101075a4:	21000104 	addi	r4,r4,4
101075a8:	183ffc26 	beq	r3,zero,1010759c <_malloc_r+0x694>
101075ac:	003ebe06 	br	101070a8 <_malloc_r+0x1a0>
101075b0:	00c05504 	movi	r3,340
101075b4:	18801236 	bltu	r3,r2,10107600 <_malloc_r+0x6f8>
101075b8:	8804d3fa 	srli	r2,r17,15
101075bc:	12001e04 	addi	r8,r2,120
101075c0:	11c01dc4 	addi	r7,r2,119
101075c4:	4209883a 	add	r4,r8,r8
101075c8:	003e6d06 	br	10106f80 <_malloc_r+0x78>
101075cc:	00c40004 	movi	r3,4096
101075d0:	003f4606 	br	101072ec <_malloc_r+0x3e4>
101075d4:	00800044 	movi	r2,1
101075d8:	a0800115 	stw	r2,4(r20)
101075dc:	003f7406 	br	101073b0 <_malloc_r+0x4a8>
101075e0:	1805d0ba 	srai	r2,r3,2
101075e4:	01c00044 	movi	r7,1
101075e8:	30c00117 	ldw	r3,4(r6)
101075ec:	388e983a 	sll	r7,r7,r2
101075f0:	2805883a 	mov	r2,r5
101075f4:	38c6b03a 	or	r3,r7,r3
101075f8:	30c00115 	stw	r3,4(r6)
101075fc:	003f9b06 	br	1010746c <_malloc_r+0x564>
10107600:	00c15504 	movi	r3,1364
10107604:	18801a36 	bltu	r3,r2,10107670 <_malloc_r+0x768>
10107608:	8804d4ba 	srli	r2,r17,18
1010760c:	12001f44 	addi	r8,r2,125
10107610:	11c01f04 	addi	r7,r2,124
10107614:	4209883a 	add	r4,r8,r8
10107618:	003e5906 	br	10106f80 <_malloc_r+0x78>
1010761c:	ad400404 	addi	r21,r21,16
10107620:	003f1706 	br	10107280 <_malloc_r+0x378>
10107624:	00c01504 	movi	r3,84
10107628:	18802336 	bltu	r3,r2,101076b8 <_malloc_r+0x7b0>
1010762c:	3804d33a 	srli	r2,r7,12
10107630:	11401bc4 	addi	r5,r2,111
10107634:	10c01b84 	addi	r3,r2,110
10107638:	294b883a 	add	r5,r5,r5
1010763c:	003f7b06 	br	1010742c <_malloc_r+0x524>
10107640:	9c000217 	ldw	r16,8(r19)
10107644:	00bfff04 	movi	r2,-4
10107648:	80c00117 	ldw	r3,4(r16)
1010764c:	1886703a 	and	r3,r3,r2
10107650:	003f5306 	br	101073a0 <_malloc_r+0x498>
10107654:	3083ffcc 	andi	r2,r6,4095
10107658:	103f181e 	bne	r2,zero,101072bc <_malloc_r+0x3b4>
1010765c:	99000217 	ldw	r4,8(r19)
10107660:	b545883a 	add	r2,r22,r21
10107664:	10800054 	ori	r2,r2,1
10107668:	20800115 	stw	r2,4(r4)
1010766c:	003f3e06 	br	10107368 <_malloc_r+0x460>
10107670:	01003f84 	movi	r4,254
10107674:	02001fc4 	movi	r8,127
10107678:	01c01f84 	movi	r7,126
1010767c:	003e4006 	br	10106f80 <_malloc_r+0x78>
10107680:	00840474 	movhi	r2,4113
10107684:	108b1e04 	addi	r2,r2,11384
10107688:	15000015 	stw	r20,0(r2)
1010768c:	003f1106 	br	101072d4 <_malloc_r+0x3cc>
10107690:	00800044 	movi	r2,1
10107694:	002b883a 	mov	r21,zero
10107698:	003f1f06 	br	10107318 <_malloc_r+0x410>
1010769c:	81400204 	addi	r5,r16,8
101076a0:	9009883a 	mov	r4,r18
101076a4:	010631c0 	call	1010631c <_free_r>
101076a8:	00840474 	movhi	r2,4113
101076ac:	1091f404 	addi	r2,r2,18384
101076b0:	10c00017 	ldw	r3,0(r2)
101076b4:	003f2c06 	br	10107368 <_malloc_r+0x460>
101076b8:	00c05504 	movi	r3,340
101076bc:	18800536 	bltu	r3,r2,101076d4 <_malloc_r+0x7cc>
101076c0:	3804d3fa 	srli	r2,r7,15
101076c4:	11401e04 	addi	r5,r2,120
101076c8:	10c01dc4 	addi	r3,r2,119
101076cc:	294b883a 	add	r5,r5,r5
101076d0:	003f5606 	br	1010742c <_malloc_r+0x524>
101076d4:	00c15504 	movi	r3,1364
101076d8:	18800536 	bltu	r3,r2,101076f0 <_malloc_r+0x7e8>
101076dc:	3804d4ba 	srli	r2,r7,18
101076e0:	11401f44 	addi	r5,r2,125
101076e4:	10c01f04 	addi	r3,r2,124
101076e8:	294b883a 	add	r5,r5,r5
101076ec:	003f4f06 	br	1010742c <_malloc_r+0x524>
101076f0:	01403f84 	movi	r5,254
101076f4:	00c01f84 	movi	r3,126
101076f8:	003f4c06 	br	1010742c <_malloc_r+0x524>
101076fc:	98800117 	ldw	r2,4(r19)
10107700:	003fa006 	br	10107584 <_malloc_r+0x67c>
10107704:	8808d0fa 	srli	r4,r17,3
10107708:	20800044 	addi	r2,r4,1
1010770c:	1085883a 	add	r2,r2,r2
10107710:	003e9006 	br	10107154 <_malloc_r+0x24c>

10107714 <memchr>:
10107714:	208000cc 	andi	r2,r4,3
10107718:	280f883a 	mov	r7,r5
1010771c:	10003426 	beq	r2,zero,101077f0 <memchr+0xdc>
10107720:	30bfffc4 	addi	r2,r6,-1
10107724:	30001a26 	beq	r6,zero,10107790 <memchr+0x7c>
10107728:	20c00003 	ldbu	r3,0(r4)
1010772c:	29803fcc 	andi	r6,r5,255
10107730:	30c0051e 	bne	r6,r3,10107748 <memchr+0x34>
10107734:	00001806 	br	10107798 <memchr+0x84>
10107738:	10001526 	beq	r2,zero,10107790 <memchr+0x7c>
1010773c:	20c00003 	ldbu	r3,0(r4)
10107740:	10bfffc4 	addi	r2,r2,-1
10107744:	30c01426 	beq	r6,r3,10107798 <memchr+0x84>
10107748:	21000044 	addi	r4,r4,1
1010774c:	20c000cc 	andi	r3,r4,3
10107750:	183ff91e 	bne	r3,zero,10107738 <memchr+0x24>
10107754:	020000c4 	movi	r8,3
10107758:	40801136 	bltu	r8,r2,101077a0 <memchr+0x8c>
1010775c:	10000c26 	beq	r2,zero,10107790 <memchr+0x7c>
10107760:	20c00003 	ldbu	r3,0(r4)
10107764:	29403fcc 	andi	r5,r5,255
10107768:	28c00b26 	beq	r5,r3,10107798 <memchr+0x84>
1010776c:	20c00044 	addi	r3,r4,1
10107770:	39803fcc 	andi	r6,r7,255
10107774:	2089883a 	add	r4,r4,r2
10107778:	00000306 	br	10107788 <memchr+0x74>
1010777c:	18c00044 	addi	r3,r3,1
10107780:	197fffc3 	ldbu	r5,-1(r3)
10107784:	31400526 	beq	r6,r5,1010779c <memchr+0x88>
10107788:	1805883a 	mov	r2,r3
1010778c:	20fffb1e 	bne	r4,r3,1010777c <memchr+0x68>
10107790:	0005883a 	mov	r2,zero
10107794:	f800283a 	ret
10107798:	2005883a 	mov	r2,r4
1010779c:	f800283a 	ret
101077a0:	28c03fcc 	andi	r3,r5,255
101077a4:	1812923a 	slli	r9,r3,8
101077a8:	02ffbff4 	movhi	r11,65279
101077ac:	02a02074 	movhi	r10,32897
101077b0:	48d2b03a 	or	r9,r9,r3
101077b4:	4806943a 	slli	r3,r9,16
101077b8:	5affbfc4 	addi	r11,r11,-257
101077bc:	52a02004 	addi	r10,r10,-32640
101077c0:	48d2b03a 	or	r9,r9,r3
101077c4:	20c00017 	ldw	r3,0(r4)
101077c8:	48c6f03a 	xor	r3,r9,r3
101077cc:	1acd883a 	add	r6,r3,r11
101077d0:	00c6303a 	nor	r3,zero,r3
101077d4:	30c6703a 	and	r3,r6,r3
101077d8:	1a86703a 	and	r3,r3,r10
101077dc:	183fe01e 	bne	r3,zero,10107760 <memchr+0x4c>
101077e0:	10bfff04 	addi	r2,r2,-4
101077e4:	21000104 	addi	r4,r4,4
101077e8:	40bff636 	bltu	r8,r2,101077c4 <memchr+0xb0>
101077ec:	003fdb06 	br	1010775c <memchr+0x48>
101077f0:	3005883a 	mov	r2,r6
101077f4:	003fd706 	br	10107754 <memchr+0x40>

101077f8 <memcpy>:
101077f8:	defffd04 	addi	sp,sp,-12
101077fc:	dfc00215 	stw	ra,8(sp)
10107800:	dc400115 	stw	r17,4(sp)
10107804:	dc000015 	stw	r16,0(sp)
10107808:	00c003c4 	movi	r3,15
1010780c:	2005883a 	mov	r2,r4
10107810:	1980452e 	bgeu	r3,r6,10107928 <memcpy+0x130>
10107814:	2906b03a 	or	r3,r5,r4
10107818:	18c000cc 	andi	r3,r3,3
1010781c:	1800441e 	bne	r3,zero,10107930 <memcpy+0x138>
10107820:	347ffc04 	addi	r17,r6,-16
10107824:	8822d13a 	srli	r17,r17,4
10107828:	28c00104 	addi	r3,r5,4
1010782c:	23400104 	addi	r13,r4,4
10107830:	8820913a 	slli	r16,r17,4
10107834:	2b000204 	addi	r12,r5,8
10107838:	22c00204 	addi	r11,r4,8
1010783c:	84000504 	addi	r16,r16,20
10107840:	2a800304 	addi	r10,r5,12
10107844:	22400304 	addi	r9,r4,12
10107848:	2c21883a 	add	r16,r5,r16
1010784c:	2811883a 	mov	r8,r5
10107850:	200f883a 	mov	r7,r4
10107854:	41000017 	ldw	r4,0(r8)
10107858:	1fc00017 	ldw	ra,0(r3)
1010785c:	63c00017 	ldw	r15,0(r12)
10107860:	39000015 	stw	r4,0(r7)
10107864:	53800017 	ldw	r14,0(r10)
10107868:	6fc00015 	stw	ra,0(r13)
1010786c:	5bc00015 	stw	r15,0(r11)
10107870:	4b800015 	stw	r14,0(r9)
10107874:	18c00404 	addi	r3,r3,16
10107878:	39c00404 	addi	r7,r7,16
1010787c:	42000404 	addi	r8,r8,16
10107880:	6b400404 	addi	r13,r13,16
10107884:	63000404 	addi	r12,r12,16
10107888:	5ac00404 	addi	r11,r11,16
1010788c:	52800404 	addi	r10,r10,16
10107890:	4a400404 	addi	r9,r9,16
10107894:	1c3fef1e 	bne	r3,r16,10107854 <memcpy+0x5c>
10107898:	89c00044 	addi	r7,r17,1
1010789c:	380e913a 	slli	r7,r7,4
101078a0:	310003cc 	andi	r4,r6,15
101078a4:	02c000c4 	movi	r11,3
101078a8:	11c7883a 	add	r3,r2,r7
101078ac:	29cb883a 	add	r5,r5,r7
101078b0:	5900212e 	bgeu	r11,r4,10107938 <memcpy+0x140>
101078b4:	1813883a 	mov	r9,r3
101078b8:	2811883a 	mov	r8,r5
101078bc:	200f883a 	mov	r7,r4
101078c0:	42800017 	ldw	r10,0(r8)
101078c4:	4a400104 	addi	r9,r9,4
101078c8:	39ffff04 	addi	r7,r7,-4
101078cc:	4abfff15 	stw	r10,-4(r9)
101078d0:	42000104 	addi	r8,r8,4
101078d4:	59fffa36 	bltu	r11,r7,101078c0 <memcpy+0xc8>
101078d8:	213fff04 	addi	r4,r4,-4
101078dc:	2008d0ba 	srli	r4,r4,2
101078e0:	318000cc 	andi	r6,r6,3
101078e4:	21000044 	addi	r4,r4,1
101078e8:	2109883a 	add	r4,r4,r4
101078ec:	2109883a 	add	r4,r4,r4
101078f0:	1907883a 	add	r3,r3,r4
101078f4:	290b883a 	add	r5,r5,r4
101078f8:	30000626 	beq	r6,zero,10107914 <memcpy+0x11c>
101078fc:	198d883a 	add	r6,r3,r6
10107900:	29c00003 	ldbu	r7,0(r5)
10107904:	18c00044 	addi	r3,r3,1
10107908:	29400044 	addi	r5,r5,1
1010790c:	19ffffc5 	stb	r7,-1(r3)
10107910:	19bffb1e 	bne	r3,r6,10107900 <memcpy+0x108>
10107914:	dfc00217 	ldw	ra,8(sp)
10107918:	dc400117 	ldw	r17,4(sp)
1010791c:	dc000017 	ldw	r16,0(sp)
10107920:	dec00304 	addi	sp,sp,12
10107924:	f800283a 	ret
10107928:	2007883a 	mov	r3,r4
1010792c:	003ff206 	br	101078f8 <memcpy+0x100>
10107930:	2007883a 	mov	r3,r4
10107934:	003ff106 	br	101078fc <memcpy+0x104>
10107938:	200d883a 	mov	r6,r4
1010793c:	003fee06 	br	101078f8 <memcpy+0x100>

10107940 <memmove>:
10107940:	2005883a 	mov	r2,r4
10107944:	29000b2e 	bgeu	r5,r4,10107974 <memmove+0x34>
10107948:	298f883a 	add	r7,r5,r6
1010794c:	21c0092e 	bgeu	r4,r7,10107974 <memmove+0x34>
10107950:	2187883a 	add	r3,r4,r6
10107954:	198bc83a 	sub	r5,r3,r6
10107958:	30004826 	beq	r6,zero,10107a7c <memmove+0x13c>
1010795c:	39ffffc4 	addi	r7,r7,-1
10107960:	39000003 	ldbu	r4,0(r7)
10107964:	18ffffc4 	addi	r3,r3,-1
10107968:	19000005 	stb	r4,0(r3)
1010796c:	28fffb1e 	bne	r5,r3,1010795c <memmove+0x1c>
10107970:	f800283a 	ret
10107974:	00c003c4 	movi	r3,15
10107978:	1980412e 	bgeu	r3,r6,10107a80 <memmove+0x140>
1010797c:	2886b03a 	or	r3,r5,r2
10107980:	18c000cc 	andi	r3,r3,3
10107984:	1800401e 	bne	r3,zero,10107a88 <memmove+0x148>
10107988:	33fffc04 	addi	r15,r6,-16
1010798c:	781ed13a 	srli	r15,r15,4
10107990:	28c00104 	addi	r3,r5,4
10107994:	13400104 	addi	r13,r2,4
10107998:	781c913a 	slli	r14,r15,4
1010799c:	2b000204 	addi	r12,r5,8
101079a0:	12c00204 	addi	r11,r2,8
101079a4:	73800504 	addi	r14,r14,20
101079a8:	2a800304 	addi	r10,r5,12
101079ac:	12400304 	addi	r9,r2,12
101079b0:	2b9d883a 	add	r14,r5,r14
101079b4:	2811883a 	mov	r8,r5
101079b8:	100f883a 	mov	r7,r2
101079bc:	41000017 	ldw	r4,0(r8)
101079c0:	39c00404 	addi	r7,r7,16
101079c4:	18c00404 	addi	r3,r3,16
101079c8:	393ffc15 	stw	r4,-16(r7)
101079cc:	193ffc17 	ldw	r4,-16(r3)
101079d0:	6b400404 	addi	r13,r13,16
101079d4:	5ac00404 	addi	r11,r11,16
101079d8:	693ffc15 	stw	r4,-16(r13)
101079dc:	61000017 	ldw	r4,0(r12)
101079e0:	4a400404 	addi	r9,r9,16
101079e4:	42000404 	addi	r8,r8,16
101079e8:	593ffc15 	stw	r4,-16(r11)
101079ec:	51000017 	ldw	r4,0(r10)
101079f0:	63000404 	addi	r12,r12,16
101079f4:	52800404 	addi	r10,r10,16
101079f8:	493ffc15 	stw	r4,-16(r9)
101079fc:	1bbfef1e 	bne	r3,r14,101079bc <memmove+0x7c>
10107a00:	79000044 	addi	r4,r15,1
10107a04:	2008913a 	slli	r4,r4,4
10107a08:	328003cc 	andi	r10,r6,15
10107a0c:	02c000c4 	movi	r11,3
10107a10:	1107883a 	add	r3,r2,r4
10107a14:	290b883a 	add	r5,r5,r4
10107a18:	5a801e2e 	bgeu	r11,r10,10107a94 <memmove+0x154>
10107a1c:	1813883a 	mov	r9,r3
10107a20:	2811883a 	mov	r8,r5
10107a24:	500f883a 	mov	r7,r10
10107a28:	41000017 	ldw	r4,0(r8)
10107a2c:	4a400104 	addi	r9,r9,4
10107a30:	39ffff04 	addi	r7,r7,-4
10107a34:	493fff15 	stw	r4,-4(r9)
10107a38:	42000104 	addi	r8,r8,4
10107a3c:	59fffa36 	bltu	r11,r7,10107a28 <memmove+0xe8>
10107a40:	513fff04 	addi	r4,r10,-4
10107a44:	2008d0ba 	srli	r4,r4,2
10107a48:	318000cc 	andi	r6,r6,3
10107a4c:	21000044 	addi	r4,r4,1
10107a50:	2109883a 	add	r4,r4,r4
10107a54:	2109883a 	add	r4,r4,r4
10107a58:	1907883a 	add	r3,r3,r4
10107a5c:	290b883a 	add	r5,r5,r4
10107a60:	30000b26 	beq	r6,zero,10107a90 <memmove+0x150>
10107a64:	198d883a 	add	r6,r3,r6
10107a68:	29c00003 	ldbu	r7,0(r5)
10107a6c:	18c00044 	addi	r3,r3,1
10107a70:	29400044 	addi	r5,r5,1
10107a74:	19ffffc5 	stb	r7,-1(r3)
10107a78:	19bffb1e 	bne	r3,r6,10107a68 <memmove+0x128>
10107a7c:	f800283a 	ret
10107a80:	1007883a 	mov	r3,r2
10107a84:	003ff606 	br	10107a60 <memmove+0x120>
10107a88:	1007883a 	mov	r3,r2
10107a8c:	003ff506 	br	10107a64 <memmove+0x124>
10107a90:	f800283a 	ret
10107a94:	500d883a 	mov	r6,r10
10107a98:	003ff106 	br	10107a60 <memmove+0x120>

10107a9c <memset>:
10107a9c:	20c000cc 	andi	r3,r4,3
10107aa0:	2005883a 	mov	r2,r4
10107aa4:	18004426 	beq	r3,zero,10107bb8 <memset+0x11c>
10107aa8:	31ffffc4 	addi	r7,r6,-1
10107aac:	30004026 	beq	r6,zero,10107bb0 <memset+0x114>
10107ab0:	2813883a 	mov	r9,r5
10107ab4:	200d883a 	mov	r6,r4
10107ab8:	2007883a 	mov	r3,r4
10107abc:	00000406 	br	10107ad0 <memset+0x34>
10107ac0:	3a3fffc4 	addi	r8,r7,-1
10107ac4:	31800044 	addi	r6,r6,1
10107ac8:	38003926 	beq	r7,zero,10107bb0 <memset+0x114>
10107acc:	400f883a 	mov	r7,r8
10107ad0:	18c00044 	addi	r3,r3,1
10107ad4:	32400005 	stb	r9,0(r6)
10107ad8:	1a0000cc 	andi	r8,r3,3
10107adc:	403ff81e 	bne	r8,zero,10107ac0 <memset+0x24>
10107ae0:	010000c4 	movi	r4,3
10107ae4:	21c02d2e 	bgeu	r4,r7,10107b9c <memset+0x100>
10107ae8:	29003fcc 	andi	r4,r5,255
10107aec:	200c923a 	slli	r6,r4,8
10107af0:	3108b03a 	or	r4,r6,r4
10107af4:	200c943a 	slli	r6,r4,16
10107af8:	218cb03a 	or	r6,r4,r6
10107afc:	010003c4 	movi	r4,15
10107b00:	21c0182e 	bgeu	r4,r7,10107b64 <memset+0xc8>
10107b04:	3b3ffc04 	addi	r12,r7,-16
10107b08:	6018d13a 	srli	r12,r12,4
10107b0c:	1a000104 	addi	r8,r3,4
10107b10:	1ac00204 	addi	r11,r3,8
10107b14:	6008913a 	slli	r4,r12,4
10107b18:	1a800304 	addi	r10,r3,12
10107b1c:	1813883a 	mov	r9,r3
10107b20:	21000504 	addi	r4,r4,20
10107b24:	1909883a 	add	r4,r3,r4
10107b28:	49800015 	stw	r6,0(r9)
10107b2c:	41800015 	stw	r6,0(r8)
10107b30:	59800015 	stw	r6,0(r11)
10107b34:	51800015 	stw	r6,0(r10)
10107b38:	42000404 	addi	r8,r8,16
10107b3c:	4a400404 	addi	r9,r9,16
10107b40:	5ac00404 	addi	r11,r11,16
10107b44:	52800404 	addi	r10,r10,16
10107b48:	413ff71e 	bne	r8,r4,10107b28 <memset+0x8c>
10107b4c:	63000044 	addi	r12,r12,1
10107b50:	6018913a 	slli	r12,r12,4
10107b54:	39c003cc 	andi	r7,r7,15
10107b58:	010000c4 	movi	r4,3
10107b5c:	1b07883a 	add	r3,r3,r12
10107b60:	21c00e2e 	bgeu	r4,r7,10107b9c <memset+0x100>
10107b64:	1813883a 	mov	r9,r3
10107b68:	3811883a 	mov	r8,r7
10107b6c:	010000c4 	movi	r4,3
10107b70:	49800015 	stw	r6,0(r9)
10107b74:	423fff04 	addi	r8,r8,-4
10107b78:	4a400104 	addi	r9,r9,4
10107b7c:	223ffc36 	bltu	r4,r8,10107b70 <memset+0xd4>
10107b80:	393fff04 	addi	r4,r7,-4
10107b84:	2008d0ba 	srli	r4,r4,2
10107b88:	39c000cc 	andi	r7,r7,3
10107b8c:	21000044 	addi	r4,r4,1
10107b90:	2109883a 	add	r4,r4,r4
10107b94:	2109883a 	add	r4,r4,r4
10107b98:	1907883a 	add	r3,r3,r4
10107b9c:	38000526 	beq	r7,zero,10107bb4 <memset+0x118>
10107ba0:	19cf883a 	add	r7,r3,r7
10107ba4:	19400005 	stb	r5,0(r3)
10107ba8:	18c00044 	addi	r3,r3,1
10107bac:	38fffd1e 	bne	r7,r3,10107ba4 <memset+0x108>
10107bb0:	f800283a 	ret
10107bb4:	f800283a 	ret
10107bb8:	2007883a 	mov	r3,r4
10107bbc:	300f883a 	mov	r7,r6
10107bc0:	003fc706 	br	10107ae0 <memset+0x44>

10107bc4 <_Balloc>:
10107bc4:	20801317 	ldw	r2,76(r4)
10107bc8:	defffc04 	addi	sp,sp,-16
10107bcc:	dc400115 	stw	r17,4(sp)
10107bd0:	dc000015 	stw	r16,0(sp)
10107bd4:	dfc00315 	stw	ra,12(sp)
10107bd8:	dc800215 	stw	r18,8(sp)
10107bdc:	2023883a 	mov	r17,r4
10107be0:	2821883a 	mov	r16,r5
10107be4:	10000f26 	beq	r2,zero,10107c24 <_Balloc+0x60>
10107be8:	8407883a 	add	r3,r16,r16
10107bec:	18c7883a 	add	r3,r3,r3
10107bf0:	10c7883a 	add	r3,r2,r3
10107bf4:	18800017 	ldw	r2,0(r3)
10107bf8:	10001126 	beq	r2,zero,10107c40 <_Balloc+0x7c>
10107bfc:	11000017 	ldw	r4,0(r2)
10107c00:	19000015 	stw	r4,0(r3)
10107c04:	10000415 	stw	zero,16(r2)
10107c08:	10000315 	stw	zero,12(r2)
10107c0c:	dfc00317 	ldw	ra,12(sp)
10107c10:	dc800217 	ldw	r18,8(sp)
10107c14:	dc400117 	ldw	r17,4(sp)
10107c18:	dc000017 	ldw	r16,0(sp)
10107c1c:	dec00404 	addi	sp,sp,16
10107c20:	f800283a 	ret
10107c24:	01800844 	movi	r6,33
10107c28:	01400104 	movi	r5,4
10107c2c:	010adc00 	call	1010adc0 <_calloc_r>
10107c30:	88801315 	stw	r2,76(r17)
10107c34:	103fec1e 	bne	r2,zero,10107be8 <_Balloc+0x24>
10107c38:	0005883a 	mov	r2,zero
10107c3c:	003ff306 	br	10107c0c <_Balloc+0x48>
10107c40:	01400044 	movi	r5,1
10107c44:	2c24983a 	sll	r18,r5,r16
10107c48:	8809883a 	mov	r4,r17
10107c4c:	91800144 	addi	r6,r18,5
10107c50:	318d883a 	add	r6,r6,r6
10107c54:	318d883a 	add	r6,r6,r6
10107c58:	010adc00 	call	1010adc0 <_calloc_r>
10107c5c:	103ff626 	beq	r2,zero,10107c38 <_Balloc+0x74>
10107c60:	14000115 	stw	r16,4(r2)
10107c64:	14800215 	stw	r18,8(r2)
10107c68:	003fe606 	br	10107c04 <_Balloc+0x40>

10107c6c <_Bfree>:
10107c6c:	28000826 	beq	r5,zero,10107c90 <_Bfree+0x24>
10107c70:	28c00117 	ldw	r3,4(r5)
10107c74:	20801317 	ldw	r2,76(r4)
10107c78:	18c7883a 	add	r3,r3,r3
10107c7c:	18c7883a 	add	r3,r3,r3
10107c80:	10c5883a 	add	r2,r2,r3
10107c84:	10c00017 	ldw	r3,0(r2)
10107c88:	28c00015 	stw	r3,0(r5)
10107c8c:	11400015 	stw	r5,0(r2)
10107c90:	f800283a 	ret

10107c94 <__multadd>:
10107c94:	defffa04 	addi	sp,sp,-24
10107c98:	dc800315 	stw	r18,12(sp)
10107c9c:	dc400215 	stw	r17,8(sp)
10107ca0:	dc000115 	stw	r16,4(sp)
10107ca4:	2823883a 	mov	r17,r5
10107ca8:	2c000417 	ldw	r16,16(r5)
10107cac:	dfc00515 	stw	ra,20(sp)
10107cb0:	dcc00415 	stw	r19,16(sp)
10107cb4:	2025883a 	mov	r18,r4
10107cb8:	29400504 	addi	r5,r5,20
10107cbc:	0011883a 	mov	r8,zero
10107cc0:	28c00017 	ldw	r3,0(r5)
10107cc4:	29400104 	addi	r5,r5,4
10107cc8:	42000044 	addi	r8,r8,1
10107ccc:	18bfffcc 	andi	r2,r3,65535
10107cd0:	1185383a 	mul	r2,r2,r6
10107cd4:	1806d43a 	srli	r3,r3,16
10107cd8:	11cf883a 	add	r7,r2,r7
10107cdc:	3808d43a 	srli	r4,r7,16
10107ce0:	1987383a 	mul	r3,r3,r6
10107ce4:	38bfffcc 	andi	r2,r7,65535
10107ce8:	1907883a 	add	r3,r3,r4
10107cec:	1808943a 	slli	r4,r3,16
10107cf0:	180ed43a 	srli	r7,r3,16
10107cf4:	2085883a 	add	r2,r4,r2
10107cf8:	28bfff15 	stw	r2,-4(r5)
10107cfc:	443ff016 	blt	r8,r16,10107cc0 <__multadd+0x2c>
10107d00:	38000926 	beq	r7,zero,10107d28 <__multadd+0x94>
10107d04:	88800217 	ldw	r2,8(r17)
10107d08:	80800f0e 	bge	r16,r2,10107d48 <__multadd+0xb4>
10107d0c:	80800144 	addi	r2,r16,5
10107d10:	1085883a 	add	r2,r2,r2
10107d14:	1085883a 	add	r2,r2,r2
10107d18:	8885883a 	add	r2,r17,r2
10107d1c:	11c00015 	stw	r7,0(r2)
10107d20:	84000044 	addi	r16,r16,1
10107d24:	8c000415 	stw	r16,16(r17)
10107d28:	8805883a 	mov	r2,r17
10107d2c:	dfc00517 	ldw	ra,20(sp)
10107d30:	dcc00417 	ldw	r19,16(sp)
10107d34:	dc800317 	ldw	r18,12(sp)
10107d38:	dc400217 	ldw	r17,8(sp)
10107d3c:	dc000117 	ldw	r16,4(sp)
10107d40:	dec00604 	addi	sp,sp,24
10107d44:	f800283a 	ret
10107d48:	89400117 	ldw	r5,4(r17)
10107d4c:	9009883a 	mov	r4,r18
10107d50:	d9c00015 	stw	r7,0(sp)
10107d54:	29400044 	addi	r5,r5,1
10107d58:	0107bc40 	call	10107bc4 <_Balloc>
10107d5c:	89800417 	ldw	r6,16(r17)
10107d60:	89400304 	addi	r5,r17,12
10107d64:	11000304 	addi	r4,r2,12
10107d68:	31800084 	addi	r6,r6,2
10107d6c:	318d883a 	add	r6,r6,r6
10107d70:	318d883a 	add	r6,r6,r6
10107d74:	1027883a 	mov	r19,r2
10107d78:	01077f80 	call	101077f8 <memcpy>
10107d7c:	d9c00017 	ldw	r7,0(sp)
10107d80:	88000a26 	beq	r17,zero,10107dac <__multadd+0x118>
10107d84:	88c00117 	ldw	r3,4(r17)
10107d88:	90801317 	ldw	r2,76(r18)
10107d8c:	18c7883a 	add	r3,r3,r3
10107d90:	18c7883a 	add	r3,r3,r3
10107d94:	10c5883a 	add	r2,r2,r3
10107d98:	10c00017 	ldw	r3,0(r2)
10107d9c:	88c00015 	stw	r3,0(r17)
10107da0:	14400015 	stw	r17,0(r2)
10107da4:	9823883a 	mov	r17,r19
10107da8:	003fd806 	br	10107d0c <__multadd+0x78>
10107dac:	9823883a 	mov	r17,r19
10107db0:	003fd606 	br	10107d0c <__multadd+0x78>

10107db4 <__s2b>:
10107db4:	defff904 	addi	sp,sp,-28
10107db8:	dc400115 	stw	r17,4(sp)
10107dbc:	dc000015 	stw	r16,0(sp)
10107dc0:	2023883a 	mov	r17,r4
10107dc4:	2821883a 	mov	r16,r5
10107dc8:	39000204 	addi	r4,r7,8
10107dcc:	01400244 	movi	r5,9
10107dd0:	dcc00315 	stw	r19,12(sp)
10107dd4:	dc800215 	stw	r18,8(sp)
10107dd8:	dfc00615 	stw	ra,24(sp)
10107ddc:	dd400515 	stw	r21,20(sp)
10107de0:	dd000415 	stw	r20,16(sp)
10107de4:	3825883a 	mov	r18,r7
10107de8:	3027883a 	mov	r19,r6
10107dec:	0101b580 	call	10101b58 <__divsi3>
10107df0:	00c00044 	movi	r3,1
10107df4:	000b883a 	mov	r5,zero
10107df8:	1880030e 	bge	r3,r2,10107e08 <__s2b+0x54>
10107dfc:	18c7883a 	add	r3,r3,r3
10107e00:	29400044 	addi	r5,r5,1
10107e04:	18bffd16 	blt	r3,r2,10107dfc <__s2b+0x48>
10107e08:	8809883a 	mov	r4,r17
10107e0c:	0107bc40 	call	10107bc4 <_Balloc>
10107e10:	d8c00717 	ldw	r3,28(sp)
10107e14:	10c00515 	stw	r3,20(r2)
10107e18:	00c00044 	movi	r3,1
10107e1c:	10c00415 	stw	r3,16(r2)
10107e20:	00c00244 	movi	r3,9
10107e24:	1cc0210e 	bge	r3,r19,10107eac <__s2b+0xf8>
10107e28:	80eb883a 	add	r21,r16,r3
10107e2c:	a829883a 	mov	r20,r21
10107e30:	84e1883a 	add	r16,r16,r19
10107e34:	a1c00007 	ldb	r7,0(r20)
10107e38:	01800284 	movi	r6,10
10107e3c:	a5000044 	addi	r20,r20,1
10107e40:	100b883a 	mov	r5,r2
10107e44:	39fff404 	addi	r7,r7,-48
10107e48:	8809883a 	mov	r4,r17
10107e4c:	0107c940 	call	10107c94 <__multadd>
10107e50:	a43ff81e 	bne	r20,r16,10107e34 <__s2b+0x80>
10107e54:	ace1883a 	add	r16,r21,r19
10107e58:	843ffe04 	addi	r16,r16,-8
10107e5c:	9c800a0e 	bge	r19,r18,10107e88 <__s2b+0xd4>
10107e60:	94e5c83a 	sub	r18,r18,r19
10107e64:	84a5883a 	add	r18,r16,r18
10107e68:	81c00007 	ldb	r7,0(r16)
10107e6c:	01800284 	movi	r6,10
10107e70:	84000044 	addi	r16,r16,1
10107e74:	100b883a 	mov	r5,r2
10107e78:	39fff404 	addi	r7,r7,-48
10107e7c:	8809883a 	mov	r4,r17
10107e80:	0107c940 	call	10107c94 <__multadd>
10107e84:	84bff81e 	bne	r16,r18,10107e68 <__s2b+0xb4>
10107e88:	dfc00617 	ldw	ra,24(sp)
10107e8c:	dd400517 	ldw	r21,20(sp)
10107e90:	dd000417 	ldw	r20,16(sp)
10107e94:	dcc00317 	ldw	r19,12(sp)
10107e98:	dc800217 	ldw	r18,8(sp)
10107e9c:	dc400117 	ldw	r17,4(sp)
10107ea0:	dc000017 	ldw	r16,0(sp)
10107ea4:	dec00704 	addi	sp,sp,28
10107ea8:	f800283a 	ret
10107eac:	84000284 	addi	r16,r16,10
10107eb0:	1827883a 	mov	r19,r3
10107eb4:	003fe906 	br	10107e5c <__s2b+0xa8>

10107eb8 <__hi0bits>:
10107eb8:	20bfffec 	andhi	r2,r4,65535
10107ebc:	1000141e 	bne	r2,zero,10107f10 <__hi0bits+0x58>
10107ec0:	2008943a 	slli	r4,r4,16
10107ec4:	00800404 	movi	r2,16
10107ec8:	20ffc02c 	andhi	r3,r4,65280
10107ecc:	1800021e 	bne	r3,zero,10107ed8 <__hi0bits+0x20>
10107ed0:	2008923a 	slli	r4,r4,8
10107ed4:	10800204 	addi	r2,r2,8
10107ed8:	20fc002c 	andhi	r3,r4,61440
10107edc:	1800021e 	bne	r3,zero,10107ee8 <__hi0bits+0x30>
10107ee0:	2008913a 	slli	r4,r4,4
10107ee4:	10800104 	addi	r2,r2,4
10107ee8:	20f0002c 	andhi	r3,r4,49152
10107eec:	1800031e 	bne	r3,zero,10107efc <__hi0bits+0x44>
10107ef0:	2109883a 	add	r4,r4,r4
10107ef4:	10800084 	addi	r2,r2,2
10107ef8:	2109883a 	add	r4,r4,r4
10107efc:	20000316 	blt	r4,zero,10107f0c <__hi0bits+0x54>
10107f00:	2110002c 	andhi	r4,r4,16384
10107f04:	2000041e 	bne	r4,zero,10107f18 <__hi0bits+0x60>
10107f08:	00800804 	movi	r2,32
10107f0c:	f800283a 	ret
10107f10:	0005883a 	mov	r2,zero
10107f14:	003fec06 	br	10107ec8 <__hi0bits+0x10>
10107f18:	10800044 	addi	r2,r2,1
10107f1c:	f800283a 	ret

10107f20 <__lo0bits>:
10107f20:	20c00017 	ldw	r3,0(r4)
10107f24:	188001cc 	andi	r2,r3,7
10107f28:	10000826 	beq	r2,zero,10107f4c <__lo0bits+0x2c>
10107f2c:	1880004c 	andi	r2,r3,1
10107f30:	1000211e 	bne	r2,zero,10107fb8 <__lo0bits+0x98>
10107f34:	1880008c 	andi	r2,r3,2
10107f38:	1000211e 	bne	r2,zero,10107fc0 <__lo0bits+0xa0>
10107f3c:	1806d0ba 	srli	r3,r3,2
10107f40:	00800084 	movi	r2,2
10107f44:	20c00015 	stw	r3,0(r4)
10107f48:	f800283a 	ret
10107f4c:	18bfffcc 	andi	r2,r3,65535
10107f50:	10001326 	beq	r2,zero,10107fa0 <__lo0bits+0x80>
10107f54:	0005883a 	mov	r2,zero
10107f58:	19403fcc 	andi	r5,r3,255
10107f5c:	2800021e 	bne	r5,zero,10107f68 <__lo0bits+0x48>
10107f60:	1806d23a 	srli	r3,r3,8
10107f64:	10800204 	addi	r2,r2,8
10107f68:	194003cc 	andi	r5,r3,15
10107f6c:	2800021e 	bne	r5,zero,10107f78 <__lo0bits+0x58>
10107f70:	1806d13a 	srli	r3,r3,4
10107f74:	10800104 	addi	r2,r2,4
10107f78:	194000cc 	andi	r5,r3,3
10107f7c:	2800021e 	bne	r5,zero,10107f88 <__lo0bits+0x68>
10107f80:	1806d0ba 	srli	r3,r3,2
10107f84:	10800084 	addi	r2,r2,2
10107f88:	1940004c 	andi	r5,r3,1
10107f8c:	2800081e 	bne	r5,zero,10107fb0 <__lo0bits+0x90>
10107f90:	1806d07a 	srli	r3,r3,1
10107f94:	1800051e 	bne	r3,zero,10107fac <__lo0bits+0x8c>
10107f98:	00800804 	movi	r2,32
10107f9c:	f800283a 	ret
10107fa0:	1806d43a 	srli	r3,r3,16
10107fa4:	00800404 	movi	r2,16
10107fa8:	003feb06 	br	10107f58 <__lo0bits+0x38>
10107fac:	10800044 	addi	r2,r2,1
10107fb0:	20c00015 	stw	r3,0(r4)
10107fb4:	f800283a 	ret
10107fb8:	0005883a 	mov	r2,zero
10107fbc:	f800283a 	ret
10107fc0:	1806d07a 	srli	r3,r3,1
10107fc4:	00800044 	movi	r2,1
10107fc8:	20c00015 	stw	r3,0(r4)
10107fcc:	f800283a 	ret

10107fd0 <__i2b>:
10107fd0:	defffd04 	addi	sp,sp,-12
10107fd4:	dc000015 	stw	r16,0(sp)
10107fd8:	04000044 	movi	r16,1
10107fdc:	dc400115 	stw	r17,4(sp)
10107fe0:	2823883a 	mov	r17,r5
10107fe4:	800b883a 	mov	r5,r16
10107fe8:	dfc00215 	stw	ra,8(sp)
10107fec:	0107bc40 	call	10107bc4 <_Balloc>
10107ff0:	14400515 	stw	r17,20(r2)
10107ff4:	14000415 	stw	r16,16(r2)
10107ff8:	dfc00217 	ldw	ra,8(sp)
10107ffc:	dc400117 	ldw	r17,4(sp)
10108000:	dc000017 	ldw	r16,0(sp)
10108004:	dec00304 	addi	sp,sp,12
10108008:	f800283a 	ret

1010800c <__multiply>:
1010800c:	defffa04 	addi	sp,sp,-24
10108010:	dcc00315 	stw	r19,12(sp)
10108014:	dc800215 	stw	r18,8(sp)
10108018:	34c00417 	ldw	r19,16(r6)
1010801c:	2c800417 	ldw	r18,16(r5)
10108020:	dd000415 	stw	r20,16(sp)
10108024:	dc400115 	stw	r17,4(sp)
10108028:	dfc00515 	stw	ra,20(sp)
1010802c:	dc000015 	stw	r16,0(sp)
10108030:	2829883a 	mov	r20,r5
10108034:	3023883a 	mov	r17,r6
10108038:	94c0050e 	bge	r18,r19,10108050 <__multiply+0x44>
1010803c:	9007883a 	mov	r3,r18
10108040:	3029883a 	mov	r20,r6
10108044:	9825883a 	mov	r18,r19
10108048:	2823883a 	mov	r17,r5
1010804c:	1827883a 	mov	r19,r3
10108050:	a0800217 	ldw	r2,8(r20)
10108054:	94e1883a 	add	r16,r18,r19
10108058:	a1400117 	ldw	r5,4(r20)
1010805c:	1400010e 	bge	r2,r16,10108064 <__multiply+0x58>
10108060:	29400044 	addi	r5,r5,1
10108064:	0107bc40 	call	10107bc4 <_Balloc>
10108068:	8415883a 	add	r10,r16,r16
1010806c:	12c00504 	addi	r11,r2,20
10108070:	5295883a 	add	r10,r10,r10
10108074:	5a95883a 	add	r10,r11,r10
10108078:	5807883a 	mov	r3,r11
1010807c:	5a80032e 	bgeu	r11,r10,1010808c <__multiply+0x80>
10108080:	18000015 	stw	zero,0(r3)
10108084:	18c00104 	addi	r3,r3,4
10108088:	1abffd36 	bltu	r3,r10,10108080 <__multiply+0x74>
1010808c:	9ce7883a 	add	r19,r19,r19
10108090:	94a5883a 	add	r18,r18,r18
10108094:	89800504 	addi	r6,r17,20
10108098:	9ce7883a 	add	r19,r19,r19
1010809c:	a3400504 	addi	r13,r20,20
101080a0:	94a5883a 	add	r18,r18,r18
101080a4:	34d9883a 	add	r12,r6,r19
101080a8:	6c93883a 	add	r9,r13,r18
101080ac:	3300422e 	bgeu	r6,r12,101081b8 <__multiply+0x1ac>
101080b0:	37c00017 	ldw	ra,0(r6)
101080b4:	fbffffcc 	andi	r15,ra,65535
101080b8:	78001b26 	beq	r15,zero,10108128 <__multiply+0x11c>
101080bc:	5811883a 	mov	r8,r11
101080c0:	681d883a 	mov	r14,r13
101080c4:	000f883a 	mov	r7,zero
101080c8:	71000017 	ldw	r4,0(r14)
101080cc:	40c00017 	ldw	r3,0(r8)
101080d0:	73800104 	addi	r14,r14,4
101080d4:	217fffcc 	andi	r5,r4,65535
101080d8:	2bcb383a 	mul	r5,r5,r15
101080dc:	2008d43a 	srli	r4,r4,16
101080e0:	1c7fffcc 	andi	r17,r3,65535
101080e4:	2c4b883a 	add	r5,r5,r17
101080e8:	29cb883a 	add	r5,r5,r7
101080ec:	23c9383a 	mul	r4,r4,r15
101080f0:	1806d43a 	srli	r3,r3,16
101080f4:	280ed43a 	srli	r7,r5,16
101080f8:	297fffcc 	andi	r5,r5,65535
101080fc:	20c7883a 	add	r3,r4,r3
10108100:	19c7883a 	add	r3,r3,r7
10108104:	1808943a 	slli	r4,r3,16
10108108:	4023883a 	mov	r17,r8
1010810c:	180ed43a 	srli	r7,r3,16
10108110:	214ab03a 	or	r5,r4,r5
10108114:	41400015 	stw	r5,0(r8)
10108118:	42000104 	addi	r8,r8,4
1010811c:	727fea36 	bltu	r14,r9,101080c8 <__multiply+0xbc>
10108120:	89c00115 	stw	r7,4(r17)
10108124:	37c00017 	ldw	ra,0(r6)
10108128:	f83ed43a 	srli	ra,ra,16
1010812c:	f8001f26 	beq	ra,zero,101081ac <__multiply+0x1a0>
10108130:	58c00017 	ldw	r3,0(r11)
10108134:	681d883a 	mov	r14,r13
10108138:	581f883a 	mov	r15,r11
1010813c:	1811883a 	mov	r8,r3
10108140:	5825883a 	mov	r18,r11
10108144:	000f883a 	mov	r7,zero
10108148:	00000106 	br	10108150 <__multiply+0x144>
1010814c:	8825883a 	mov	r18,r17
10108150:	7140000b 	ldhu	r5,0(r14)
10108154:	4010d43a 	srli	r8,r8,16
10108158:	193fffcc 	andi	r4,r3,65535
1010815c:	2fcb383a 	mul	r5,r5,ra
10108160:	7bc00104 	addi	r15,r15,4
10108164:	73800104 	addi	r14,r14,4
10108168:	2a0b883a 	add	r5,r5,r8
1010816c:	29cb883a 	add	r5,r5,r7
10108170:	2806943a 	slli	r3,r5,16
10108174:	94400104 	addi	r17,r18,4
10108178:	280ad43a 	srli	r5,r5,16
1010817c:	1908b03a 	or	r4,r3,r4
10108180:	793fff15 	stw	r4,-4(r15)
10108184:	70ffff17 	ldw	r3,-4(r14)
10108188:	8a000017 	ldw	r8,0(r17)
1010818c:	1806d43a 	srli	r3,r3,16
10108190:	413fffcc 	andi	r4,r8,65535
10108194:	1fc7383a 	mul	r3,r3,ra
10108198:	1907883a 	add	r3,r3,r4
1010819c:	1947883a 	add	r3,r3,r5
101081a0:	180ed43a 	srli	r7,r3,16
101081a4:	727fe936 	bltu	r14,r9,1010814c <__multiply+0x140>
101081a8:	90c00115 	stw	r3,4(r18)
101081ac:	31800104 	addi	r6,r6,4
101081b0:	5ac00104 	addi	r11,r11,4
101081b4:	333fbe36 	bltu	r6,r12,101080b0 <__multiply+0xa4>
101081b8:	0400090e 	bge	zero,r16,101081e0 <__multiply+0x1d4>
101081bc:	50ffff17 	ldw	r3,-4(r10)
101081c0:	52bfff04 	addi	r10,r10,-4
101081c4:	18000326 	beq	r3,zero,101081d4 <__multiply+0x1c8>
101081c8:	00000506 	br	101081e0 <__multiply+0x1d4>
101081cc:	50c00017 	ldw	r3,0(r10)
101081d0:	1800031e 	bne	r3,zero,101081e0 <__multiply+0x1d4>
101081d4:	843fffc4 	addi	r16,r16,-1
101081d8:	52bfff04 	addi	r10,r10,-4
101081dc:	803ffb1e 	bne	r16,zero,101081cc <__multiply+0x1c0>
101081e0:	14000415 	stw	r16,16(r2)
101081e4:	dfc00517 	ldw	ra,20(sp)
101081e8:	dd000417 	ldw	r20,16(sp)
101081ec:	dcc00317 	ldw	r19,12(sp)
101081f0:	dc800217 	ldw	r18,8(sp)
101081f4:	dc400117 	ldw	r17,4(sp)
101081f8:	dc000017 	ldw	r16,0(sp)
101081fc:	dec00604 	addi	sp,sp,24
10108200:	f800283a 	ret

10108204 <__pow5mult>:
10108204:	defffa04 	addi	sp,sp,-24
10108208:	dcc00315 	stw	r19,12(sp)
1010820c:	dc000015 	stw	r16,0(sp)
10108210:	dfc00515 	stw	ra,20(sp)
10108214:	dd000415 	stw	r20,16(sp)
10108218:	dc800215 	stw	r18,8(sp)
1010821c:	dc400115 	stw	r17,4(sp)
10108220:	308000cc 	andi	r2,r6,3
10108224:	3021883a 	mov	r16,r6
10108228:	2027883a 	mov	r19,r4
1010822c:	10002f1e 	bne	r2,zero,101082ec <__pow5mult+0xe8>
10108230:	2825883a 	mov	r18,r5
10108234:	8021d0ba 	srai	r16,r16,2
10108238:	80001a26 	beq	r16,zero,101082a4 <__pow5mult+0xa0>
1010823c:	9c401217 	ldw	r17,72(r19)
10108240:	8800061e 	bne	r17,zero,1010825c <__pow5mult+0x58>
10108244:	00003406 	br	10108318 <__pow5mult+0x114>
10108248:	8021d07a 	srai	r16,r16,1
1010824c:	80001526 	beq	r16,zero,101082a4 <__pow5mult+0xa0>
10108250:	88800017 	ldw	r2,0(r17)
10108254:	10001c26 	beq	r2,zero,101082c8 <__pow5mult+0xc4>
10108258:	1023883a 	mov	r17,r2
1010825c:	8080004c 	andi	r2,r16,1
10108260:	103ff926 	beq	r2,zero,10108248 <__pow5mult+0x44>
10108264:	880d883a 	mov	r6,r17
10108268:	900b883a 	mov	r5,r18
1010826c:	9809883a 	mov	r4,r19
10108270:	010800c0 	call	1010800c <__multiply>
10108274:	90001b26 	beq	r18,zero,101082e4 <__pow5mult+0xe0>
10108278:	91000117 	ldw	r4,4(r18)
1010827c:	98c01317 	ldw	r3,76(r19)
10108280:	8021d07a 	srai	r16,r16,1
10108284:	2109883a 	add	r4,r4,r4
10108288:	2109883a 	add	r4,r4,r4
1010828c:	1907883a 	add	r3,r3,r4
10108290:	19000017 	ldw	r4,0(r3)
10108294:	91000015 	stw	r4,0(r18)
10108298:	1c800015 	stw	r18,0(r3)
1010829c:	1025883a 	mov	r18,r2
101082a0:	803feb1e 	bne	r16,zero,10108250 <__pow5mult+0x4c>
101082a4:	9005883a 	mov	r2,r18
101082a8:	dfc00517 	ldw	ra,20(sp)
101082ac:	dd000417 	ldw	r20,16(sp)
101082b0:	dcc00317 	ldw	r19,12(sp)
101082b4:	dc800217 	ldw	r18,8(sp)
101082b8:	dc400117 	ldw	r17,4(sp)
101082bc:	dc000017 	ldw	r16,0(sp)
101082c0:	dec00604 	addi	sp,sp,24
101082c4:	f800283a 	ret
101082c8:	880d883a 	mov	r6,r17
101082cc:	880b883a 	mov	r5,r17
101082d0:	9809883a 	mov	r4,r19
101082d4:	010800c0 	call	1010800c <__multiply>
101082d8:	88800015 	stw	r2,0(r17)
101082dc:	10000015 	stw	zero,0(r2)
101082e0:	003fdd06 	br	10108258 <__pow5mult+0x54>
101082e4:	1025883a 	mov	r18,r2
101082e8:	003fd706 	br	10108248 <__pow5mult+0x44>
101082ec:	10bfffc4 	addi	r2,r2,-1
101082f0:	1085883a 	add	r2,r2,r2
101082f4:	00c40474 	movhi	r3,4113
101082f8:	18c3d204 	addi	r3,r3,3912
101082fc:	1085883a 	add	r2,r2,r2
10108300:	1885883a 	add	r2,r3,r2
10108304:	11800017 	ldw	r6,0(r2)
10108308:	000f883a 	mov	r7,zero
1010830c:	0107c940 	call	10107c94 <__multadd>
10108310:	1025883a 	mov	r18,r2
10108314:	003fc706 	br	10108234 <__pow5mult+0x30>
10108318:	05000044 	movi	r20,1
1010831c:	a00b883a 	mov	r5,r20
10108320:	9809883a 	mov	r4,r19
10108324:	0107bc40 	call	10107bc4 <_Balloc>
10108328:	1023883a 	mov	r17,r2
1010832c:	00809c44 	movi	r2,625
10108330:	88800515 	stw	r2,20(r17)
10108334:	8d000415 	stw	r20,16(r17)
10108338:	9c401215 	stw	r17,72(r19)
1010833c:	88000015 	stw	zero,0(r17)
10108340:	003fc606 	br	1010825c <__pow5mult+0x58>

10108344 <__lshift>:
10108344:	defff904 	addi	sp,sp,-28
10108348:	dd400515 	stw	r21,20(sp)
1010834c:	dcc00315 	stw	r19,12(sp)
10108350:	302bd17a 	srai	r21,r6,5
10108354:	2cc00417 	ldw	r19,16(r5)
10108358:	28800217 	ldw	r2,8(r5)
1010835c:	dd000415 	stw	r20,16(sp)
10108360:	ace7883a 	add	r19,r21,r19
10108364:	dc800215 	stw	r18,8(sp)
10108368:	dc400115 	stw	r17,4(sp)
1010836c:	dc000015 	stw	r16,0(sp)
10108370:	dfc00615 	stw	ra,24(sp)
10108374:	9c000044 	addi	r16,r19,1
10108378:	2823883a 	mov	r17,r5
1010837c:	3029883a 	mov	r20,r6
10108380:	2025883a 	mov	r18,r4
10108384:	29400117 	ldw	r5,4(r5)
10108388:	1400030e 	bge	r2,r16,10108398 <__lshift+0x54>
1010838c:	1085883a 	add	r2,r2,r2
10108390:	29400044 	addi	r5,r5,1
10108394:	143ffd16 	blt	r2,r16,1010838c <__lshift+0x48>
10108398:	9009883a 	mov	r4,r18
1010839c:	0107bc40 	call	10107bc4 <_Balloc>
101083a0:	10c00504 	addi	r3,r2,20
101083a4:	0540070e 	bge	zero,r21,101083c4 <__lshift+0x80>
101083a8:	ad6b883a 	add	r21,r21,r21
101083ac:	ad6b883a 	add	r21,r21,r21
101083b0:	1809883a 	mov	r4,r3
101083b4:	1d47883a 	add	r3,r3,r21
101083b8:	20000015 	stw	zero,0(r4)
101083bc:	21000104 	addi	r4,r4,4
101083c0:	193ffd1e 	bne	r3,r4,101083b8 <__lshift+0x74>
101083c4:	8a000417 	ldw	r8,16(r17)
101083c8:	89000504 	addi	r4,r17,20
101083cc:	a18007cc 	andi	r6,r20,31
101083d0:	4211883a 	add	r8,r8,r8
101083d4:	4211883a 	add	r8,r8,r8
101083d8:	2211883a 	add	r8,r4,r8
101083dc:	30002326 	beq	r6,zero,1010846c <__lshift+0x128>
101083e0:	02400804 	movi	r9,32
101083e4:	4993c83a 	sub	r9,r9,r6
101083e8:	000b883a 	mov	r5,zero
101083ec:	21c00017 	ldw	r7,0(r4)
101083f0:	1815883a 	mov	r10,r3
101083f4:	18c00104 	addi	r3,r3,4
101083f8:	398e983a 	sll	r7,r7,r6
101083fc:	21000104 	addi	r4,r4,4
10108400:	394ab03a 	or	r5,r7,r5
10108404:	197fff15 	stw	r5,-4(r3)
10108408:	217fff17 	ldw	r5,-4(r4)
1010840c:	2a4ad83a 	srl	r5,r5,r9
10108410:	223ff636 	bltu	r4,r8,101083ec <__lshift+0xa8>
10108414:	51400115 	stw	r5,4(r10)
10108418:	28001a1e 	bne	r5,zero,10108484 <__lshift+0x140>
1010841c:	843fffc4 	addi	r16,r16,-1
10108420:	14000415 	stw	r16,16(r2)
10108424:	88000826 	beq	r17,zero,10108448 <__lshift+0x104>
10108428:	89000117 	ldw	r4,4(r17)
1010842c:	90c01317 	ldw	r3,76(r18)
10108430:	2109883a 	add	r4,r4,r4
10108434:	2109883a 	add	r4,r4,r4
10108438:	1907883a 	add	r3,r3,r4
1010843c:	19000017 	ldw	r4,0(r3)
10108440:	89000015 	stw	r4,0(r17)
10108444:	1c400015 	stw	r17,0(r3)
10108448:	dfc00617 	ldw	ra,24(sp)
1010844c:	dd400517 	ldw	r21,20(sp)
10108450:	dd000417 	ldw	r20,16(sp)
10108454:	dcc00317 	ldw	r19,12(sp)
10108458:	dc800217 	ldw	r18,8(sp)
1010845c:	dc400117 	ldw	r17,4(sp)
10108460:	dc000017 	ldw	r16,0(sp)
10108464:	dec00704 	addi	sp,sp,28
10108468:	f800283a 	ret
1010846c:	21400017 	ldw	r5,0(r4)
10108470:	18c00104 	addi	r3,r3,4
10108474:	21000104 	addi	r4,r4,4
10108478:	197fff15 	stw	r5,-4(r3)
1010847c:	223ffb36 	bltu	r4,r8,1010846c <__lshift+0x128>
10108480:	003fe606 	br	1010841c <__lshift+0xd8>
10108484:	9c000084 	addi	r16,r19,2
10108488:	003fe406 	br	1010841c <__lshift+0xd8>

1010848c <__mcmp>:
1010848c:	20800417 	ldw	r2,16(r4)
10108490:	28c00417 	ldw	r3,16(r5)
10108494:	10c5c83a 	sub	r2,r2,r3
10108498:	1000111e 	bne	r2,zero,101084e0 <__mcmp+0x54>
1010849c:	18c7883a 	add	r3,r3,r3
101084a0:	18c7883a 	add	r3,r3,r3
101084a4:	21000504 	addi	r4,r4,20
101084a8:	29400504 	addi	r5,r5,20
101084ac:	20c5883a 	add	r2,r4,r3
101084b0:	28cb883a 	add	r5,r5,r3
101084b4:	00000106 	br	101084bc <__mcmp+0x30>
101084b8:	20800a2e 	bgeu	r4,r2,101084e4 <__mcmp+0x58>
101084bc:	10bfff04 	addi	r2,r2,-4
101084c0:	297fff04 	addi	r5,r5,-4
101084c4:	11800017 	ldw	r6,0(r2)
101084c8:	28c00017 	ldw	r3,0(r5)
101084cc:	30fffa26 	beq	r6,r3,101084b8 <__mcmp+0x2c>
101084d0:	30c00236 	bltu	r6,r3,101084dc <__mcmp+0x50>
101084d4:	00800044 	movi	r2,1
101084d8:	f800283a 	ret
101084dc:	00bfffc4 	movi	r2,-1
101084e0:	f800283a 	ret
101084e4:	0005883a 	mov	r2,zero
101084e8:	f800283a 	ret

101084ec <__mdiff>:
101084ec:	28c00417 	ldw	r3,16(r5)
101084f0:	30800417 	ldw	r2,16(r6)
101084f4:	defffa04 	addi	sp,sp,-24
101084f8:	dcc00315 	stw	r19,12(sp)
101084fc:	dc800215 	stw	r18,8(sp)
10108500:	dfc00515 	stw	ra,20(sp)
10108504:	dd000415 	stw	r20,16(sp)
10108508:	dc400115 	stw	r17,4(sp)
1010850c:	dc000015 	stw	r16,0(sp)
10108510:	1887c83a 	sub	r3,r3,r2
10108514:	2825883a 	mov	r18,r5
10108518:	3027883a 	mov	r19,r6
1010851c:	1800141e 	bne	r3,zero,10108570 <__mdiff+0x84>
10108520:	1085883a 	add	r2,r2,r2
10108524:	1085883a 	add	r2,r2,r2
10108528:	2a000504 	addi	r8,r5,20
1010852c:	34000504 	addi	r16,r6,20
10108530:	4087883a 	add	r3,r8,r2
10108534:	8085883a 	add	r2,r16,r2
10108538:	00000106 	br	10108540 <__mdiff+0x54>
1010853c:	40c0592e 	bgeu	r8,r3,101086a4 <__mdiff+0x1b8>
10108540:	18ffff04 	addi	r3,r3,-4
10108544:	10bfff04 	addi	r2,r2,-4
10108548:	19c00017 	ldw	r7,0(r3)
1010854c:	11400017 	ldw	r5,0(r2)
10108550:	397ffa26 	beq	r7,r5,1010853c <__mdiff+0x50>
10108554:	3940592e 	bgeu	r7,r5,101086bc <__mdiff+0x1d0>
10108558:	9005883a 	mov	r2,r18
1010855c:	4023883a 	mov	r17,r8
10108560:	9825883a 	mov	r18,r19
10108564:	05000044 	movi	r20,1
10108568:	1027883a 	mov	r19,r2
1010856c:	00000406 	br	10108580 <__mdiff+0x94>
10108570:	18005616 	blt	r3,zero,101086cc <__mdiff+0x1e0>
10108574:	34400504 	addi	r17,r6,20
10108578:	2c000504 	addi	r16,r5,20
1010857c:	0029883a 	mov	r20,zero
10108580:	91400117 	ldw	r5,4(r18)
10108584:	0107bc40 	call	10107bc4 <_Balloc>
10108588:	92400417 	ldw	r9,16(r18)
1010858c:	9b000417 	ldw	r12,16(r19)
10108590:	12c00504 	addi	r11,r2,20
10108594:	4a51883a 	add	r8,r9,r9
10108598:	6319883a 	add	r12,r12,r12
1010859c:	4211883a 	add	r8,r8,r8
101085a0:	6319883a 	add	r12,r12,r12
101085a4:	15000315 	stw	r20,12(r2)
101085a8:	8211883a 	add	r8,r16,r8
101085ac:	8b19883a 	add	r12,r17,r12
101085b0:	0007883a 	mov	r3,zero
101085b4:	81400017 	ldw	r5,0(r16)
101085b8:	89c00017 	ldw	r7,0(r17)
101085bc:	59800104 	addi	r6,r11,4
101085c0:	293fffcc 	andi	r4,r5,65535
101085c4:	20c7883a 	add	r3,r4,r3
101085c8:	393fffcc 	andi	r4,r7,65535
101085cc:	1909c83a 	sub	r4,r3,r4
101085d0:	280ad43a 	srli	r5,r5,16
101085d4:	380ed43a 	srli	r7,r7,16
101085d8:	2007d43a 	srai	r3,r4,16
101085dc:	213fffcc 	andi	r4,r4,65535
101085e0:	29cbc83a 	sub	r5,r5,r7
101085e4:	28c7883a 	add	r3,r5,r3
101085e8:	180a943a 	slli	r5,r3,16
101085ec:	8c400104 	addi	r17,r17,4
101085f0:	84000104 	addi	r16,r16,4
101085f4:	2908b03a 	or	r4,r5,r4
101085f8:	59000015 	stw	r4,0(r11)
101085fc:	1807d43a 	srai	r3,r3,16
10108600:	3015883a 	mov	r10,r6
10108604:	3017883a 	mov	r11,r6
10108608:	8b3fea36 	bltu	r17,r12,101085b4 <__mdiff+0xc8>
1010860c:	8200162e 	bgeu	r16,r8,10108668 <__mdiff+0x17c>
10108610:	8017883a 	mov	r11,r16
10108614:	59400017 	ldw	r5,0(r11)
10108618:	31800104 	addi	r6,r6,4
1010861c:	5ac00104 	addi	r11,r11,4
10108620:	293fffcc 	andi	r4,r5,65535
10108624:	20c7883a 	add	r3,r4,r3
10108628:	280ed43a 	srli	r7,r5,16
1010862c:	180bd43a 	srai	r5,r3,16
10108630:	193fffcc 	andi	r4,r3,65535
10108634:	3947883a 	add	r3,r7,r5
10108638:	180a943a 	slli	r5,r3,16
1010863c:	1807d43a 	srai	r3,r3,16
10108640:	2908b03a 	or	r4,r5,r4
10108644:	313fff15 	stw	r4,-4(r6)
10108648:	5a3ff236 	bltu	r11,r8,10108614 <__mdiff+0x128>
1010864c:	0406303a 	nor	r3,zero,r16
10108650:	1a07883a 	add	r3,r3,r8
10108654:	1806d0ba 	srli	r3,r3,2
10108658:	18c00044 	addi	r3,r3,1
1010865c:	18c7883a 	add	r3,r3,r3
10108660:	18c7883a 	add	r3,r3,r3
10108664:	50d5883a 	add	r10,r10,r3
10108668:	50ffff04 	addi	r3,r10,-4
1010866c:	2000041e 	bne	r4,zero,10108680 <__mdiff+0x194>
10108670:	18ffff04 	addi	r3,r3,-4
10108674:	19000017 	ldw	r4,0(r3)
10108678:	4a7fffc4 	addi	r9,r9,-1
1010867c:	203ffc26 	beq	r4,zero,10108670 <__mdiff+0x184>
10108680:	12400415 	stw	r9,16(r2)
10108684:	dfc00517 	ldw	ra,20(sp)
10108688:	dd000417 	ldw	r20,16(sp)
1010868c:	dcc00317 	ldw	r19,12(sp)
10108690:	dc800217 	ldw	r18,8(sp)
10108694:	dc400117 	ldw	r17,4(sp)
10108698:	dc000017 	ldw	r16,0(sp)
1010869c:	dec00604 	addi	sp,sp,24
101086a0:	f800283a 	ret
101086a4:	000b883a 	mov	r5,zero
101086a8:	0107bc40 	call	10107bc4 <_Balloc>
101086ac:	00c00044 	movi	r3,1
101086b0:	10c00415 	stw	r3,16(r2)
101086b4:	10000515 	stw	zero,20(r2)
101086b8:	003ff206 	br	10108684 <__mdiff+0x198>
101086bc:	8023883a 	mov	r17,r16
101086c0:	0029883a 	mov	r20,zero
101086c4:	4021883a 	mov	r16,r8
101086c8:	003fad06 	br	10108580 <__mdiff+0x94>
101086cc:	9005883a 	mov	r2,r18
101086d0:	94400504 	addi	r17,r18,20
101086d4:	9c000504 	addi	r16,r19,20
101086d8:	9825883a 	mov	r18,r19
101086dc:	05000044 	movi	r20,1
101086e0:	1027883a 	mov	r19,r2
101086e4:	003fa606 	br	10108580 <__mdiff+0x94>

101086e8 <__ulp>:
101086e8:	295ffc2c 	andhi	r5,r5,32752
101086ec:	00bf3034 	movhi	r2,64704
101086f0:	2887883a 	add	r3,r5,r2
101086f4:	00c0020e 	bge	zero,r3,10108700 <__ulp+0x18>
101086f8:	0005883a 	mov	r2,zero
101086fc:	f800283a 	ret
10108700:	00c7c83a 	sub	r3,zero,r3
10108704:	1807d53a 	srai	r3,r3,20
10108708:	008004c4 	movi	r2,19
1010870c:	10c00b0e 	bge	r2,r3,1010873c <__ulp+0x54>
10108710:	18bffb04 	addi	r2,r3,-20
10108714:	01000784 	movi	r4,30
10108718:	0007883a 	mov	r3,zero
1010871c:	20800516 	blt	r4,r2,10108734 <__ulp+0x4c>
10108720:	010007c4 	movi	r4,31
10108724:	2089c83a 	sub	r4,r4,r2
10108728:	00800044 	movi	r2,1
1010872c:	1104983a 	sll	r2,r2,r4
10108730:	f800283a 	ret
10108734:	00800044 	movi	r2,1
10108738:	f800283a 	ret
1010873c:	01400234 	movhi	r5,8
10108740:	28c7d83a 	sra	r3,r5,r3
10108744:	0005883a 	mov	r2,zero
10108748:	f800283a 	ret

1010874c <__b2d>:
1010874c:	defffa04 	addi	sp,sp,-24
10108750:	dc000015 	stw	r16,0(sp)
10108754:	24000417 	ldw	r16,16(r4)
10108758:	dc400115 	stw	r17,4(sp)
1010875c:	24400504 	addi	r17,r4,20
10108760:	8421883a 	add	r16,r16,r16
10108764:	8421883a 	add	r16,r16,r16
10108768:	8c21883a 	add	r16,r17,r16
1010876c:	dc800215 	stw	r18,8(sp)
10108770:	84bfff17 	ldw	r18,-4(r16)
10108774:	dd000415 	stw	r20,16(sp)
10108778:	dcc00315 	stw	r19,12(sp)
1010877c:	9009883a 	mov	r4,r18
10108780:	2829883a 	mov	r20,r5
10108784:	dfc00515 	stw	ra,20(sp)
10108788:	0107eb80 	call	10107eb8 <__hi0bits>
1010878c:	00c00804 	movi	r3,32
10108790:	1889c83a 	sub	r4,r3,r2
10108794:	a1000015 	stw	r4,0(r20)
10108798:	01000284 	movi	r4,10
1010879c:	84ffff04 	addi	r19,r16,-4
101087a0:	20801216 	blt	r4,r2,101087ec <__b2d+0xa0>
101087a4:	018002c4 	movi	r6,11
101087a8:	308dc83a 	sub	r6,r6,r2
101087ac:	9186d83a 	srl	r3,r18,r6
101087b0:	18cffc34 	orhi	r3,r3,16368
101087b4:	8cc0212e 	bgeu	r17,r19,1010883c <__b2d+0xf0>
101087b8:	813ffe17 	ldw	r4,-8(r16)
101087bc:	218cd83a 	srl	r6,r4,r6
101087c0:	10800544 	addi	r2,r2,21
101087c4:	9084983a 	sll	r2,r18,r2
101087c8:	1184b03a 	or	r2,r2,r6
101087cc:	dfc00517 	ldw	ra,20(sp)
101087d0:	dd000417 	ldw	r20,16(sp)
101087d4:	dcc00317 	ldw	r19,12(sp)
101087d8:	dc800217 	ldw	r18,8(sp)
101087dc:	dc400117 	ldw	r17,4(sp)
101087e0:	dc000017 	ldw	r16,0(sp)
101087e4:	dec00604 	addi	sp,sp,24
101087e8:	f800283a 	ret
101087ec:	8cc00f2e 	bgeu	r17,r19,1010882c <__b2d+0xe0>
101087f0:	117ffd44 	addi	r5,r2,-11
101087f4:	80bffe17 	ldw	r2,-8(r16)
101087f8:	28000e26 	beq	r5,zero,10108834 <__b2d+0xe8>
101087fc:	1949c83a 	sub	r4,r3,r5
10108800:	9164983a 	sll	r18,r18,r5
10108804:	1106d83a 	srl	r3,r2,r4
10108808:	81bffe04 	addi	r6,r16,-8
1010880c:	948ffc34 	orhi	r18,r18,16368
10108810:	90c6b03a 	or	r3,r18,r3
10108814:	89800e2e 	bgeu	r17,r6,10108850 <__b2d+0x104>
10108818:	81bffd17 	ldw	r6,-12(r16)
1010881c:	1144983a 	sll	r2,r2,r5
10108820:	310ad83a 	srl	r5,r6,r4
10108824:	2884b03a 	or	r2,r5,r2
10108828:	003fe806 	br	101087cc <__b2d+0x80>
1010882c:	10bffd44 	addi	r2,r2,-11
10108830:	1000041e 	bne	r2,zero,10108844 <__b2d+0xf8>
10108834:	90cffc34 	orhi	r3,r18,16368
10108838:	003fe406 	br	101087cc <__b2d+0x80>
1010883c:	000d883a 	mov	r6,zero
10108840:	003fdf06 	br	101087c0 <__b2d+0x74>
10108844:	90a4983a 	sll	r18,r18,r2
10108848:	0005883a 	mov	r2,zero
1010884c:	003ff906 	br	10108834 <__b2d+0xe8>
10108850:	1144983a 	sll	r2,r2,r5
10108854:	003fdd06 	br	101087cc <__b2d+0x80>

10108858 <__d2b>:
10108858:	defff804 	addi	sp,sp,-32
1010885c:	dc000215 	stw	r16,8(sp)
10108860:	3021883a 	mov	r16,r6
10108864:	dc400315 	stw	r17,12(sp)
10108868:	8022907a 	slli	r17,r16,1
1010886c:	dd000615 	stw	r20,24(sp)
10108870:	2829883a 	mov	r20,r5
10108874:	01400044 	movi	r5,1
10108878:	dcc00515 	stw	r19,20(sp)
1010887c:	dc800415 	stw	r18,16(sp)
10108880:	dfc00715 	stw	ra,28(sp)
10108884:	3825883a 	mov	r18,r7
10108888:	8822d57a 	srli	r17,r17,21
1010888c:	0107bc40 	call	10107bc4 <_Balloc>
10108890:	1027883a 	mov	r19,r2
10108894:	00800434 	movhi	r2,16
10108898:	10bfffc4 	addi	r2,r2,-1
1010889c:	808c703a 	and	r6,r16,r2
101088a0:	88000126 	beq	r17,zero,101088a8 <__d2b+0x50>
101088a4:	31800434 	orhi	r6,r6,16
101088a8:	d9800015 	stw	r6,0(sp)
101088ac:	a0002426 	beq	r20,zero,10108940 <__d2b+0xe8>
101088b0:	d9000104 	addi	r4,sp,4
101088b4:	dd000115 	stw	r20,4(sp)
101088b8:	0107f200 	call	10107f20 <__lo0bits>
101088bc:	d8c00017 	ldw	r3,0(sp)
101088c0:	10002f1e 	bne	r2,zero,10108980 <__d2b+0x128>
101088c4:	d9000117 	ldw	r4,4(sp)
101088c8:	99000515 	stw	r4,20(r19)
101088cc:	1821003a 	cmpeq	r16,r3,zero
101088d0:	01000084 	movi	r4,2
101088d4:	2421c83a 	sub	r16,r4,r16
101088d8:	98c00615 	stw	r3,24(r19)
101088dc:	9c000415 	stw	r16,16(r19)
101088e0:	88001f1e 	bne	r17,zero,10108960 <__d2b+0x108>
101088e4:	10bef384 	addi	r2,r2,-1074
101088e8:	90800015 	stw	r2,0(r18)
101088ec:	00900034 	movhi	r2,16384
101088f0:	10bfffc4 	addi	r2,r2,-1
101088f4:	8085883a 	add	r2,r16,r2
101088f8:	1085883a 	add	r2,r2,r2
101088fc:	1085883a 	add	r2,r2,r2
10108900:	9885883a 	add	r2,r19,r2
10108904:	11000517 	ldw	r4,20(r2)
10108908:	8020917a 	slli	r16,r16,5
1010890c:	0107eb80 	call	10107eb8 <__hi0bits>
10108910:	d8c00817 	ldw	r3,32(sp)
10108914:	8085c83a 	sub	r2,r16,r2
10108918:	18800015 	stw	r2,0(r3)
1010891c:	9805883a 	mov	r2,r19
10108920:	dfc00717 	ldw	ra,28(sp)
10108924:	dd000617 	ldw	r20,24(sp)
10108928:	dcc00517 	ldw	r19,20(sp)
1010892c:	dc800417 	ldw	r18,16(sp)
10108930:	dc400317 	ldw	r17,12(sp)
10108934:	dc000217 	ldw	r16,8(sp)
10108938:	dec00804 	addi	sp,sp,32
1010893c:	f800283a 	ret
10108940:	d809883a 	mov	r4,sp
10108944:	0107f200 	call	10107f20 <__lo0bits>
10108948:	d8c00017 	ldw	r3,0(sp)
1010894c:	04000044 	movi	r16,1
10108950:	9c000415 	stw	r16,16(r19)
10108954:	98c00515 	stw	r3,20(r19)
10108958:	10800804 	addi	r2,r2,32
1010895c:	883fe126 	beq	r17,zero,101088e4 <__d2b+0x8c>
10108960:	00c00d44 	movi	r3,53
10108964:	8c7ef344 	addi	r17,r17,-1075
10108968:	88a3883a 	add	r17,r17,r2
1010896c:	1885c83a 	sub	r2,r3,r2
10108970:	d8c00817 	ldw	r3,32(sp)
10108974:	94400015 	stw	r17,0(r18)
10108978:	18800015 	stw	r2,0(r3)
1010897c:	003fe706 	br	1010891c <__d2b+0xc4>
10108980:	01000804 	movi	r4,32
10108984:	2089c83a 	sub	r4,r4,r2
10108988:	1908983a 	sll	r4,r3,r4
1010898c:	d9400117 	ldw	r5,4(sp)
10108990:	1886d83a 	srl	r3,r3,r2
10108994:	2148b03a 	or	r4,r4,r5
10108998:	99000515 	stw	r4,20(r19)
1010899c:	d8c00015 	stw	r3,0(sp)
101089a0:	003fca06 	br	101088cc <__d2b+0x74>

101089a4 <__ratio>:
101089a4:	defff904 	addi	sp,sp,-28
101089a8:	dc400315 	stw	r17,12(sp)
101089ac:	2823883a 	mov	r17,r5
101089b0:	d9400104 	addi	r5,sp,4
101089b4:	dfc00615 	stw	ra,24(sp)
101089b8:	dcc00515 	stw	r19,20(sp)
101089bc:	dc800415 	stw	r18,16(sp)
101089c0:	2027883a 	mov	r19,r4
101089c4:	dc000215 	stw	r16,8(sp)
101089c8:	010874c0 	call	1010874c <__b2d>
101089cc:	d80b883a 	mov	r5,sp
101089d0:	8809883a 	mov	r4,r17
101089d4:	1025883a 	mov	r18,r2
101089d8:	1821883a 	mov	r16,r3
101089dc:	010874c0 	call	1010874c <__b2d>
101089e0:	8a000417 	ldw	r8,16(r17)
101089e4:	99000417 	ldw	r4,16(r19)
101089e8:	d9400117 	ldw	r5,4(sp)
101089ec:	2209c83a 	sub	r4,r4,r8
101089f0:	2010917a 	slli	r8,r4,5
101089f4:	d9000017 	ldw	r4,0(sp)
101089f8:	2909c83a 	sub	r4,r5,r4
101089fc:	4109883a 	add	r4,r8,r4
10108a00:	01000e0e 	bge	zero,r4,10108a3c <__ratio+0x98>
10108a04:	2008953a 	slli	r4,r4,20
10108a08:	2421883a 	add	r16,r4,r16
10108a0c:	100d883a 	mov	r6,r2
10108a10:	180f883a 	mov	r7,r3
10108a14:	9009883a 	mov	r4,r18
10108a18:	800b883a 	mov	r5,r16
10108a1c:	010c8440 	call	1010c844 <__divdf3>
10108a20:	dfc00617 	ldw	ra,24(sp)
10108a24:	dcc00517 	ldw	r19,20(sp)
10108a28:	dc800417 	ldw	r18,16(sp)
10108a2c:	dc400317 	ldw	r17,12(sp)
10108a30:	dc000217 	ldw	r16,8(sp)
10108a34:	dec00704 	addi	sp,sp,28
10108a38:	f800283a 	ret
10108a3c:	2008953a 	slli	r4,r4,20
10108a40:	1907c83a 	sub	r3,r3,r4
10108a44:	003ff106 	br	10108a0c <__ratio+0x68>

10108a48 <_mprec_log10>:
10108a48:	defffe04 	addi	sp,sp,-8
10108a4c:	dc000015 	stw	r16,0(sp)
10108a50:	dfc00115 	stw	ra,4(sp)
10108a54:	008005c4 	movi	r2,23
10108a58:	2021883a 	mov	r16,r4
10108a5c:	11000d0e 	bge	r2,r4,10108a94 <_mprec_log10+0x4c>
10108a60:	0005883a 	mov	r2,zero
10108a64:	00cffc34 	movhi	r3,16368
10108a68:	843fffc4 	addi	r16,r16,-1
10108a6c:	000d883a 	mov	r6,zero
10108a70:	01d00934 	movhi	r7,16420
10108a74:	1009883a 	mov	r4,r2
10108a78:	180b883a 	mov	r5,r3
10108a7c:	010d3840 	call	1010d384 <__muldf3>
10108a80:	803ff91e 	bne	r16,zero,10108a68 <_mprec_log10+0x20>
10108a84:	dfc00117 	ldw	ra,4(sp)
10108a88:	dc000017 	ldw	r16,0(sp)
10108a8c:	dec00204 	addi	sp,sp,8
10108a90:	f800283a 	ret
10108a94:	202090fa 	slli	r16,r4,3
10108a98:	00840474 	movhi	r2,4113
10108a9c:	1083e904 	addi	r2,r2,4004
10108aa0:	1421883a 	add	r16,r2,r16
10108aa4:	80800017 	ldw	r2,0(r16)
10108aa8:	80c00117 	ldw	r3,4(r16)
10108aac:	dfc00117 	ldw	ra,4(sp)
10108ab0:	dc000017 	ldw	r16,0(sp)
10108ab4:	dec00204 	addi	sp,sp,8
10108ab8:	f800283a 	ret

10108abc <__copybits>:
10108abc:	297fffc4 	addi	r5,r5,-1
10108ac0:	280fd17a 	srai	r7,r5,5
10108ac4:	30c00417 	ldw	r3,16(r6)
10108ac8:	30800504 	addi	r2,r6,20
10108acc:	39c00044 	addi	r7,r7,1
10108ad0:	18c7883a 	add	r3,r3,r3
10108ad4:	39cf883a 	add	r7,r7,r7
10108ad8:	18c7883a 	add	r3,r3,r3
10108adc:	39cf883a 	add	r7,r7,r7
10108ae0:	10c7883a 	add	r3,r2,r3
10108ae4:	21cf883a 	add	r7,r4,r7
10108ae8:	10c00d2e 	bgeu	r2,r3,10108b20 <__copybits+0x64>
10108aec:	200b883a 	mov	r5,r4
10108af0:	12000017 	ldw	r8,0(r2)
10108af4:	29400104 	addi	r5,r5,4
10108af8:	10800104 	addi	r2,r2,4
10108afc:	2a3fff15 	stw	r8,-4(r5)
10108b00:	10fffb36 	bltu	r2,r3,10108af0 <__copybits+0x34>
10108b04:	1985c83a 	sub	r2,r3,r6
10108b08:	10bffac4 	addi	r2,r2,-21
10108b0c:	1004d0ba 	srli	r2,r2,2
10108b10:	10800044 	addi	r2,r2,1
10108b14:	1085883a 	add	r2,r2,r2
10108b18:	1085883a 	add	r2,r2,r2
10108b1c:	2089883a 	add	r4,r4,r2
10108b20:	21c0032e 	bgeu	r4,r7,10108b30 <__copybits+0x74>
10108b24:	20000015 	stw	zero,0(r4)
10108b28:	21000104 	addi	r4,r4,4
10108b2c:	21fffd36 	bltu	r4,r7,10108b24 <__copybits+0x68>
10108b30:	f800283a 	ret

10108b34 <__any_on>:
10108b34:	20c00417 	ldw	r3,16(r4)
10108b38:	2805d17a 	srai	r2,r5,5
10108b3c:	21000504 	addi	r4,r4,20
10108b40:	18800d0e 	bge	r3,r2,10108b78 <__any_on+0x44>
10108b44:	18c7883a 	add	r3,r3,r3
10108b48:	18c7883a 	add	r3,r3,r3
10108b4c:	20c7883a 	add	r3,r4,r3
10108b50:	20c0192e 	bgeu	r4,r3,10108bb8 <__any_on+0x84>
10108b54:	18bfff17 	ldw	r2,-4(r3)
10108b58:	18ffff04 	addi	r3,r3,-4
10108b5c:	1000041e 	bne	r2,zero,10108b70 <__any_on+0x3c>
10108b60:	20c0142e 	bgeu	r4,r3,10108bb4 <__any_on+0x80>
10108b64:	18ffff04 	addi	r3,r3,-4
10108b68:	19400017 	ldw	r5,0(r3)
10108b6c:	283ffc26 	beq	r5,zero,10108b60 <__any_on+0x2c>
10108b70:	00800044 	movi	r2,1
10108b74:	f800283a 	ret
10108b78:	10c00a0e 	bge	r2,r3,10108ba4 <__any_on+0x70>
10108b7c:	1085883a 	add	r2,r2,r2
10108b80:	1085883a 	add	r2,r2,r2
10108b84:	294007cc 	andi	r5,r5,31
10108b88:	2087883a 	add	r3,r4,r2
10108b8c:	283ff026 	beq	r5,zero,10108b50 <__any_on+0x1c>
10108b90:	19800017 	ldw	r6,0(r3)
10108b94:	3144d83a 	srl	r2,r6,r5
10108b98:	114a983a 	sll	r5,r2,r5
10108b9c:	317ff41e 	bne	r6,r5,10108b70 <__any_on+0x3c>
10108ba0:	003feb06 	br	10108b50 <__any_on+0x1c>
10108ba4:	1085883a 	add	r2,r2,r2
10108ba8:	1085883a 	add	r2,r2,r2
10108bac:	2087883a 	add	r3,r4,r2
10108bb0:	003fe706 	br	10108b50 <__any_on+0x1c>
10108bb4:	f800283a 	ret
10108bb8:	0005883a 	mov	r2,zero
10108bbc:	f800283a 	ret

10108bc0 <_putc_r>:
10108bc0:	defffc04 	addi	sp,sp,-16
10108bc4:	dc000215 	stw	r16,8(sp)
10108bc8:	dfc00315 	stw	ra,12(sp)
10108bcc:	2021883a 	mov	r16,r4
10108bd0:	20000226 	beq	r4,zero,10108bdc <_putc_r+0x1c>
10108bd4:	20800e17 	ldw	r2,56(r4)
10108bd8:	10001b26 	beq	r2,zero,10108c48 <_putc_r+0x88>
10108bdc:	30800217 	ldw	r2,8(r6)
10108be0:	10bfffc4 	addi	r2,r2,-1
10108be4:	30800215 	stw	r2,8(r6)
10108be8:	10000a16 	blt	r2,zero,10108c14 <_putc_r+0x54>
10108bec:	30800017 	ldw	r2,0(r6)
10108bf0:	11400005 	stb	r5,0(r2)
10108bf4:	30800017 	ldw	r2,0(r6)
10108bf8:	10c00044 	addi	r3,r2,1
10108bfc:	30c00015 	stw	r3,0(r6)
10108c00:	10800003 	ldbu	r2,0(r2)
10108c04:	dfc00317 	ldw	ra,12(sp)
10108c08:	dc000217 	ldw	r16,8(sp)
10108c0c:	dec00404 	addi	sp,sp,16
10108c10:	f800283a 	ret
10108c14:	30c00617 	ldw	r3,24(r6)
10108c18:	10c00616 	blt	r2,r3,10108c34 <_putc_r+0x74>
10108c1c:	30800017 	ldw	r2,0(r6)
10108c20:	00c00284 	movi	r3,10
10108c24:	11400005 	stb	r5,0(r2)
10108c28:	30800017 	ldw	r2,0(r6)
10108c2c:	11400003 	ldbu	r5,0(r2)
10108c30:	28fff11e 	bne	r5,r3,10108bf8 <_putc_r+0x38>
10108c34:	8009883a 	mov	r4,r16
10108c38:	dfc00317 	ldw	ra,12(sp)
10108c3c:	dc000217 	ldw	r16,8(sp)
10108c40:	dec00404 	addi	sp,sp,16
10108c44:	010abb41 	jmpi	1010abb4 <__swbuf_r>
10108c48:	d9400015 	stw	r5,0(sp)
10108c4c:	d9800115 	stw	r6,4(sp)
10108c50:	01061a80 	call	101061a8 <__sinit>
10108c54:	d9800117 	ldw	r6,4(sp)
10108c58:	d9400017 	ldw	r5,0(sp)
10108c5c:	003fdf06 	br	10108bdc <_putc_r+0x1c>

10108c60 <putc>:
10108c60:	00840474 	movhi	r2,4113
10108c64:	defffc04 	addi	sp,sp,-16
10108c68:	108b1c04 	addi	r2,r2,11376
10108c6c:	dc000115 	stw	r16,4(sp)
10108c70:	14000017 	ldw	r16,0(r2)
10108c74:	dc400215 	stw	r17,8(sp)
10108c78:	dfc00315 	stw	ra,12(sp)
10108c7c:	2023883a 	mov	r17,r4
10108c80:	80000226 	beq	r16,zero,10108c8c <putc+0x2c>
10108c84:	80800e17 	ldw	r2,56(r16)
10108c88:	10001a26 	beq	r2,zero,10108cf4 <putc+0x94>
10108c8c:	28800217 	ldw	r2,8(r5)
10108c90:	10bfffc4 	addi	r2,r2,-1
10108c94:	28800215 	stw	r2,8(r5)
10108c98:	10000b16 	blt	r2,zero,10108cc8 <putc+0x68>
10108c9c:	28800017 	ldw	r2,0(r5)
10108ca0:	14400005 	stb	r17,0(r2)
10108ca4:	28800017 	ldw	r2,0(r5)
10108ca8:	10c00044 	addi	r3,r2,1
10108cac:	28c00015 	stw	r3,0(r5)
10108cb0:	10800003 	ldbu	r2,0(r2)
10108cb4:	dfc00317 	ldw	ra,12(sp)
10108cb8:	dc400217 	ldw	r17,8(sp)
10108cbc:	dc000117 	ldw	r16,4(sp)
10108cc0:	dec00404 	addi	sp,sp,16
10108cc4:	f800283a 	ret
10108cc8:	28c00617 	ldw	r3,24(r5)
10108ccc:	10c00e16 	blt	r2,r3,10108d08 <putc+0xa8>
10108cd0:	28800017 	ldw	r2,0(r5)
10108cd4:	01000284 	movi	r4,10
10108cd8:	14400005 	stb	r17,0(r2)
10108cdc:	28800017 	ldw	r2,0(r5)
10108ce0:	10c00003 	ldbu	r3,0(r2)
10108ce4:	193ff01e 	bne	r3,r4,10108ca8 <putc+0x48>
10108ce8:	280d883a 	mov	r6,r5
10108cec:	180b883a 	mov	r5,r3
10108cf0:	00000706 	br	10108d10 <putc+0xb0>
10108cf4:	8009883a 	mov	r4,r16
10108cf8:	d9400015 	stw	r5,0(sp)
10108cfc:	01061a80 	call	101061a8 <__sinit>
10108d00:	d9400017 	ldw	r5,0(sp)
10108d04:	003fe106 	br	10108c8c <putc+0x2c>
10108d08:	280d883a 	mov	r6,r5
10108d0c:	880b883a 	mov	r5,r17
10108d10:	8009883a 	mov	r4,r16
10108d14:	dfc00317 	ldw	ra,12(sp)
10108d18:	dc400217 	ldw	r17,8(sp)
10108d1c:	dc000117 	ldw	r16,4(sp)
10108d20:	dec00404 	addi	sp,sp,16
10108d24:	010abb41 	jmpi	1010abb4 <__swbuf_r>

10108d28 <_realloc_r>:
10108d28:	defff604 	addi	sp,sp,-40
10108d2c:	dc800215 	stw	r18,8(sp)
10108d30:	dfc00915 	stw	ra,36(sp)
10108d34:	df000815 	stw	fp,32(sp)
10108d38:	ddc00715 	stw	r23,28(sp)
10108d3c:	dd800615 	stw	r22,24(sp)
10108d40:	dd400515 	stw	r21,20(sp)
10108d44:	dd000415 	stw	r20,16(sp)
10108d48:	dcc00315 	stw	r19,12(sp)
10108d4c:	dc400115 	stw	r17,4(sp)
10108d50:	dc000015 	stw	r16,0(sp)
10108d54:	3025883a 	mov	r18,r6
10108d58:	2800b726 	beq	r5,zero,10109038 <_realloc_r+0x310>
10108d5c:	282b883a 	mov	r21,r5
10108d60:	2029883a 	mov	r20,r4
10108d64:	010eb7c0 	call	1010eb7c <__malloc_lock>
10108d68:	a8bfff17 	ldw	r2,-4(r21)
10108d6c:	043fff04 	movi	r16,-4
10108d70:	90c002c4 	addi	r3,r18,11
10108d74:	01000584 	movi	r4,22
10108d78:	acfffe04 	addi	r19,r21,-8
10108d7c:	1420703a 	and	r16,r2,r16
10108d80:	20c0332e 	bgeu	r4,r3,10108e50 <_realloc_r+0x128>
10108d84:	047ffe04 	movi	r17,-8
10108d88:	1c62703a 	and	r17,r3,r17
10108d8c:	8807883a 	mov	r3,r17
10108d90:	88005816 	blt	r17,zero,10108ef4 <_realloc_r+0x1cc>
10108d94:	8c805736 	bltu	r17,r18,10108ef4 <_realloc_r+0x1cc>
10108d98:	80c0300e 	bge	r16,r3,10108e5c <_realloc_r+0x134>
10108d9c:	07040474 	movhi	fp,4113
10108da0:	e7059704 	addi	fp,fp,5724
10108da4:	e1c00217 	ldw	r7,8(fp)
10108da8:	9c09883a 	add	r4,r19,r16
10108dac:	22000117 	ldw	r8,4(r4)
10108db0:	21c06326 	beq	r4,r7,10108f40 <_realloc_r+0x218>
10108db4:	017fff84 	movi	r5,-2
10108db8:	414a703a 	and	r5,r8,r5
10108dbc:	214b883a 	add	r5,r4,r5
10108dc0:	29800117 	ldw	r6,4(r5)
10108dc4:	3180004c 	andi	r6,r6,1
10108dc8:	30003f26 	beq	r6,zero,10108ec8 <_realloc_r+0x1a0>
10108dcc:	1080004c 	andi	r2,r2,1
10108dd0:	10008326 	beq	r2,zero,10108fe0 <_realloc_r+0x2b8>
10108dd4:	900b883a 	mov	r5,r18
10108dd8:	a009883a 	mov	r4,r20
10108ddc:	0106f080 	call	10106f08 <_malloc_r>
10108de0:	1025883a 	mov	r18,r2
10108de4:	10011e26 	beq	r2,zero,10109260 <_realloc_r+0x538>
10108de8:	a93fff17 	ldw	r4,-4(r21)
10108dec:	10fffe04 	addi	r3,r2,-8
10108df0:	00bfff84 	movi	r2,-2
10108df4:	2084703a 	and	r2,r4,r2
10108df8:	9885883a 	add	r2,r19,r2
10108dfc:	1880ee26 	beq	r3,r2,101091b8 <_realloc_r+0x490>
10108e00:	81bfff04 	addi	r6,r16,-4
10108e04:	00800904 	movi	r2,36
10108e08:	1180b836 	bltu	r2,r6,101090ec <_realloc_r+0x3c4>
10108e0c:	00c004c4 	movi	r3,19
10108e10:	19809636 	bltu	r3,r6,1010906c <_realloc_r+0x344>
10108e14:	9005883a 	mov	r2,r18
10108e18:	a807883a 	mov	r3,r21
10108e1c:	19000017 	ldw	r4,0(r3)
10108e20:	11000015 	stw	r4,0(r2)
10108e24:	19000117 	ldw	r4,4(r3)
10108e28:	11000115 	stw	r4,4(r2)
10108e2c:	18c00217 	ldw	r3,8(r3)
10108e30:	10c00215 	stw	r3,8(r2)
10108e34:	a80b883a 	mov	r5,r21
10108e38:	a009883a 	mov	r4,r20
10108e3c:	010631c0 	call	1010631c <_free_r>
10108e40:	a009883a 	mov	r4,r20
10108e44:	010eba00 	call	1010eba0 <__malloc_unlock>
10108e48:	9005883a 	mov	r2,r18
10108e4c:	00001206 	br	10108e98 <_realloc_r+0x170>
10108e50:	00c00404 	movi	r3,16
10108e54:	1823883a 	mov	r17,r3
10108e58:	003fce06 	br	10108d94 <_realloc_r+0x6c>
10108e5c:	a825883a 	mov	r18,r21
10108e60:	8445c83a 	sub	r2,r16,r17
10108e64:	00c003c4 	movi	r3,15
10108e68:	18802636 	bltu	r3,r2,10108f04 <_realloc_r+0x1dc>
10108e6c:	99800117 	ldw	r6,4(r19)
10108e70:	9c07883a 	add	r3,r19,r16
10108e74:	3180004c 	andi	r6,r6,1
10108e78:	3420b03a 	or	r16,r6,r16
10108e7c:	9c000115 	stw	r16,4(r19)
10108e80:	18800117 	ldw	r2,4(r3)
10108e84:	10800054 	ori	r2,r2,1
10108e88:	18800115 	stw	r2,4(r3)
10108e8c:	a009883a 	mov	r4,r20
10108e90:	010eba00 	call	1010eba0 <__malloc_unlock>
10108e94:	9005883a 	mov	r2,r18
10108e98:	dfc00917 	ldw	ra,36(sp)
10108e9c:	df000817 	ldw	fp,32(sp)
10108ea0:	ddc00717 	ldw	r23,28(sp)
10108ea4:	dd800617 	ldw	r22,24(sp)
10108ea8:	dd400517 	ldw	r21,20(sp)
10108eac:	dd000417 	ldw	r20,16(sp)
10108eb0:	dcc00317 	ldw	r19,12(sp)
10108eb4:	dc800217 	ldw	r18,8(sp)
10108eb8:	dc400117 	ldw	r17,4(sp)
10108ebc:	dc000017 	ldw	r16,0(sp)
10108ec0:	dec00a04 	addi	sp,sp,40
10108ec4:	f800283a 	ret
10108ec8:	017fff04 	movi	r5,-4
10108ecc:	414a703a 	and	r5,r8,r5
10108ed0:	814d883a 	add	r6,r16,r5
10108ed4:	30c01f16 	blt	r6,r3,10108f54 <_realloc_r+0x22c>
10108ed8:	20800317 	ldw	r2,12(r4)
10108edc:	20c00217 	ldw	r3,8(r4)
10108ee0:	a825883a 	mov	r18,r21
10108ee4:	3021883a 	mov	r16,r6
10108ee8:	18800315 	stw	r2,12(r3)
10108eec:	10c00215 	stw	r3,8(r2)
10108ef0:	003fdb06 	br	10108e60 <_realloc_r+0x138>
10108ef4:	00800304 	movi	r2,12
10108ef8:	a0800015 	stw	r2,0(r20)
10108efc:	0005883a 	mov	r2,zero
10108f00:	003fe506 	br	10108e98 <_realloc_r+0x170>
10108f04:	98c00117 	ldw	r3,4(r19)
10108f08:	9c4b883a 	add	r5,r19,r17
10108f0c:	11000054 	ori	r4,r2,1
10108f10:	18c0004c 	andi	r3,r3,1
10108f14:	1c62b03a 	or	r17,r3,r17
10108f18:	9c400115 	stw	r17,4(r19)
10108f1c:	29000115 	stw	r4,4(r5)
10108f20:	2885883a 	add	r2,r5,r2
10108f24:	10c00117 	ldw	r3,4(r2)
10108f28:	29400204 	addi	r5,r5,8
10108f2c:	a009883a 	mov	r4,r20
10108f30:	18c00054 	ori	r3,r3,1
10108f34:	10c00115 	stw	r3,4(r2)
10108f38:	010631c0 	call	1010631c <_free_r>
10108f3c:	003fd306 	br	10108e8c <_realloc_r+0x164>
10108f40:	017fff04 	movi	r5,-4
10108f44:	414a703a 	and	r5,r8,r5
10108f48:	89800404 	addi	r6,r17,16
10108f4c:	8151883a 	add	r8,r16,r5
10108f50:	4180590e 	bge	r8,r6,101090b8 <_realloc_r+0x390>
10108f54:	1080004c 	andi	r2,r2,1
10108f58:	103f9e1e 	bne	r2,zero,10108dd4 <_realloc_r+0xac>
10108f5c:	adbffe17 	ldw	r22,-8(r21)
10108f60:	00bfff04 	movi	r2,-4
10108f64:	9dadc83a 	sub	r22,r19,r22
10108f68:	b1800117 	ldw	r6,4(r22)
10108f6c:	3084703a 	and	r2,r6,r2
10108f70:	20002026 	beq	r4,zero,10108ff4 <_realloc_r+0x2cc>
10108f74:	80af883a 	add	r23,r16,r2
10108f78:	b96f883a 	add	r23,r23,r5
10108f7c:	21c05f26 	beq	r4,r7,101090fc <_realloc_r+0x3d4>
10108f80:	b8c01c16 	blt	r23,r3,10108ff4 <_realloc_r+0x2cc>
10108f84:	20800317 	ldw	r2,12(r4)
10108f88:	20c00217 	ldw	r3,8(r4)
10108f8c:	81bfff04 	addi	r6,r16,-4
10108f90:	01000904 	movi	r4,36
10108f94:	18800315 	stw	r2,12(r3)
10108f98:	10c00215 	stw	r3,8(r2)
10108f9c:	b0c00217 	ldw	r3,8(r22)
10108fa0:	b0800317 	ldw	r2,12(r22)
10108fa4:	b4800204 	addi	r18,r22,8
10108fa8:	18800315 	stw	r2,12(r3)
10108fac:	10c00215 	stw	r3,8(r2)
10108fb0:	21801b36 	bltu	r4,r6,10109020 <_realloc_r+0x2f8>
10108fb4:	008004c4 	movi	r2,19
10108fb8:	1180352e 	bgeu	r2,r6,10109090 <_realloc_r+0x368>
10108fbc:	a8800017 	ldw	r2,0(r21)
10108fc0:	b0800215 	stw	r2,8(r22)
10108fc4:	a8800117 	ldw	r2,4(r21)
10108fc8:	b0800315 	stw	r2,12(r22)
10108fcc:	008006c4 	movi	r2,27
10108fd0:	11807f36 	bltu	r2,r6,101091d0 <_realloc_r+0x4a8>
10108fd4:	b0800404 	addi	r2,r22,16
10108fd8:	ad400204 	addi	r21,r21,8
10108fdc:	00002d06 	br	10109094 <_realloc_r+0x36c>
10108fe0:	adbffe17 	ldw	r22,-8(r21)
10108fe4:	00bfff04 	movi	r2,-4
10108fe8:	9dadc83a 	sub	r22,r19,r22
10108fec:	b1000117 	ldw	r4,4(r22)
10108ff0:	2084703a 	and	r2,r4,r2
10108ff4:	b03f7726 	beq	r22,zero,10108dd4 <_realloc_r+0xac>
10108ff8:	80af883a 	add	r23,r16,r2
10108ffc:	b8ff7516 	blt	r23,r3,10108dd4 <_realloc_r+0xac>
10109000:	b0800317 	ldw	r2,12(r22)
10109004:	b0c00217 	ldw	r3,8(r22)
10109008:	81bfff04 	addi	r6,r16,-4
1010900c:	01000904 	movi	r4,36
10109010:	18800315 	stw	r2,12(r3)
10109014:	10c00215 	stw	r3,8(r2)
10109018:	b4800204 	addi	r18,r22,8
1010901c:	21bfe52e 	bgeu	r4,r6,10108fb4 <_realloc_r+0x28c>
10109020:	a80b883a 	mov	r5,r21
10109024:	9009883a 	mov	r4,r18
10109028:	01079400 	call	10107940 <memmove>
1010902c:	b821883a 	mov	r16,r23
10109030:	b027883a 	mov	r19,r22
10109034:	003f8a06 	br	10108e60 <_realloc_r+0x138>
10109038:	300b883a 	mov	r5,r6
1010903c:	dfc00917 	ldw	ra,36(sp)
10109040:	df000817 	ldw	fp,32(sp)
10109044:	ddc00717 	ldw	r23,28(sp)
10109048:	dd800617 	ldw	r22,24(sp)
1010904c:	dd400517 	ldw	r21,20(sp)
10109050:	dd000417 	ldw	r20,16(sp)
10109054:	dcc00317 	ldw	r19,12(sp)
10109058:	dc800217 	ldw	r18,8(sp)
1010905c:	dc400117 	ldw	r17,4(sp)
10109060:	dc000017 	ldw	r16,0(sp)
10109064:	dec00a04 	addi	sp,sp,40
10109068:	0106f081 	jmpi	10106f08 <_malloc_r>
1010906c:	a8c00017 	ldw	r3,0(r21)
10109070:	90c00015 	stw	r3,0(r18)
10109074:	a8c00117 	ldw	r3,4(r21)
10109078:	90c00115 	stw	r3,4(r18)
1010907c:	00c006c4 	movi	r3,27
10109080:	19804536 	bltu	r3,r6,10109198 <_realloc_r+0x470>
10109084:	90800204 	addi	r2,r18,8
10109088:	a8c00204 	addi	r3,r21,8
1010908c:	003f6306 	br	10108e1c <_realloc_r+0xf4>
10109090:	9005883a 	mov	r2,r18
10109094:	a8c00017 	ldw	r3,0(r21)
10109098:	b821883a 	mov	r16,r23
1010909c:	b027883a 	mov	r19,r22
101090a0:	10c00015 	stw	r3,0(r2)
101090a4:	a8c00117 	ldw	r3,4(r21)
101090a8:	10c00115 	stw	r3,4(r2)
101090ac:	a8c00217 	ldw	r3,8(r21)
101090b0:	10c00215 	stw	r3,8(r2)
101090b4:	003f6a06 	br	10108e60 <_realloc_r+0x138>
101090b8:	9c67883a 	add	r19,r19,r17
101090bc:	4445c83a 	sub	r2,r8,r17
101090c0:	e4c00215 	stw	r19,8(fp)
101090c4:	10800054 	ori	r2,r2,1
101090c8:	98800115 	stw	r2,4(r19)
101090cc:	a8bfff17 	ldw	r2,-4(r21)
101090d0:	a009883a 	mov	r4,r20
101090d4:	1080004c 	andi	r2,r2,1
101090d8:	1462b03a 	or	r17,r2,r17
101090dc:	ac7fff15 	stw	r17,-4(r21)
101090e0:	010eba00 	call	1010eba0 <__malloc_unlock>
101090e4:	a805883a 	mov	r2,r21
101090e8:	003f6b06 	br	10108e98 <_realloc_r+0x170>
101090ec:	a80b883a 	mov	r5,r21
101090f0:	9009883a 	mov	r4,r18
101090f4:	01079400 	call	10107940 <memmove>
101090f8:	003f4e06 	br	10108e34 <_realloc_r+0x10c>
101090fc:	89000404 	addi	r4,r17,16
10109100:	b93fbc16 	blt	r23,r4,10108ff4 <_realloc_r+0x2cc>
10109104:	b0800317 	ldw	r2,12(r22)
10109108:	b0c00217 	ldw	r3,8(r22)
1010910c:	81bfff04 	addi	r6,r16,-4
10109110:	01000904 	movi	r4,36
10109114:	18800315 	stw	r2,12(r3)
10109118:	10c00215 	stw	r3,8(r2)
1010911c:	b4800204 	addi	r18,r22,8
10109120:	21804336 	bltu	r4,r6,10109230 <_realloc_r+0x508>
10109124:	008004c4 	movi	r2,19
10109128:	11803f2e 	bgeu	r2,r6,10109228 <_realloc_r+0x500>
1010912c:	a8800017 	ldw	r2,0(r21)
10109130:	b0800215 	stw	r2,8(r22)
10109134:	a8800117 	ldw	r2,4(r21)
10109138:	b0800315 	stw	r2,12(r22)
1010913c:	008006c4 	movi	r2,27
10109140:	11803f36 	bltu	r2,r6,10109240 <_realloc_r+0x518>
10109144:	b0800404 	addi	r2,r22,16
10109148:	ad400204 	addi	r21,r21,8
1010914c:	a8c00017 	ldw	r3,0(r21)
10109150:	10c00015 	stw	r3,0(r2)
10109154:	a8c00117 	ldw	r3,4(r21)
10109158:	10c00115 	stw	r3,4(r2)
1010915c:	a8c00217 	ldw	r3,8(r21)
10109160:	10c00215 	stw	r3,8(r2)
10109164:	b447883a 	add	r3,r22,r17
10109168:	bc45c83a 	sub	r2,r23,r17
1010916c:	e0c00215 	stw	r3,8(fp)
10109170:	10800054 	ori	r2,r2,1
10109174:	18800115 	stw	r2,4(r3)
10109178:	b0800117 	ldw	r2,4(r22)
1010917c:	a009883a 	mov	r4,r20
10109180:	1080004c 	andi	r2,r2,1
10109184:	1462b03a 	or	r17,r2,r17
10109188:	b4400115 	stw	r17,4(r22)
1010918c:	010eba00 	call	1010eba0 <__malloc_unlock>
10109190:	9005883a 	mov	r2,r18
10109194:	003f4006 	br	10108e98 <_realloc_r+0x170>
10109198:	a8c00217 	ldw	r3,8(r21)
1010919c:	90c00215 	stw	r3,8(r18)
101091a0:	a8c00317 	ldw	r3,12(r21)
101091a4:	90c00315 	stw	r3,12(r18)
101091a8:	30801126 	beq	r6,r2,101091f0 <_realloc_r+0x4c8>
101091ac:	90800404 	addi	r2,r18,16
101091b0:	a8c00404 	addi	r3,r21,16
101091b4:	003f1906 	br	10108e1c <_realloc_r+0xf4>
101091b8:	90ffff17 	ldw	r3,-4(r18)
101091bc:	00bfff04 	movi	r2,-4
101091c0:	a825883a 	mov	r18,r21
101091c4:	1884703a 	and	r2,r3,r2
101091c8:	80a1883a 	add	r16,r16,r2
101091cc:	003f2406 	br	10108e60 <_realloc_r+0x138>
101091d0:	a8800217 	ldw	r2,8(r21)
101091d4:	b0800415 	stw	r2,16(r22)
101091d8:	a8800317 	ldw	r2,12(r21)
101091dc:	b0800515 	stw	r2,20(r22)
101091e0:	31000a26 	beq	r6,r4,1010920c <_realloc_r+0x4e4>
101091e4:	b0800604 	addi	r2,r22,24
101091e8:	ad400404 	addi	r21,r21,16
101091ec:	003fa906 	br	10109094 <_realloc_r+0x36c>
101091f0:	a9000417 	ldw	r4,16(r21)
101091f4:	90800604 	addi	r2,r18,24
101091f8:	a8c00604 	addi	r3,r21,24
101091fc:	91000415 	stw	r4,16(r18)
10109200:	a9000517 	ldw	r4,20(r21)
10109204:	91000515 	stw	r4,20(r18)
10109208:	003f0406 	br	10108e1c <_realloc_r+0xf4>
1010920c:	a8c00417 	ldw	r3,16(r21)
10109210:	ad400604 	addi	r21,r21,24
10109214:	b0800804 	addi	r2,r22,32
10109218:	b0c00615 	stw	r3,24(r22)
1010921c:	a8ffff17 	ldw	r3,-4(r21)
10109220:	b0c00715 	stw	r3,28(r22)
10109224:	003f9b06 	br	10109094 <_realloc_r+0x36c>
10109228:	9005883a 	mov	r2,r18
1010922c:	003fc706 	br	1010914c <_realloc_r+0x424>
10109230:	a80b883a 	mov	r5,r21
10109234:	9009883a 	mov	r4,r18
10109238:	01079400 	call	10107940 <memmove>
1010923c:	003fc906 	br	10109164 <_realloc_r+0x43c>
10109240:	a8800217 	ldw	r2,8(r21)
10109244:	b0800415 	stw	r2,16(r22)
10109248:	a8800317 	ldw	r2,12(r21)
1010924c:	b0800515 	stw	r2,20(r22)
10109250:	31000726 	beq	r6,r4,10109270 <_realloc_r+0x548>
10109254:	b0800604 	addi	r2,r22,24
10109258:	ad400404 	addi	r21,r21,16
1010925c:	003fbb06 	br	1010914c <_realloc_r+0x424>
10109260:	a009883a 	mov	r4,r20
10109264:	010eba00 	call	1010eba0 <__malloc_unlock>
10109268:	0005883a 	mov	r2,zero
1010926c:	003f0a06 	br	10108e98 <_realloc_r+0x170>
10109270:	a8c00417 	ldw	r3,16(r21)
10109274:	ad400604 	addi	r21,r21,24
10109278:	b0800804 	addi	r2,r22,32
1010927c:	b0c00615 	stw	r3,24(r22)
10109280:	a8ffff17 	ldw	r3,-4(r21)
10109284:	b0c00715 	stw	r3,28(r22)
10109288:	003fb006 	br	1010914c <_realloc_r+0x424>

1010928c <__fpclassifyd>:
1010928c:	00a00034 	movhi	r2,32768
10109290:	10bfffc4 	addi	r2,r2,-1
10109294:	2884703a 	and	r2,r5,r2
10109298:	10000726 	beq	r2,zero,101092b8 <__fpclassifyd+0x2c>
1010929c:	00fffc34 	movhi	r3,65520
101092a0:	019ff834 	movhi	r6,32736
101092a4:	28c7883a 	add	r3,r5,r3
101092a8:	31bfffc4 	addi	r6,r6,-1
101092ac:	30c00536 	bltu	r6,r3,101092c4 <__fpclassifyd+0x38>
101092b0:	00800104 	movi	r2,4
101092b4:	f800283a 	ret
101092b8:	2000021e 	bne	r4,zero,101092c4 <__fpclassifyd+0x38>
101092bc:	00800084 	movi	r2,2
101092c0:	f800283a 	ret
101092c4:	00dffc34 	movhi	r3,32752
101092c8:	019ff834 	movhi	r6,32736
101092cc:	28cb883a 	add	r5,r5,r3
101092d0:	31bfffc4 	addi	r6,r6,-1
101092d4:	317ff62e 	bgeu	r6,r5,101092b0 <__fpclassifyd+0x24>
101092d8:	01400434 	movhi	r5,16
101092dc:	297fffc4 	addi	r5,r5,-1
101092e0:	28800236 	bltu	r5,r2,101092ec <__fpclassifyd+0x60>
101092e4:	008000c4 	movi	r2,3
101092e8:	f800283a 	ret
101092ec:	10c00226 	beq	r2,r3,101092f8 <__fpclassifyd+0x6c>
101092f0:	0005883a 	mov	r2,zero
101092f4:	f800283a 	ret
101092f8:	2005003a 	cmpeq	r2,r4,zero
101092fc:	f800283a 	ret

10109300 <_sbrk_r>:
10109300:	defffd04 	addi	sp,sp,-12
10109304:	dc000015 	stw	r16,0(sp)
10109308:	04040474 	movhi	r16,4113
1010930c:	dc400115 	stw	r17,4(sp)
10109310:	8411ec04 	addi	r16,r16,18352
10109314:	2023883a 	mov	r17,r4
10109318:	2809883a 	mov	r4,r5
1010931c:	dfc00215 	stw	ra,8(sp)
10109320:	80000015 	stw	zero,0(r16)
10109324:	010ed600 	call	1010ed60 <sbrk>
10109328:	00ffffc4 	movi	r3,-1
1010932c:	10c00526 	beq	r2,r3,10109344 <_sbrk_r+0x44>
10109330:	dfc00217 	ldw	ra,8(sp)
10109334:	dc400117 	ldw	r17,4(sp)
10109338:	dc000017 	ldw	r16,0(sp)
1010933c:	dec00304 	addi	sp,sp,12
10109340:	f800283a 	ret
10109344:	80c00017 	ldw	r3,0(r16)
10109348:	183ff926 	beq	r3,zero,10109330 <_sbrk_r+0x30>
1010934c:	88c00015 	stw	r3,0(r17)
10109350:	003ff706 	br	10109330 <_sbrk_r+0x30>

10109354 <__sread>:
10109354:	defffe04 	addi	sp,sp,-8
10109358:	dc000015 	stw	r16,0(sp)
1010935c:	2821883a 	mov	r16,r5
10109360:	2940038f 	ldh	r5,14(r5)
10109364:	dfc00115 	stw	ra,4(sp)
10109368:	010b2a00 	call	1010b2a0 <_read_r>
1010936c:	10000716 	blt	r2,zero,1010938c <__sread+0x38>
10109370:	80c01417 	ldw	r3,80(r16)
10109374:	1887883a 	add	r3,r3,r2
10109378:	80c01415 	stw	r3,80(r16)
1010937c:	dfc00117 	ldw	ra,4(sp)
10109380:	dc000017 	ldw	r16,0(sp)
10109384:	dec00204 	addi	sp,sp,8
10109388:	f800283a 	ret
1010938c:	80c0030b 	ldhu	r3,12(r16)
10109390:	18fbffcc 	andi	r3,r3,61439
10109394:	80c0030d 	sth	r3,12(r16)
10109398:	dfc00117 	ldw	ra,4(sp)
1010939c:	dc000017 	ldw	r16,0(sp)
101093a0:	dec00204 	addi	sp,sp,8
101093a4:	f800283a 	ret

101093a8 <__seofread>:
101093a8:	0005883a 	mov	r2,zero
101093ac:	f800283a 	ret

101093b0 <__swrite>:
101093b0:	2880030b 	ldhu	r2,12(r5)
101093b4:	defffb04 	addi	sp,sp,-20
101093b8:	dcc00315 	stw	r19,12(sp)
101093bc:	dc800215 	stw	r18,8(sp)
101093c0:	dc400115 	stw	r17,4(sp)
101093c4:	dc000015 	stw	r16,0(sp)
101093c8:	dfc00415 	stw	ra,16(sp)
101093cc:	10c0400c 	andi	r3,r2,256
101093d0:	2821883a 	mov	r16,r5
101093d4:	2023883a 	mov	r17,r4
101093d8:	3025883a 	mov	r18,r6
101093dc:	3827883a 	mov	r19,r7
101093e0:	18000526 	beq	r3,zero,101093f8 <__swrite+0x48>
101093e4:	2940038f 	ldh	r5,14(r5)
101093e8:	01c00084 	movi	r7,2
101093ec:	000d883a 	mov	r6,zero
101093f0:	010b2400 	call	1010b240 <_lseek_r>
101093f4:	8080030b 	ldhu	r2,12(r16)
101093f8:	8140038f 	ldh	r5,14(r16)
101093fc:	10bbffcc 	andi	r2,r2,61439
10109400:	980f883a 	mov	r7,r19
10109404:	900d883a 	mov	r6,r18
10109408:	8809883a 	mov	r4,r17
1010940c:	8080030d 	sth	r2,12(r16)
10109410:	dfc00417 	ldw	ra,16(sp)
10109414:	dcc00317 	ldw	r19,12(sp)
10109418:	dc800217 	ldw	r18,8(sp)
1010941c:	dc400117 	ldw	r17,4(sp)
10109420:	dc000017 	ldw	r16,0(sp)
10109424:	dec00504 	addi	sp,sp,20
10109428:	010ad0c1 	jmpi	1010ad0c <_write_r>

1010942c <__sseek>:
1010942c:	defffe04 	addi	sp,sp,-8
10109430:	dc000015 	stw	r16,0(sp)
10109434:	2821883a 	mov	r16,r5
10109438:	2940038f 	ldh	r5,14(r5)
1010943c:	dfc00115 	stw	ra,4(sp)
10109440:	010b2400 	call	1010b240 <_lseek_r>
10109444:	00ffffc4 	movi	r3,-1
10109448:	10c00826 	beq	r2,r3,1010946c <__sseek+0x40>
1010944c:	80c0030b 	ldhu	r3,12(r16)
10109450:	80801415 	stw	r2,80(r16)
10109454:	18c40014 	ori	r3,r3,4096
10109458:	80c0030d 	sth	r3,12(r16)
1010945c:	dfc00117 	ldw	ra,4(sp)
10109460:	dc000017 	ldw	r16,0(sp)
10109464:	dec00204 	addi	sp,sp,8
10109468:	f800283a 	ret
1010946c:	80c0030b 	ldhu	r3,12(r16)
10109470:	18fbffcc 	andi	r3,r3,61439
10109474:	80c0030d 	sth	r3,12(r16)
10109478:	dfc00117 	ldw	ra,4(sp)
1010947c:	dc000017 	ldw	r16,0(sp)
10109480:	dec00204 	addi	sp,sp,8
10109484:	f800283a 	ret

10109488 <__sclose>:
10109488:	2940038f 	ldh	r5,14(r5)
1010948c:	010ad6c1 	jmpi	1010ad6c <_close_r>

10109490 <strcmp>:
10109490:	2144b03a 	or	r2,r4,r5
10109494:	108000cc 	andi	r2,r2,3
10109498:	1000171e 	bne	r2,zero,101094f8 <strcmp+0x68>
1010949c:	20800017 	ldw	r2,0(r4)
101094a0:	28c00017 	ldw	r3,0(r5)
101094a4:	10c0141e 	bne	r2,r3,101094f8 <strcmp+0x68>
101094a8:	027fbff4 	movhi	r9,65279
101094ac:	4a7fbfc4 	addi	r9,r9,-257
101094b0:	0086303a 	nor	r3,zero,r2
101094b4:	02202074 	movhi	r8,32897
101094b8:	1245883a 	add	r2,r2,r9
101094bc:	42202004 	addi	r8,r8,-32640
101094c0:	10c4703a 	and	r2,r2,r3
101094c4:	1204703a 	and	r2,r2,r8
101094c8:	10000226 	beq	r2,zero,101094d4 <strcmp+0x44>
101094cc:	00002306 	br	1010955c <strcmp+0xcc>
101094d0:	1000221e 	bne	r2,zero,1010955c <strcmp+0xcc>
101094d4:	21000104 	addi	r4,r4,4
101094d8:	20c00017 	ldw	r3,0(r4)
101094dc:	29400104 	addi	r5,r5,4
101094e0:	29800017 	ldw	r6,0(r5)
101094e4:	1a4f883a 	add	r7,r3,r9
101094e8:	00c4303a 	nor	r2,zero,r3
101094ec:	3884703a 	and	r2,r7,r2
101094f0:	1204703a 	and	r2,r2,r8
101094f4:	19bff626 	beq	r3,r6,101094d0 <strcmp+0x40>
101094f8:	20800003 	ldbu	r2,0(r4)
101094fc:	10c03fcc 	andi	r3,r2,255
10109500:	18c0201c 	xori	r3,r3,128
10109504:	18ffe004 	addi	r3,r3,-128
10109508:	18000c26 	beq	r3,zero,1010953c <strcmp+0xac>
1010950c:	29800007 	ldb	r6,0(r5)
10109510:	19800326 	beq	r3,r6,10109520 <strcmp+0x90>
10109514:	00001306 	br	10109564 <strcmp+0xd4>
10109518:	29800007 	ldb	r6,0(r5)
1010951c:	11800b1e 	bne	r2,r6,1010954c <strcmp+0xbc>
10109520:	21000044 	addi	r4,r4,1
10109524:	20c00003 	ldbu	r3,0(r4)
10109528:	29400044 	addi	r5,r5,1
1010952c:	18803fcc 	andi	r2,r3,255
10109530:	1080201c 	xori	r2,r2,128
10109534:	10bfe004 	addi	r2,r2,-128
10109538:	103ff71e 	bne	r2,zero,10109518 <strcmp+0x88>
1010953c:	0007883a 	mov	r3,zero
10109540:	28800003 	ldbu	r2,0(r5)
10109544:	1885c83a 	sub	r2,r3,r2
10109548:	f800283a 	ret
1010954c:	28800003 	ldbu	r2,0(r5)
10109550:	18c03fcc 	andi	r3,r3,255
10109554:	1885c83a 	sub	r2,r3,r2
10109558:	f800283a 	ret
1010955c:	0005883a 	mov	r2,zero
10109560:	f800283a 	ret
10109564:	10c03fcc 	andi	r3,r2,255
10109568:	003ff506 	br	10109540 <strcmp+0xb0>

1010956c <__sprint_r.part.0>:
1010956c:	28801917 	ldw	r2,100(r5)
10109570:	defff604 	addi	sp,sp,-40
10109574:	dd400515 	stw	r21,20(sp)
10109578:	dfc00915 	stw	ra,36(sp)
1010957c:	df000815 	stw	fp,32(sp)
10109580:	ddc00715 	stw	r23,28(sp)
10109584:	dd800615 	stw	r22,24(sp)
10109588:	dd000415 	stw	r20,16(sp)
1010958c:	dcc00315 	stw	r19,12(sp)
10109590:	dc800215 	stw	r18,8(sp)
10109594:	dc400115 	stw	r17,4(sp)
10109598:	dc000015 	stw	r16,0(sp)
1010959c:	1088000c 	andi	r2,r2,8192
101095a0:	302b883a 	mov	r21,r6
101095a4:	10002e26 	beq	r2,zero,10109660 <__sprint_r.part.0+0xf4>
101095a8:	30800217 	ldw	r2,8(r6)
101095ac:	35800017 	ldw	r22,0(r6)
101095b0:	10002926 	beq	r2,zero,10109658 <__sprint_r.part.0+0xec>
101095b4:	2827883a 	mov	r19,r5
101095b8:	2029883a 	mov	r20,r4
101095bc:	b5c00104 	addi	r23,r22,4
101095c0:	04bfffc4 	movi	r18,-1
101095c4:	bc400017 	ldw	r17,0(r23)
101095c8:	b4000017 	ldw	r16,0(r22)
101095cc:	0039883a 	mov	fp,zero
101095d0:	8822d0ba 	srli	r17,r17,2
101095d4:	8800031e 	bne	r17,zero,101095e4 <__sprint_r.part.0+0x78>
101095d8:	00001806 	br	1010963c <__sprint_r.part.0+0xd0>
101095dc:	84000104 	addi	r16,r16,4
101095e0:	8f001526 	beq	r17,fp,10109638 <__sprint_r.part.0+0xcc>
101095e4:	81400017 	ldw	r5,0(r16)
101095e8:	980d883a 	mov	r6,r19
101095ec:	a009883a 	mov	r4,r20
101095f0:	010b0ec0 	call	1010b0ec <_fputwc_r>
101095f4:	e7000044 	addi	fp,fp,1
101095f8:	14bff81e 	bne	r2,r18,101095dc <__sprint_r.part.0+0x70>
101095fc:	9005883a 	mov	r2,r18
10109600:	a8000215 	stw	zero,8(r21)
10109604:	a8000115 	stw	zero,4(r21)
10109608:	dfc00917 	ldw	ra,36(sp)
1010960c:	df000817 	ldw	fp,32(sp)
10109610:	ddc00717 	ldw	r23,28(sp)
10109614:	dd800617 	ldw	r22,24(sp)
10109618:	dd400517 	ldw	r21,20(sp)
1010961c:	dd000417 	ldw	r20,16(sp)
10109620:	dcc00317 	ldw	r19,12(sp)
10109624:	dc800217 	ldw	r18,8(sp)
10109628:	dc400117 	ldw	r17,4(sp)
1010962c:	dc000017 	ldw	r16,0(sp)
10109630:	dec00a04 	addi	sp,sp,40
10109634:	f800283a 	ret
10109638:	a8800217 	ldw	r2,8(r21)
1010963c:	8c63883a 	add	r17,r17,r17
10109640:	8c63883a 	add	r17,r17,r17
10109644:	1445c83a 	sub	r2,r2,r17
10109648:	a8800215 	stw	r2,8(r21)
1010964c:	b5800204 	addi	r22,r22,8
10109650:	bdc00204 	addi	r23,r23,8
10109654:	103fdb1e 	bne	r2,zero,101095c4 <__sprint_r.part.0+0x58>
10109658:	0005883a 	mov	r2,zero
1010965c:	003fe806 	br	10109600 <__sprint_r.part.0+0x94>
10109660:	010662c0 	call	1010662c <__sfvwrite_r>
10109664:	003fe606 	br	10109600 <__sprint_r.part.0+0x94>

10109668 <__sprint_r>:
10109668:	30c00217 	ldw	r3,8(r6)
1010966c:	18000126 	beq	r3,zero,10109674 <__sprint_r+0xc>
10109670:	010956c1 	jmpi	1010956c <__sprint_r.part.0>
10109674:	30000115 	stw	zero,4(r6)
10109678:	0005883a 	mov	r2,zero
1010967c:	f800283a 	ret

10109680 <___vfiprintf_internal_r>:
10109680:	deffc904 	addi	sp,sp,-220
10109684:	df003515 	stw	fp,212(sp)
10109688:	dd003115 	stw	r20,196(sp)
1010968c:	dfc03615 	stw	ra,216(sp)
10109690:	ddc03415 	stw	r23,208(sp)
10109694:	dd803315 	stw	r22,204(sp)
10109698:	dd403215 	stw	r21,200(sp)
1010969c:	dcc03015 	stw	r19,192(sp)
101096a0:	dc802f15 	stw	r18,188(sp)
101096a4:	dc402e15 	stw	r17,184(sp)
101096a8:	dc002d15 	stw	r16,180(sp)
101096ac:	d9002015 	stw	r4,128(sp)
101096b0:	d9c02215 	stw	r7,136(sp)
101096b4:	2829883a 	mov	r20,r5
101096b8:	3039883a 	mov	fp,r6
101096bc:	20000226 	beq	r4,zero,101096c8 <___vfiprintf_internal_r+0x48>
101096c0:	20800e17 	ldw	r2,56(r4)
101096c4:	1000cf26 	beq	r2,zero,10109a04 <___vfiprintf_internal_r+0x384>
101096c8:	a080030b 	ldhu	r2,12(r20)
101096cc:	10c8000c 	andi	r3,r2,8192
101096d0:	1800061e 	bne	r3,zero,101096ec <___vfiprintf_internal_r+0x6c>
101096d4:	a1001917 	ldw	r4,100(r20)
101096d8:	00f7ffc4 	movi	r3,-8193
101096dc:	10880014 	ori	r2,r2,8192
101096e0:	20c6703a 	and	r3,r4,r3
101096e4:	a080030d 	sth	r2,12(r20)
101096e8:	a0c01915 	stw	r3,100(r20)
101096ec:	10c0020c 	andi	r3,r2,8
101096f0:	1800a926 	beq	r3,zero,10109998 <___vfiprintf_internal_r+0x318>
101096f4:	a0c00417 	ldw	r3,16(r20)
101096f8:	1800a726 	beq	r3,zero,10109998 <___vfiprintf_internal_r+0x318>
101096fc:	1080068c 	andi	r2,r2,26
10109700:	00c00284 	movi	r3,10
10109704:	10c0ac26 	beq	r2,r3,101099b8 <___vfiprintf_internal_r+0x338>
10109708:	da801a04 	addi	r10,sp,104
1010970c:	da801e15 	stw	r10,120(sp)
10109710:	d8801e17 	ldw	r2,120(sp)
10109714:	da8019c4 	addi	r10,sp,103
10109718:	05840474 	movhi	r22,4113
1010971c:	05c40474 	movhi	r23,4113
10109720:	da801f15 	stw	r10,124(sp)
10109724:	1295c83a 	sub	r10,r2,r10
10109728:	b5841f04 	addi	r22,r22,4220
1010972c:	bdc41b04 	addi	r23,r23,4204
10109730:	dec01a15 	stw	sp,104(sp)
10109734:	d8001c15 	stw	zero,112(sp)
10109738:	d8001b15 	stw	zero,108(sp)
1010973c:	d8002615 	stw	zero,152(sp)
10109740:	d8002315 	stw	zero,140(sp)
10109744:	da802715 	stw	r10,156(sp)
10109748:	d811883a 	mov	r8,sp
1010974c:	dd002115 	stw	r20,132(sp)
10109750:	e021883a 	mov	r16,fp
10109754:	80800007 	ldb	r2,0(r16)
10109758:	1003ea26 	beq	r2,zero,1010a704 <___vfiprintf_internal_r+0x1084>
1010975c:	00c00944 	movi	r3,37
10109760:	8025883a 	mov	r18,r16
10109764:	10c0021e 	bne	r2,r3,10109770 <___vfiprintf_internal_r+0xf0>
10109768:	00001606 	br	101097c4 <___vfiprintf_internal_r+0x144>
1010976c:	10c00326 	beq	r2,r3,1010977c <___vfiprintf_internal_r+0xfc>
10109770:	94800044 	addi	r18,r18,1
10109774:	90800007 	ldb	r2,0(r18)
10109778:	103ffc1e 	bne	r2,zero,1010976c <___vfiprintf_internal_r+0xec>
1010977c:	9423c83a 	sub	r17,r18,r16
10109780:	88001026 	beq	r17,zero,101097c4 <___vfiprintf_internal_r+0x144>
10109784:	d8c01c17 	ldw	r3,112(sp)
10109788:	d8801b17 	ldw	r2,108(sp)
1010978c:	44000015 	stw	r16,0(r8)
10109790:	88c7883a 	add	r3,r17,r3
10109794:	10800044 	addi	r2,r2,1
10109798:	44400115 	stw	r17,4(r8)
1010979c:	d8c01c15 	stw	r3,112(sp)
101097a0:	d8801b15 	stw	r2,108(sp)
101097a4:	010001c4 	movi	r4,7
101097a8:	2080760e 	bge	r4,r2,10109984 <___vfiprintf_internal_r+0x304>
101097ac:	1803821e 	bne	r3,zero,1010a5b8 <___vfiprintf_internal_r+0xf38>
101097b0:	da802317 	ldw	r10,140(sp)
101097b4:	d8001b15 	stw	zero,108(sp)
101097b8:	d811883a 	mov	r8,sp
101097bc:	5455883a 	add	r10,r10,r17
101097c0:	da802315 	stw	r10,140(sp)
101097c4:	90800007 	ldb	r2,0(r18)
101097c8:	10044626 	beq	r2,zero,1010a8e4 <___vfiprintf_internal_r+0x1264>
101097cc:	90c00047 	ldb	r3,1(r18)
101097d0:	94000044 	addi	r16,r18,1
101097d4:	d8001d85 	stb	zero,118(sp)
101097d8:	0009883a 	mov	r4,zero
101097dc:	000f883a 	mov	r7,zero
101097e0:	027fffc4 	movi	r9,-1
101097e4:	0023883a 	mov	r17,zero
101097e8:	0029883a 	mov	r20,zero
101097ec:	01401604 	movi	r5,88
101097f0:	01800244 	movi	r6,9
101097f4:	03400a84 	movi	r13,42
101097f8:	03001b04 	movi	r12,108
101097fc:	84000044 	addi	r16,r16,1
10109800:	18bff804 	addi	r2,r3,-32
10109804:	28827336 	bltu	r5,r2,1010a1d4 <___vfiprintf_internal_r+0xb54>
10109808:	100490ba 	slli	r2,r2,2
1010980c:	02840474 	movhi	r10,4113
10109810:	52a60804 	addi	r10,r10,-26592
10109814:	1285883a 	add	r2,r2,r10
10109818:	10800017 	ldw	r2,0(r2)
1010981c:	1000683a 	jmp	r2
10109820:	10109f08 	cmpgei	zero,r2,17020
10109824:	1010a1d4 	ori	zero,r2,17031
10109828:	1010a1d4 	ori	zero,r2,17031
1010982c:	10109f28 	cmpgeui	zero,r2,17020
10109830:	1010a1d4 	ori	zero,r2,17031
10109834:	1010a1d4 	ori	zero,r2,17031
10109838:	1010a1d4 	ori	zero,r2,17031
1010983c:	1010a1d4 	ori	zero,r2,17031
10109840:	1010a1d4 	ori	zero,r2,17031
10109844:	1010a1d4 	ori	zero,r2,17031
10109848:	1010a110 	cmplti	zero,r2,17028
1010984c:	1010a12c 	andhi	zero,r2,17028
10109850:	1010a1d4 	ori	zero,r2,17031
10109854:	10109a14 	ori	zero,r2,17000
10109858:	1010a13c 	xorhi	zero,r2,17028
1010985c:	1010a1d4 	ori	zero,r2,17031
10109860:	10109f34 	orhi	zero,r2,17020
10109864:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109868:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
1010986c:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109870:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109874:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109878:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
1010987c:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109880:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109884:	10109f40 	call	110109f4 <__alt_data_end+0xef09f4>
10109888:	1010a1d4 	ori	zero,r2,17031
1010988c:	1010a1d4 	ori	zero,r2,17031
10109890:	1010a1d4 	ori	zero,r2,17031
10109894:	1010a1d4 	ori	zero,r2,17031
10109898:	1010a1d4 	ori	zero,r2,17031
1010989c:	1010a1d4 	ori	zero,r2,17031
101098a0:	1010a1d4 	ori	zero,r2,17031
101098a4:	1010a1d4 	ori	zero,r2,17031
101098a8:	1010a1d4 	ori	zero,r2,17031
101098ac:	1010a1d4 	ori	zero,r2,17031
101098b0:	10109f6c 	andhi	zero,r2,17021
101098b4:	1010a1d4 	ori	zero,r2,17031
101098b8:	1010a1d4 	ori	zero,r2,17031
101098bc:	1010a1d4 	ori	zero,r2,17031
101098c0:	1010a1d4 	ori	zero,r2,17031
101098c4:	1010a1d4 	ori	zero,r2,17031
101098c8:	1010a1d4 	ori	zero,r2,17031
101098cc:	1010a1d4 	ori	zero,r2,17031
101098d0:	1010a1d4 	ori	zero,r2,17031
101098d4:	1010a1d4 	ori	zero,r2,17031
101098d8:	1010a1d4 	ori	zero,r2,17031
101098dc:	10109fa4 	muli	zero,r2,17022
101098e0:	1010a1d4 	ori	zero,r2,17031
101098e4:	1010a1d4 	ori	zero,r2,17031
101098e8:	1010a1d4 	ori	zero,r2,17031
101098ec:	1010a1d4 	ori	zero,r2,17031
101098f0:	1010a1d4 	ori	zero,r2,17031
101098f4:	10109ffc 	xorhi	zero,r2,17023
101098f8:	1010a1d4 	ori	zero,r2,17031
101098fc:	1010a1d4 	ori	zero,r2,17031
10109900:	1010a06c 	andhi	zero,r2,17025
10109904:	1010a1d4 	ori	zero,r2,17031
10109908:	1010a1d4 	ori	zero,r2,17031
1010990c:	1010a1d4 	ori	zero,r2,17031
10109910:	1010a1d4 	ori	zero,r2,17031
10109914:	1010a1d4 	ori	zero,r2,17031
10109918:	1010a1d4 	ori	zero,r2,17031
1010991c:	1010a1d4 	ori	zero,r2,17031
10109920:	1010a1d4 	ori	zero,r2,17031
10109924:	1010a1d4 	ori	zero,r2,17031
10109928:	1010a1d4 	ori	zero,r2,17031
1010992c:	10109e18 	cmpnei	zero,r2,17016
10109930:	10109e44 	addi	zero,r2,17017
10109934:	1010a1d4 	ori	zero,r2,17031
10109938:	1010a1d4 	ori	zero,r2,17031
1010993c:	1010a1d4 	ori	zero,r2,17031
10109940:	1010a17c 	xorhi	zero,r2,17029
10109944:	10109e44 	addi	zero,r2,17017
10109948:	1010a1d4 	ori	zero,r2,17031
1010994c:	1010a1d4 	ori	zero,r2,17031
10109950:	10109cd8 	cmpnei	zero,r2,17011
10109954:	1010a1d4 	ori	zero,r2,17031
10109958:	10109ce8 	cmpgeui	zero,r2,17011
1010995c:	10109d24 	muli	zero,r2,17012
10109960:	10109a20 	cmpeqi	zero,r2,17000
10109964:	10109ccc 	andi	zero,r2,17011
10109968:	1010a1d4 	ori	zero,r2,17031
1010996c:	1010a0a8 	cmpgeui	zero,r2,17026
10109970:	1010a1d4 	ori	zero,r2,17031
10109974:	1010a100 	call	11010a10 <__alt_data_end+0xef0a10>
10109978:	1010a1d4 	ori	zero,r2,17031
1010997c:	1010a1d4 	ori	zero,r2,17031
10109980:	10109dc4 	addi	zero,r2,17015
10109984:	42000204 	addi	r8,r8,8
10109988:	da802317 	ldw	r10,140(sp)
1010998c:	5455883a 	add	r10,r10,r17
10109990:	da802315 	stw	r10,140(sp)
10109994:	003f8b06 	br	101097c4 <___vfiprintf_internal_r+0x144>
10109998:	d9002017 	ldw	r4,128(sp)
1010999c:	a00b883a 	mov	r5,r20
101099a0:	01041d40 	call	101041d4 <__swsetup_r>
101099a4:	1003b11e 	bne	r2,zero,1010a86c <___vfiprintf_internal_r+0x11ec>
101099a8:	a080030b 	ldhu	r2,12(r20)
101099ac:	00c00284 	movi	r3,10
101099b0:	1080068c 	andi	r2,r2,26
101099b4:	10ff541e 	bne	r2,r3,10109708 <___vfiprintf_internal_r+0x88>
101099b8:	a080038f 	ldh	r2,14(r20)
101099bc:	103f5216 	blt	r2,zero,10109708 <___vfiprintf_internal_r+0x88>
101099c0:	d9c02217 	ldw	r7,136(sp)
101099c4:	d9002017 	ldw	r4,128(sp)
101099c8:	e00d883a 	mov	r6,fp
101099cc:	a00b883a 	mov	r5,r20
101099d0:	010aaf80 	call	1010aaf8 <__sbprintf>
101099d4:	dfc03617 	ldw	ra,216(sp)
101099d8:	df003517 	ldw	fp,212(sp)
101099dc:	ddc03417 	ldw	r23,208(sp)
101099e0:	dd803317 	ldw	r22,204(sp)
101099e4:	dd403217 	ldw	r21,200(sp)
101099e8:	dd003117 	ldw	r20,196(sp)
101099ec:	dcc03017 	ldw	r19,192(sp)
101099f0:	dc802f17 	ldw	r18,188(sp)
101099f4:	dc402e17 	ldw	r17,184(sp)
101099f8:	dc002d17 	ldw	r16,180(sp)
101099fc:	dec03704 	addi	sp,sp,220
10109a00:	f800283a 	ret
10109a04:	01061a80 	call	101061a8 <__sinit>
10109a08:	003f2f06 	br	101096c8 <___vfiprintf_internal_r+0x48>
10109a0c:	0463c83a 	sub	r17,zero,r17
10109a10:	d8802215 	stw	r2,136(sp)
10109a14:	a5000114 	ori	r20,r20,4
10109a18:	80c00007 	ldb	r3,0(r16)
10109a1c:	003f7706 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109a20:	00800c04 	movi	r2,48
10109a24:	da802217 	ldw	r10,136(sp)
10109a28:	d8801d05 	stb	r2,116(sp)
10109a2c:	00801e04 	movi	r2,120
10109a30:	d8801d45 	stb	r2,117(sp)
10109a34:	d8001d85 	stb	zero,118(sp)
10109a38:	50c00104 	addi	r3,r10,4
10109a3c:	54800017 	ldw	r18,0(r10)
10109a40:	0027883a 	mov	r19,zero
10109a44:	a0800094 	ori	r2,r20,2
10109a48:	48030b16 	blt	r9,zero,1010a678 <___vfiprintf_internal_r+0xff8>
10109a4c:	00bfdfc4 	movi	r2,-129
10109a50:	a096703a 	and	r11,r20,r2
10109a54:	d8c02215 	stw	r3,136(sp)
10109a58:	5d000094 	ori	r20,r11,2
10109a5c:	90032b1e 	bne	r18,zero,1010a70c <___vfiprintf_internal_r+0x108c>
10109a60:	00840474 	movhi	r2,4113
10109a64:	1083ba04 	addi	r2,r2,3816
10109a68:	d8802615 	stw	r2,152(sp)
10109a6c:	0039883a 	mov	fp,zero
10109a70:	48017b1e 	bne	r9,zero,1010a060 <___vfiprintf_internal_r+0x9e0>
10109a74:	0013883a 	mov	r9,zero
10109a78:	0027883a 	mov	r19,zero
10109a7c:	dd401a04 	addi	r21,sp,104
10109a80:	4825883a 	mov	r18,r9
10109a84:	4cc0010e 	bge	r9,r19,10109a8c <___vfiprintf_internal_r+0x40c>
10109a88:	9825883a 	mov	r18,r19
10109a8c:	e7003fcc 	andi	fp,fp,255
10109a90:	e700201c 	xori	fp,fp,128
10109a94:	e73fe004 	addi	fp,fp,-128
10109a98:	e0000126 	beq	fp,zero,10109aa0 <___vfiprintf_internal_r+0x420>
10109a9c:	94800044 	addi	r18,r18,1
10109aa0:	a380008c 	andi	r14,r20,2
10109aa4:	70000126 	beq	r14,zero,10109aac <___vfiprintf_internal_r+0x42c>
10109aa8:	94800084 	addi	r18,r18,2
10109aac:	a700210c 	andi	fp,r20,132
10109ab0:	e001df1e 	bne	fp,zero,1010a230 <___vfiprintf_internal_r+0xbb0>
10109ab4:	8c87c83a 	sub	r3,r17,r18
10109ab8:	00c1dd0e 	bge	zero,r3,1010a230 <___vfiprintf_internal_r+0xbb0>
10109abc:	01c00404 	movi	r7,16
10109ac0:	d8801c17 	ldw	r2,112(sp)
10109ac4:	38c3ad0e 	bge	r7,r3,1010a97c <___vfiprintf_internal_r+0x12fc>
10109ac8:	02840474 	movhi	r10,4113
10109acc:	52841f04 	addi	r10,r10,4220
10109ad0:	dc002915 	stw	r16,164(sp)
10109ad4:	d9801b17 	ldw	r6,108(sp)
10109ad8:	da802415 	stw	r10,144(sp)
10109adc:	03c001c4 	movi	r15,7
10109ae0:	da402515 	stw	r9,148(sp)
10109ae4:	db802815 	stw	r14,160(sp)
10109ae8:	1821883a 	mov	r16,r3
10109aec:	00000506 	br	10109b04 <___vfiprintf_internal_r+0x484>
10109af0:	31400084 	addi	r5,r6,2
10109af4:	42000204 	addi	r8,r8,8
10109af8:	200d883a 	mov	r6,r4
10109afc:	843ffc04 	addi	r16,r16,-16
10109b00:	3c000d0e 	bge	r7,r16,10109b38 <___vfiprintf_internal_r+0x4b8>
10109b04:	10800404 	addi	r2,r2,16
10109b08:	31000044 	addi	r4,r6,1
10109b0c:	45800015 	stw	r22,0(r8)
10109b10:	41c00115 	stw	r7,4(r8)
10109b14:	d8801c15 	stw	r2,112(sp)
10109b18:	d9001b15 	stw	r4,108(sp)
10109b1c:	793ff40e 	bge	r15,r4,10109af0 <___vfiprintf_internal_r+0x470>
10109b20:	1001b51e 	bne	r2,zero,1010a1f8 <___vfiprintf_internal_r+0xb78>
10109b24:	843ffc04 	addi	r16,r16,-16
10109b28:	000d883a 	mov	r6,zero
10109b2c:	01400044 	movi	r5,1
10109b30:	d811883a 	mov	r8,sp
10109b34:	3c3ff316 	blt	r7,r16,10109b04 <___vfiprintf_internal_r+0x484>
10109b38:	8007883a 	mov	r3,r16
10109b3c:	da402517 	ldw	r9,148(sp)
10109b40:	db802817 	ldw	r14,160(sp)
10109b44:	dc002917 	ldw	r16,164(sp)
10109b48:	da802417 	ldw	r10,144(sp)
10109b4c:	1885883a 	add	r2,r3,r2
10109b50:	40c00115 	stw	r3,4(r8)
10109b54:	42800015 	stw	r10,0(r8)
10109b58:	d8801c15 	stw	r2,112(sp)
10109b5c:	d9401b15 	stw	r5,108(sp)
10109b60:	00c001c4 	movi	r3,7
10109b64:	19426016 	blt	r3,r5,1010a4e8 <___vfiprintf_internal_r+0xe68>
10109b68:	d8c01d87 	ldb	r3,118(sp)
10109b6c:	42000204 	addi	r8,r8,8
10109b70:	29000044 	addi	r4,r5,1
10109b74:	1801b31e 	bne	r3,zero,1010a244 <___vfiprintf_internal_r+0xbc4>
10109b78:	7001c026 	beq	r14,zero,1010a27c <___vfiprintf_internal_r+0xbfc>
10109b7c:	d8c01d04 	addi	r3,sp,116
10109b80:	10800084 	addi	r2,r2,2
10109b84:	40c00015 	stw	r3,0(r8)
10109b88:	00c00084 	movi	r3,2
10109b8c:	40c00115 	stw	r3,4(r8)
10109b90:	d8801c15 	stw	r2,112(sp)
10109b94:	d9001b15 	stw	r4,108(sp)
10109b98:	00c001c4 	movi	r3,7
10109b9c:	1902650e 	bge	r3,r4,1010a534 <___vfiprintf_internal_r+0xeb4>
10109ba0:	10029a1e 	bne	r2,zero,1010a60c <___vfiprintf_internal_r+0xf8c>
10109ba4:	00c02004 	movi	r3,128
10109ba8:	01000044 	movi	r4,1
10109bac:	000b883a 	mov	r5,zero
10109bb0:	d811883a 	mov	r8,sp
10109bb4:	e0c1b31e 	bne	fp,r3,1010a284 <___vfiprintf_internal_r+0xc04>
10109bb8:	8cb9c83a 	sub	fp,r17,r18
10109bbc:	0701b10e 	bge	zero,fp,1010a284 <___vfiprintf_internal_r+0xc04>
10109bc0:	01c00404 	movi	r7,16
10109bc4:	3f03890e 	bge	r7,fp,1010a9ec <___vfiprintf_internal_r+0x136c>
10109bc8:	00c40474 	movhi	r3,4113
10109bcc:	18c41b04 	addi	r3,r3,4204
10109bd0:	d8c02415 	stw	r3,144(sp)
10109bd4:	8007883a 	mov	r3,r16
10109bd8:	034001c4 	movi	r13,7
10109bdc:	e021883a 	mov	r16,fp
10109be0:	da402515 	stw	r9,148(sp)
10109be4:	1839883a 	mov	fp,r3
10109be8:	00000506 	br	10109c00 <___vfiprintf_internal_r+0x580>
10109bec:	29800084 	addi	r6,r5,2
10109bf0:	42000204 	addi	r8,r8,8
10109bf4:	180b883a 	mov	r5,r3
10109bf8:	843ffc04 	addi	r16,r16,-16
10109bfc:	3c000d0e 	bge	r7,r16,10109c34 <___vfiprintf_internal_r+0x5b4>
10109c00:	10800404 	addi	r2,r2,16
10109c04:	28c00044 	addi	r3,r5,1
10109c08:	45c00015 	stw	r23,0(r8)
10109c0c:	41c00115 	stw	r7,4(r8)
10109c10:	d8801c15 	stw	r2,112(sp)
10109c14:	d8c01b15 	stw	r3,108(sp)
10109c18:	68fff40e 	bge	r13,r3,10109bec <___vfiprintf_internal_r+0x56c>
10109c1c:	1002241e 	bne	r2,zero,1010a4b0 <___vfiprintf_internal_r+0xe30>
10109c20:	843ffc04 	addi	r16,r16,-16
10109c24:	01800044 	movi	r6,1
10109c28:	000b883a 	mov	r5,zero
10109c2c:	d811883a 	mov	r8,sp
10109c30:	3c3ff316 	blt	r7,r16,10109c00 <___vfiprintf_internal_r+0x580>
10109c34:	da402517 	ldw	r9,148(sp)
10109c38:	e007883a 	mov	r3,fp
10109c3c:	8039883a 	mov	fp,r16
10109c40:	1821883a 	mov	r16,r3
10109c44:	d8c02417 	ldw	r3,144(sp)
10109c48:	1705883a 	add	r2,r2,fp
10109c4c:	47000115 	stw	fp,4(r8)
10109c50:	40c00015 	stw	r3,0(r8)
10109c54:	d8801c15 	stw	r2,112(sp)
10109c58:	d9801b15 	stw	r6,108(sp)
10109c5c:	00c001c4 	movi	r3,7
10109c60:	19827616 	blt	r3,r6,1010a63c <___vfiprintf_internal_r+0xfbc>
10109c64:	4cf9c83a 	sub	fp,r9,r19
10109c68:	42000204 	addi	r8,r8,8
10109c6c:	31000044 	addi	r4,r6,1
10109c70:	300b883a 	mov	r5,r6
10109c74:	07018516 	blt	zero,fp,1010a28c <___vfiprintf_internal_r+0xc0c>
10109c78:	9885883a 	add	r2,r19,r2
10109c7c:	45400015 	stw	r21,0(r8)
10109c80:	44c00115 	stw	r19,4(r8)
10109c84:	d8801c15 	stw	r2,112(sp)
10109c88:	d9001b15 	stw	r4,108(sp)
10109c8c:	00c001c4 	movi	r3,7
10109c90:	1901dd0e 	bge	r3,r4,1010a408 <___vfiprintf_internal_r+0xd88>
10109c94:	1002401e 	bne	r2,zero,1010a598 <___vfiprintf_internal_r+0xf18>
10109c98:	d8001b15 	stw	zero,108(sp)
10109c9c:	a2c0010c 	andi	r11,r20,4
10109ca0:	58000226 	beq	r11,zero,10109cac <___vfiprintf_internal_r+0x62c>
10109ca4:	8ca7c83a 	sub	r19,r17,r18
10109ca8:	04c2f216 	blt	zero,r19,1010a874 <___vfiprintf_internal_r+0x11f4>
10109cac:	8c80010e 	bge	r17,r18,10109cb4 <___vfiprintf_internal_r+0x634>
10109cb0:	9023883a 	mov	r17,r18
10109cb4:	da802317 	ldw	r10,140(sp)
10109cb8:	5455883a 	add	r10,r10,r17
10109cbc:	da802315 	stw	r10,140(sp)
10109cc0:	d8001b15 	stw	zero,108(sp)
10109cc4:	d811883a 	mov	r8,sp
10109cc8:	003ea206 	br	10109754 <___vfiprintf_internal_r+0xd4>
10109ccc:	a5000814 	ori	r20,r20,32
10109cd0:	80c00007 	ldb	r3,0(r16)
10109cd4:	003ec906 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109cd8:	80c00007 	ldb	r3,0(r16)
10109cdc:	1b030926 	beq	r3,r12,1010a904 <___vfiprintf_internal_r+0x1284>
10109ce0:	a5000414 	ori	r20,r20,16
10109ce4:	003ec506 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109ce8:	21003fcc 	andi	r4,r4,255
10109cec:	20035e1e 	bne	r4,zero,1010aa68 <___vfiprintf_internal_r+0x13e8>
10109cf0:	a080080c 	andi	r2,r20,32
10109cf4:	1002a526 	beq	r2,zero,1010a78c <___vfiprintf_internal_r+0x110c>
10109cf8:	da802217 	ldw	r10,136(sp)
10109cfc:	50800017 	ldw	r2,0(r10)
10109d00:	da802317 	ldw	r10,140(sp)
10109d04:	5007d7fa 	srai	r3,r10,31
10109d08:	da802217 	ldw	r10,136(sp)
10109d0c:	10c00115 	stw	r3,4(r2)
10109d10:	52800104 	addi	r10,r10,4
10109d14:	da802215 	stw	r10,136(sp)
10109d18:	da802317 	ldw	r10,140(sp)
10109d1c:	12800015 	stw	r10,0(r2)
10109d20:	003e8c06 	br	10109754 <___vfiprintf_internal_r+0xd4>
10109d24:	21003fcc 	andi	r4,r4,255
10109d28:	2003511e 	bne	r4,zero,1010aa70 <___vfiprintf_internal_r+0x13f0>
10109d2c:	a080080c 	andi	r2,r20,32
10109d30:	1000a126 	beq	r2,zero,10109fb8 <___vfiprintf_internal_r+0x938>
10109d34:	da802217 	ldw	r10,136(sp)
10109d38:	d8001d85 	stb	zero,118(sp)
10109d3c:	50800204 	addi	r2,r10,8
10109d40:	54800017 	ldw	r18,0(r10)
10109d44:	54c00117 	ldw	r19,4(r10)
10109d48:	4802b416 	blt	r9,zero,1010a81c <___vfiprintf_internal_r+0x119c>
10109d4c:	013fdfc4 	movi	r4,-129
10109d50:	94c6b03a 	or	r3,r18,r19
10109d54:	d8802215 	stw	r2,136(sp)
10109d58:	a128703a 	and	r20,r20,r4
10109d5c:	1800a226 	beq	r3,zero,10109fe8 <___vfiprintf_internal_r+0x968>
10109d60:	0039883a 	mov	fp,zero
10109d64:	dd401a04 	addi	r21,sp,104
10109d68:	9006d0fa 	srli	r3,r18,3
10109d6c:	9808977a 	slli	r4,r19,29
10109d70:	9826d0fa 	srli	r19,r19,3
10109d74:	948001cc 	andi	r18,r18,7
10109d78:	90800c04 	addi	r2,r18,48
10109d7c:	ad7fffc4 	addi	r21,r21,-1
10109d80:	20e4b03a 	or	r18,r4,r3
10109d84:	a8800005 	stb	r2,0(r21)
10109d88:	94c6b03a 	or	r3,r18,r19
10109d8c:	183ff61e 	bne	r3,zero,10109d68 <___vfiprintf_internal_r+0x6e8>
10109d90:	a0c0004c 	andi	r3,r20,1
10109d94:	18005926 	beq	r3,zero,10109efc <___vfiprintf_internal_r+0x87c>
10109d98:	10803fcc 	andi	r2,r2,255
10109d9c:	1080201c 	xori	r2,r2,128
10109da0:	10bfe004 	addi	r2,r2,-128
10109da4:	00c00c04 	movi	r3,48
10109da8:	10c05426 	beq	r2,r3,10109efc <___vfiprintf_internal_r+0x87c>
10109dac:	da801e17 	ldw	r10,120(sp)
10109db0:	a8bfffc4 	addi	r2,r21,-1
10109db4:	a8ffffc5 	stb	r3,-1(r21)
10109db8:	50a7c83a 	sub	r19,r10,r2
10109dbc:	102b883a 	mov	r21,r2
10109dc0:	003f2f06 	br	10109a80 <___vfiprintf_internal_r+0x400>
10109dc4:	21003fcc 	andi	r4,r4,255
10109dc8:	2003421e 	bne	r4,zero,1010aad4 <___vfiprintf_internal_r+0x1454>
10109dcc:	00840474 	movhi	r2,4113
10109dd0:	1083ba04 	addi	r2,r2,3816
10109dd4:	d8802615 	stw	r2,152(sp)
10109dd8:	a080080c 	andi	r2,r20,32
10109ddc:	1000aa26 	beq	r2,zero,1010a088 <___vfiprintf_internal_r+0xa08>
10109de0:	da802217 	ldw	r10,136(sp)
10109de4:	54800017 	ldw	r18,0(r10)
10109de8:	54c00117 	ldw	r19,4(r10)
10109dec:	52800204 	addi	r10,r10,8
10109df0:	da802215 	stw	r10,136(sp)
10109df4:	a080004c 	andi	r2,r20,1
10109df8:	1001d226 	beq	r2,zero,1010a544 <___vfiprintf_internal_r+0xec4>
10109dfc:	94c4b03a 	or	r2,r18,r19
10109e00:	1002351e 	bne	r2,zero,1010a6d8 <___vfiprintf_internal_r+0x1058>
10109e04:	d8001d85 	stb	zero,118(sp)
10109e08:	48022216 	blt	r9,zero,1010a694 <___vfiprintf_internal_r+0x1014>
10109e0c:	00bfdfc4 	movi	r2,-129
10109e10:	a0a8703a 	and	r20,r20,r2
10109e14:	003f1506 	br	10109a6c <___vfiprintf_internal_r+0x3ec>
10109e18:	da802217 	ldw	r10,136(sp)
10109e1c:	04800044 	movi	r18,1
10109e20:	d8001d85 	stb	zero,118(sp)
10109e24:	50800017 	ldw	r2,0(r10)
10109e28:	52800104 	addi	r10,r10,4
10109e2c:	da802215 	stw	r10,136(sp)
10109e30:	d8801005 	stb	r2,64(sp)
10109e34:	9027883a 	mov	r19,r18
10109e38:	dd401004 	addi	r21,sp,64
10109e3c:	0013883a 	mov	r9,zero
10109e40:	003f1706 	br	10109aa0 <___vfiprintf_internal_r+0x420>
10109e44:	21003fcc 	andi	r4,r4,255
10109e48:	2003201e 	bne	r4,zero,1010aacc <___vfiprintf_internal_r+0x144c>
10109e4c:	a080080c 	andi	r2,r20,32
10109e50:	10004b26 	beq	r2,zero,10109f80 <___vfiprintf_internal_r+0x900>
10109e54:	da802217 	ldw	r10,136(sp)
10109e58:	50800117 	ldw	r2,4(r10)
10109e5c:	54800017 	ldw	r18,0(r10)
10109e60:	52800204 	addi	r10,r10,8
10109e64:	da802215 	stw	r10,136(sp)
10109e68:	1027883a 	mov	r19,r2
10109e6c:	10022c16 	blt	r2,zero,1010a720 <___vfiprintf_internal_r+0x10a0>
10109e70:	df001d83 	ldbu	fp,118(sp)
10109e74:	48007216 	blt	r9,zero,1010a040 <___vfiprintf_internal_r+0x9c0>
10109e78:	00ffdfc4 	movi	r3,-129
10109e7c:	94c4b03a 	or	r2,r18,r19
10109e80:	a0e8703a 	and	r20,r20,r3
10109e84:	1000cc26 	beq	r2,zero,1010a1b8 <___vfiprintf_internal_r+0xb38>
10109e88:	98021026 	beq	r19,zero,1010a6cc <___vfiprintf_internal_r+0x104c>
10109e8c:	dc402415 	stw	r17,144(sp)
10109e90:	dc002515 	stw	r16,148(sp)
10109e94:	9823883a 	mov	r17,r19
10109e98:	9021883a 	mov	r16,r18
10109e9c:	dd401a04 	addi	r21,sp,104
10109ea0:	4825883a 	mov	r18,r9
10109ea4:	4027883a 	mov	r19,r8
10109ea8:	8009883a 	mov	r4,r16
10109eac:	880b883a 	mov	r5,r17
10109eb0:	01800284 	movi	r6,10
10109eb4:	000f883a 	mov	r7,zero
10109eb8:	010ba600 	call	1010ba60 <__umoddi3>
10109ebc:	10800c04 	addi	r2,r2,48
10109ec0:	ad7fffc4 	addi	r21,r21,-1
10109ec4:	8009883a 	mov	r4,r16
10109ec8:	880b883a 	mov	r5,r17
10109ecc:	a8800005 	stb	r2,0(r21)
10109ed0:	01800284 	movi	r6,10
10109ed4:	000f883a 	mov	r7,zero
10109ed8:	010b4e80 	call	1010b4e8 <__udivdi3>
10109edc:	1021883a 	mov	r16,r2
10109ee0:	10c4b03a 	or	r2,r2,r3
10109ee4:	1823883a 	mov	r17,r3
10109ee8:	103fef1e 	bne	r2,zero,10109ea8 <___vfiprintf_internal_r+0x828>
10109eec:	dc402417 	ldw	r17,144(sp)
10109ef0:	dc002517 	ldw	r16,148(sp)
10109ef4:	9013883a 	mov	r9,r18
10109ef8:	9811883a 	mov	r8,r19
10109efc:	da801e17 	ldw	r10,120(sp)
10109f00:	5567c83a 	sub	r19,r10,r21
10109f04:	003ede06 	br	10109a80 <___vfiprintf_internal_r+0x400>
10109f08:	38803fcc 	andi	r2,r7,255
10109f0c:	1080201c 	xori	r2,r2,128
10109f10:	10bfe004 	addi	r2,r2,-128
10109f14:	1002371e 	bne	r2,zero,1010a7f4 <___vfiprintf_internal_r+0x1174>
10109f18:	01000044 	movi	r4,1
10109f1c:	01c00804 	movi	r7,32
10109f20:	80c00007 	ldb	r3,0(r16)
10109f24:	003e3506 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109f28:	a5000054 	ori	r20,r20,1
10109f2c:	80c00007 	ldb	r3,0(r16)
10109f30:	003e3206 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109f34:	a5002014 	ori	r20,r20,128
10109f38:	80c00007 	ldb	r3,0(r16)
10109f3c:	003e2f06 	br	101097fc <___vfiprintf_internal_r+0x17c>
10109f40:	8015883a 	mov	r10,r16
10109f44:	0023883a 	mov	r17,zero
10109f48:	18bff404 	addi	r2,r3,-48
10109f4c:	50c00007 	ldb	r3,0(r10)
10109f50:	8c4002a4 	muli	r17,r17,10
10109f54:	84000044 	addi	r16,r16,1
10109f58:	8015883a 	mov	r10,r16
10109f5c:	1463883a 	add	r17,r2,r17
10109f60:	18bff404 	addi	r2,r3,-48
10109f64:	30bff92e 	bgeu	r6,r2,10109f4c <___vfiprintf_internal_r+0x8cc>
10109f68:	003e2506 	br	10109800 <___vfiprintf_internal_r+0x180>
10109f6c:	21003fcc 	andi	r4,r4,255
10109f70:	2002d41e 	bne	r4,zero,1010aac4 <___vfiprintf_internal_r+0x1444>
10109f74:	a5000414 	ori	r20,r20,16
10109f78:	a080080c 	andi	r2,r20,32
10109f7c:	103fb51e 	bne	r2,zero,10109e54 <___vfiprintf_internal_r+0x7d4>
10109f80:	a080040c 	andi	r2,r20,16
10109f84:	1001f826 	beq	r2,zero,1010a768 <___vfiprintf_internal_r+0x10e8>
10109f88:	da802217 	ldw	r10,136(sp)
10109f8c:	54800017 	ldw	r18,0(r10)
10109f90:	52800104 	addi	r10,r10,4
10109f94:	da802215 	stw	r10,136(sp)
10109f98:	9027d7fa 	srai	r19,r18,31
10109f9c:	9805883a 	mov	r2,r19
10109fa0:	003fb206 	br	10109e6c <___vfiprintf_internal_r+0x7ec>
10109fa4:	21003fcc 	andi	r4,r4,255
10109fa8:	2002c41e 	bne	r4,zero,1010aabc <___vfiprintf_internal_r+0x143c>
10109fac:	a5000414 	ori	r20,r20,16
10109fb0:	a080080c 	andi	r2,r20,32
10109fb4:	103f5f1e 	bne	r2,zero,10109d34 <___vfiprintf_internal_r+0x6b4>
10109fb8:	a080040c 	andi	r2,r20,16
10109fbc:	10020f26 	beq	r2,zero,1010a7fc <___vfiprintf_internal_r+0x117c>
10109fc0:	da802217 	ldw	r10,136(sp)
10109fc4:	d8001d85 	stb	zero,118(sp)
10109fc8:	0027883a 	mov	r19,zero
10109fcc:	50800104 	addi	r2,r10,4
10109fd0:	54800017 	ldw	r18,0(r10)
10109fd4:	48021116 	blt	r9,zero,1010a81c <___vfiprintf_internal_r+0x119c>
10109fd8:	00ffdfc4 	movi	r3,-129
10109fdc:	d8802215 	stw	r2,136(sp)
10109fe0:	a0e8703a 	and	r20,r20,r3
10109fe4:	903f5e1e 	bne	r18,zero,10109d60 <___vfiprintf_internal_r+0x6e0>
10109fe8:	0039883a 	mov	fp,zero
10109fec:	4802a626 	beq	r9,zero,1010aa88 <___vfiprintf_internal_r+0x1408>
10109ff0:	0025883a 	mov	r18,zero
10109ff4:	0027883a 	mov	r19,zero
10109ff8:	003f5a06 	br	10109d64 <___vfiprintf_internal_r+0x6e4>
10109ffc:	21003fcc 	andi	r4,r4,255
1010a000:	20029f1e 	bne	r4,zero,1010aa80 <___vfiprintf_internal_r+0x1400>
1010a004:	a5000414 	ori	r20,r20,16
1010a008:	a080080c 	andi	r2,r20,32
1010a00c:	10005e1e 	bne	r2,zero,1010a188 <___vfiprintf_internal_r+0xb08>
1010a010:	a080040c 	andi	r2,r20,16
1010a014:	1001a21e 	bne	r2,zero,1010a6a0 <___vfiprintf_internal_r+0x1020>
1010a018:	a080100c 	andi	r2,r20,64
1010a01c:	d8001d85 	stb	zero,118(sp)
1010a020:	da802217 	ldw	r10,136(sp)
1010a024:	1002231e 	bne	r2,zero,1010a8b4 <___vfiprintf_internal_r+0x1234>
1010a028:	50800104 	addi	r2,r10,4
1010a02c:	54800017 	ldw	r18,0(r10)
1010a030:	0027883a 	mov	r19,zero
1010a034:	4801a00e 	bge	r9,zero,1010a6b8 <___vfiprintf_internal_r+0x1038>
1010a038:	d8802215 	stw	r2,136(sp)
1010a03c:	0039883a 	mov	fp,zero
1010a040:	94c4b03a 	or	r2,r18,r19
1010a044:	103f901e 	bne	r2,zero,10109e88 <___vfiprintf_internal_r+0x808>
1010a048:	00800044 	movi	r2,1
1010a04c:	10803fcc 	andi	r2,r2,255
1010a050:	00c00044 	movi	r3,1
1010a054:	10c05926 	beq	r2,r3,1010a1bc <___vfiprintf_internal_r+0xb3c>
1010a058:	00c00084 	movi	r3,2
1010a05c:	10ffe41e 	bne	r2,r3,10109ff0 <___vfiprintf_internal_r+0x970>
1010a060:	0025883a 	mov	r18,zero
1010a064:	0027883a 	mov	r19,zero
1010a068:	00013d06 	br	1010a560 <___vfiprintf_internal_r+0xee0>
1010a06c:	21003fcc 	andi	r4,r4,255
1010a070:	2002811e 	bne	r4,zero,1010aa78 <___vfiprintf_internal_r+0x13f8>
1010a074:	00840474 	movhi	r2,4113
1010a078:	1083b504 	addi	r2,r2,3796
1010a07c:	d8802615 	stw	r2,152(sp)
1010a080:	a080080c 	andi	r2,r20,32
1010a084:	103f561e 	bne	r2,zero,10109de0 <___vfiprintf_internal_r+0x760>
1010a088:	a080040c 	andi	r2,r20,16
1010a08c:	1001d126 	beq	r2,zero,1010a7d4 <___vfiprintf_internal_r+0x1154>
1010a090:	da802217 	ldw	r10,136(sp)
1010a094:	0027883a 	mov	r19,zero
1010a098:	54800017 	ldw	r18,0(r10)
1010a09c:	52800104 	addi	r10,r10,4
1010a0a0:	da802215 	stw	r10,136(sp)
1010a0a4:	003f5306 	br	10109df4 <___vfiprintf_internal_r+0x774>
1010a0a8:	da802217 	ldw	r10,136(sp)
1010a0ac:	d8001d85 	stb	zero,118(sp)
1010a0b0:	55400017 	ldw	r21,0(r10)
1010a0b4:	50c00104 	addi	r3,r10,4
1010a0b8:	a8024226 	beq	r21,zero,1010a9c4 <___vfiprintf_internal_r+0x1344>
1010a0bc:	48021816 	blt	r9,zero,1010a920 <___vfiprintf_internal_r+0x12a0>
1010a0c0:	480d883a 	mov	r6,r9
1010a0c4:	000b883a 	mov	r5,zero
1010a0c8:	a809883a 	mov	r4,r21
1010a0cc:	d8c02a15 	stw	r3,168(sp)
1010a0d0:	da002b15 	stw	r8,172(sp)
1010a0d4:	da402c15 	stw	r9,176(sp)
1010a0d8:	01077140 	call	10107714 <memchr>
1010a0dc:	d8c02a17 	ldw	r3,168(sp)
1010a0e0:	da002b17 	ldw	r8,172(sp)
1010a0e4:	da402c17 	ldw	r9,176(sp)
1010a0e8:	10024826 	beq	r2,zero,1010aa0c <___vfiprintf_internal_r+0x138c>
1010a0ec:	1567c83a 	sub	r19,r2,r21
1010a0f0:	df001d83 	ldbu	fp,118(sp)
1010a0f4:	d8c02215 	stw	r3,136(sp)
1010a0f8:	0013883a 	mov	r9,zero
1010a0fc:	003e6006 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010a100:	21003fcc 	andi	r4,r4,255
1010a104:	203fc026 	beq	r4,zero,1010a008 <___vfiprintf_internal_r+0x988>
1010a108:	d9c01d85 	stb	r7,118(sp)
1010a10c:	003fbe06 	br	1010a008 <___vfiprintf_internal_r+0x988>
1010a110:	da802217 	ldw	r10,136(sp)
1010a114:	54400017 	ldw	r17,0(r10)
1010a118:	50800104 	addi	r2,r10,4
1010a11c:	883e3b16 	blt	r17,zero,10109a0c <___vfiprintf_internal_r+0x38c>
1010a120:	d8802215 	stw	r2,136(sp)
1010a124:	80c00007 	ldb	r3,0(r16)
1010a128:	003db406 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010a12c:	01000044 	movi	r4,1
1010a130:	01c00ac4 	movi	r7,43
1010a134:	80c00007 	ldb	r3,0(r16)
1010a138:	003db006 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010a13c:	80c00007 	ldb	r3,0(r16)
1010a140:	82800044 	addi	r10,r16,1
1010a144:	1b423c26 	beq	r3,r13,1010aa38 <___vfiprintf_internal_r+0x13b8>
1010a148:	18bff404 	addi	r2,r3,-48
1010a14c:	0013883a 	mov	r9,zero
1010a150:	30822b36 	bltu	r6,r2,1010aa00 <___vfiprintf_internal_r+0x1380>
1010a154:	50c00007 	ldb	r3,0(r10)
1010a158:	4a4002a4 	muli	r9,r9,10
1010a15c:	54000044 	addi	r16,r10,1
1010a160:	8015883a 	mov	r10,r16
1010a164:	4893883a 	add	r9,r9,r2
1010a168:	18bff404 	addi	r2,r3,-48
1010a16c:	30bff92e 	bgeu	r6,r2,1010a154 <___vfiprintf_internal_r+0xad4>
1010a170:	483da30e 	bge	r9,zero,10109800 <___vfiprintf_internal_r+0x180>
1010a174:	027fffc4 	movi	r9,-1
1010a178:	003da106 	br	10109800 <___vfiprintf_internal_r+0x180>
1010a17c:	a5001014 	ori	r20,r20,64
1010a180:	80c00007 	ldb	r3,0(r16)
1010a184:	003d9d06 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010a188:	da802217 	ldw	r10,136(sp)
1010a18c:	d8001d85 	stb	zero,118(sp)
1010a190:	50c00204 	addi	r3,r10,8
1010a194:	54800017 	ldw	r18,0(r10)
1010a198:	54c00117 	ldw	r19,4(r10)
1010a19c:	4801ca16 	blt	r9,zero,1010a8c8 <___vfiprintf_internal_r+0x1248>
1010a1a0:	013fdfc4 	movi	r4,-129
1010a1a4:	94c4b03a 	or	r2,r18,r19
1010a1a8:	d8c02215 	stw	r3,136(sp)
1010a1ac:	a128703a 	and	r20,r20,r4
1010a1b0:	0039883a 	mov	fp,zero
1010a1b4:	103f341e 	bne	r2,zero,10109e88 <___vfiprintf_internal_r+0x808>
1010a1b8:	483e2e26 	beq	r9,zero,10109a74 <___vfiprintf_internal_r+0x3f4>
1010a1bc:	0025883a 	mov	r18,zero
1010a1c0:	94800c04 	addi	r18,r18,48
1010a1c4:	dc8019c5 	stb	r18,103(sp)
1010a1c8:	dcc02717 	ldw	r19,156(sp)
1010a1cc:	dd4019c4 	addi	r21,sp,103
1010a1d0:	003e2b06 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010a1d4:	21003fcc 	andi	r4,r4,255
1010a1d8:	2002361e 	bne	r4,zero,1010aab4 <___vfiprintf_internal_r+0x1434>
1010a1dc:	1801c126 	beq	r3,zero,1010a8e4 <___vfiprintf_internal_r+0x1264>
1010a1e0:	04800044 	movi	r18,1
1010a1e4:	d8c01005 	stb	r3,64(sp)
1010a1e8:	d8001d85 	stb	zero,118(sp)
1010a1ec:	9027883a 	mov	r19,r18
1010a1f0:	dd401004 	addi	r21,sp,64
1010a1f4:	003f1106 	br	10109e3c <___vfiprintf_internal_r+0x7bc>
1010a1f8:	d9402117 	ldw	r5,132(sp)
1010a1fc:	d9002017 	ldw	r4,128(sp)
1010a200:	d9801a04 	addi	r6,sp,104
1010a204:	d9c02b15 	stw	r7,172(sp)
1010a208:	dbc02a15 	stw	r15,168(sp)
1010a20c:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a210:	d9c02b17 	ldw	r7,172(sp)
1010a214:	dbc02a17 	ldw	r15,168(sp)
1010a218:	10006d1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a21c:	d9801b17 	ldw	r6,108(sp)
1010a220:	d8801c17 	ldw	r2,112(sp)
1010a224:	d811883a 	mov	r8,sp
1010a228:	31400044 	addi	r5,r6,1
1010a22c:	003e3306 	br	10109afc <___vfiprintf_internal_r+0x47c>
1010a230:	d9401b17 	ldw	r5,108(sp)
1010a234:	d8801c17 	ldw	r2,112(sp)
1010a238:	29000044 	addi	r4,r5,1
1010a23c:	d8c01d87 	ldb	r3,118(sp)
1010a240:	183e4d26 	beq	r3,zero,10109b78 <___vfiprintf_internal_r+0x4f8>
1010a244:	00c00044 	movi	r3,1
1010a248:	d9401d84 	addi	r5,sp,118
1010a24c:	10c5883a 	add	r2,r2,r3
1010a250:	41400015 	stw	r5,0(r8)
1010a254:	40c00115 	stw	r3,4(r8)
1010a258:	d8801c15 	stw	r2,112(sp)
1010a25c:	d9001b15 	stw	r4,108(sp)
1010a260:	014001c4 	movi	r5,7
1010a264:	2900a90e 	bge	r5,r4,1010a50c <___vfiprintf_internal_r+0xe8c>
1010a268:	1000da1e 	bne	r2,zero,1010a5d4 <___vfiprintf_internal_r+0xf54>
1010a26c:	7000ab1e 	bne	r14,zero,1010a51c <___vfiprintf_internal_r+0xe9c>
1010a270:	000b883a 	mov	r5,zero
1010a274:	1809883a 	mov	r4,r3
1010a278:	d811883a 	mov	r8,sp
1010a27c:	00c02004 	movi	r3,128
1010a280:	e0fe4d26 	beq	fp,r3,10109bb8 <___vfiprintf_internal_r+0x538>
1010a284:	4cf9c83a 	sub	fp,r9,r19
1010a288:	073e7b0e 	bge	zero,fp,10109c78 <___vfiprintf_internal_r+0x5f8>
1010a28c:	01c00404 	movi	r7,16
1010a290:	3f01900e 	bge	r7,fp,1010a8d4 <___vfiprintf_internal_r+0x1254>
1010a294:	00c40474 	movhi	r3,4113
1010a298:	18c41b04 	addi	r3,r3,4204
1010a29c:	d8c02415 	stw	r3,144(sp)
1010a2a0:	034001c4 	movi	r13,7
1010a2a4:	00000506 	br	1010a2bc <___vfiprintf_internal_r+0xc3c>
1010a2a8:	29000084 	addi	r4,r5,2
1010a2ac:	42000204 	addi	r8,r8,8
1010a2b0:	180b883a 	mov	r5,r3
1010a2b4:	e73ffc04 	addi	fp,fp,-16
1010a2b8:	3f000d0e 	bge	r7,fp,1010a2f0 <___vfiprintf_internal_r+0xc70>
1010a2bc:	10800404 	addi	r2,r2,16
1010a2c0:	28c00044 	addi	r3,r5,1
1010a2c4:	45c00015 	stw	r23,0(r8)
1010a2c8:	41c00115 	stw	r7,4(r8)
1010a2cc:	d8801c15 	stw	r2,112(sp)
1010a2d0:	d8c01b15 	stw	r3,108(sp)
1010a2d4:	68fff40e 	bge	r13,r3,1010a2a8 <___vfiprintf_internal_r+0xc28>
1010a2d8:	1000101e 	bne	r2,zero,1010a31c <___vfiprintf_internal_r+0xc9c>
1010a2dc:	e73ffc04 	addi	fp,fp,-16
1010a2e0:	01000044 	movi	r4,1
1010a2e4:	000b883a 	mov	r5,zero
1010a2e8:	d811883a 	mov	r8,sp
1010a2ec:	3f3ff316 	blt	r7,fp,1010a2bc <___vfiprintf_internal_r+0xc3c>
1010a2f0:	da802417 	ldw	r10,144(sp)
1010a2f4:	1705883a 	add	r2,r2,fp
1010a2f8:	47000115 	stw	fp,4(r8)
1010a2fc:	42800015 	stw	r10,0(r8)
1010a300:	d8801c15 	stw	r2,112(sp)
1010a304:	d9001b15 	stw	r4,108(sp)
1010a308:	00c001c4 	movi	r3,7
1010a30c:	19003616 	blt	r3,r4,1010a3e8 <___vfiprintf_internal_r+0xd68>
1010a310:	42000204 	addi	r8,r8,8
1010a314:	21000044 	addi	r4,r4,1
1010a318:	003e5706 	br	10109c78 <___vfiprintf_internal_r+0x5f8>
1010a31c:	d9402117 	ldw	r5,132(sp)
1010a320:	d9002017 	ldw	r4,128(sp)
1010a324:	d9801a04 	addi	r6,sp,104
1010a328:	d9c02b15 	stw	r7,172(sp)
1010a32c:	db402a15 	stw	r13,168(sp)
1010a330:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a334:	d9c02b17 	ldw	r7,172(sp)
1010a338:	db402a17 	ldw	r13,168(sp)
1010a33c:	1000241e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a340:	d9401b17 	ldw	r5,108(sp)
1010a344:	d8801c17 	ldw	r2,112(sp)
1010a348:	d811883a 	mov	r8,sp
1010a34c:	29000044 	addi	r4,r5,1
1010a350:	003fd806 	br	1010a2b4 <___vfiprintf_internal_r+0xc34>
1010a354:	d9401b17 	ldw	r5,108(sp)
1010a358:	00c40474 	movhi	r3,4113
1010a35c:	18c41f04 	addi	r3,r3,4220
1010a360:	d8c02415 	stw	r3,144(sp)
1010a364:	29400044 	addi	r5,r5,1
1010a368:	d8c02417 	ldw	r3,144(sp)
1010a36c:	14c5883a 	add	r2,r2,r19
1010a370:	44c00115 	stw	r19,4(r8)
1010a374:	40c00015 	stw	r3,0(r8)
1010a378:	d8801c15 	stw	r2,112(sp)
1010a37c:	d9401b15 	stw	r5,108(sp)
1010a380:	00c001c4 	movi	r3,7
1010a384:	1940070e 	bge	r3,r5,1010a3a4 <___vfiprintf_internal_r+0xd24>
1010a388:	103e4826 	beq	r2,zero,10109cac <___vfiprintf_internal_r+0x62c>
1010a38c:	d9402117 	ldw	r5,132(sp)
1010a390:	d9002017 	ldw	r4,128(sp)
1010a394:	d9801a04 	addi	r6,sp,104
1010a398:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a39c:	10000c1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a3a0:	d8801c17 	ldw	r2,112(sp)
1010a3a4:	8c80010e 	bge	r17,r18,1010a3ac <___vfiprintf_internal_r+0xd2c>
1010a3a8:	9023883a 	mov	r17,r18
1010a3ac:	da802317 	ldw	r10,140(sp)
1010a3b0:	5455883a 	add	r10,r10,r17
1010a3b4:	da802315 	stw	r10,140(sp)
1010a3b8:	103e4126 	beq	r2,zero,10109cc0 <___vfiprintf_internal_r+0x640>
1010a3bc:	d9402117 	ldw	r5,132(sp)
1010a3c0:	d9002017 	ldw	r4,128(sp)
1010a3c4:	d9801a04 	addi	r6,sp,104
1010a3c8:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a3cc:	103e3c26 	beq	r2,zero,10109cc0 <___vfiprintf_internal_r+0x640>
1010a3d0:	dd002117 	ldw	r20,132(sp)
1010a3d4:	a080030b 	ldhu	r2,12(r20)
1010a3d8:	1080100c 	andi	r2,r2,64
1010a3dc:	1001231e 	bne	r2,zero,1010a86c <___vfiprintf_internal_r+0x11ec>
1010a3e0:	d8802317 	ldw	r2,140(sp)
1010a3e4:	003d7b06 	br	101099d4 <___vfiprintf_internal_r+0x354>
1010a3e8:	1000991e 	bne	r2,zero,1010a650 <___vfiprintf_internal_r+0xfd0>
1010a3ec:	00c00044 	movi	r3,1
1010a3f0:	9805883a 	mov	r2,r19
1010a3f4:	dd400015 	stw	r21,0(sp)
1010a3f8:	dcc00115 	stw	r19,4(sp)
1010a3fc:	dcc01c15 	stw	r19,112(sp)
1010a400:	d8c01b15 	stw	r3,108(sp)
1010a404:	d811883a 	mov	r8,sp
1010a408:	42000204 	addi	r8,r8,8
1010a40c:	a2c0010c 	andi	r11,r20,4
1010a410:	583fe426 	beq	r11,zero,1010a3a4 <___vfiprintf_internal_r+0xd24>
1010a414:	8ca7c83a 	sub	r19,r17,r18
1010a418:	04ffe20e 	bge	zero,r19,1010a3a4 <___vfiprintf_internal_r+0xd24>
1010a41c:	01c00404 	movi	r7,16
1010a420:	3cffcc0e 	bge	r7,r19,1010a354 <___vfiprintf_internal_r+0xcd4>
1010a424:	02840474 	movhi	r10,4113
1010a428:	52841f04 	addi	r10,r10,4220
1010a42c:	d9001b17 	ldw	r4,108(sp)
1010a430:	da802415 	stw	r10,144(sp)
1010a434:	382b883a 	mov	r21,r7
1010a438:	050001c4 	movi	r20,7
1010a43c:	df002017 	ldw	fp,128(sp)
1010a440:	00000506 	br	1010a458 <___vfiprintf_internal_r+0xdd8>
1010a444:	21400084 	addi	r5,r4,2
1010a448:	42000204 	addi	r8,r8,8
1010a44c:	1809883a 	mov	r4,r3
1010a450:	9cfffc04 	addi	r19,r19,-16
1010a454:	acffc40e 	bge	r21,r19,1010a368 <___vfiprintf_internal_r+0xce8>
1010a458:	10800404 	addi	r2,r2,16
1010a45c:	20c00044 	addi	r3,r4,1
1010a460:	45800015 	stw	r22,0(r8)
1010a464:	45400115 	stw	r21,4(r8)
1010a468:	d8801c15 	stw	r2,112(sp)
1010a46c:	d8c01b15 	stw	r3,108(sp)
1010a470:	a0fff40e 	bge	r20,r3,1010a444 <___vfiprintf_internal_r+0xdc4>
1010a474:	1000041e 	bne	r2,zero,1010a488 <___vfiprintf_internal_r+0xe08>
1010a478:	01400044 	movi	r5,1
1010a47c:	0009883a 	mov	r4,zero
1010a480:	d811883a 	mov	r8,sp
1010a484:	003ff206 	br	1010a450 <___vfiprintf_internal_r+0xdd0>
1010a488:	d9402117 	ldw	r5,132(sp)
1010a48c:	d9801a04 	addi	r6,sp,104
1010a490:	e009883a 	mov	r4,fp
1010a494:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a498:	103fcd1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a49c:	d9001b17 	ldw	r4,108(sp)
1010a4a0:	d8801c17 	ldw	r2,112(sp)
1010a4a4:	d811883a 	mov	r8,sp
1010a4a8:	21400044 	addi	r5,r4,1
1010a4ac:	003fe806 	br	1010a450 <___vfiprintf_internal_r+0xdd0>
1010a4b0:	d9402117 	ldw	r5,132(sp)
1010a4b4:	d9002017 	ldw	r4,128(sp)
1010a4b8:	d9801a04 	addi	r6,sp,104
1010a4bc:	d9c02b15 	stw	r7,172(sp)
1010a4c0:	db402a15 	stw	r13,168(sp)
1010a4c4:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a4c8:	d9c02b17 	ldw	r7,172(sp)
1010a4cc:	db402a17 	ldw	r13,168(sp)
1010a4d0:	103fbf1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a4d4:	d9401b17 	ldw	r5,108(sp)
1010a4d8:	d8801c17 	ldw	r2,112(sp)
1010a4dc:	d811883a 	mov	r8,sp
1010a4e0:	29800044 	addi	r6,r5,1
1010a4e4:	003dc406 	br	10109bf8 <___vfiprintf_internal_r+0x578>
1010a4e8:	1000d21e 	bne	r2,zero,1010a834 <___vfiprintf_internal_r+0x11b4>
1010a4ec:	d8c01d87 	ldb	r3,118(sp)
1010a4f0:	18009526 	beq	r3,zero,1010a748 <___vfiprintf_internal_r+0x10c8>
1010a4f4:	00800044 	movi	r2,1
1010a4f8:	d8c01d84 	addi	r3,sp,118
1010a4fc:	1009883a 	mov	r4,r2
1010a500:	d8c00015 	stw	r3,0(sp)
1010a504:	d8800115 	stw	r2,4(sp)
1010a508:	d811883a 	mov	r8,sp
1010a50c:	200b883a 	mov	r5,r4
1010a510:	42000204 	addi	r8,r8,8
1010a514:	21000044 	addi	r4,r4,1
1010a518:	003d9706 	br	10109b78 <___vfiprintf_internal_r+0x4f8>
1010a51c:	d9001d04 	addi	r4,sp,116
1010a520:	00800084 	movi	r2,2
1010a524:	d9000015 	stw	r4,0(sp)
1010a528:	d8800115 	stw	r2,4(sp)
1010a52c:	1809883a 	mov	r4,r3
1010a530:	d811883a 	mov	r8,sp
1010a534:	200b883a 	mov	r5,r4
1010a538:	42000204 	addi	r8,r8,8
1010a53c:	21000044 	addi	r4,r4,1
1010a540:	003f4e06 	br	1010a27c <___vfiprintf_internal_r+0xbfc>
1010a544:	d8001d85 	stb	zero,118(sp)
1010a548:	48005016 	blt	r9,zero,1010a68c <___vfiprintf_internal_r+0x100c>
1010a54c:	00ffdfc4 	movi	r3,-129
1010a550:	94c4b03a 	or	r2,r18,r19
1010a554:	a0e8703a 	and	r20,r20,r3
1010a558:	103d4426 	beq	r2,zero,10109a6c <___vfiprintf_internal_r+0x3ec>
1010a55c:	0039883a 	mov	fp,zero
1010a560:	d9002617 	ldw	r4,152(sp)
1010a564:	dd401a04 	addi	r21,sp,104
1010a568:	908003cc 	andi	r2,r18,15
1010a56c:	9806973a 	slli	r3,r19,28
1010a570:	2085883a 	add	r2,r4,r2
1010a574:	9024d13a 	srli	r18,r18,4
1010a578:	10800003 	ldbu	r2,0(r2)
1010a57c:	9826d13a 	srli	r19,r19,4
1010a580:	ad7fffc4 	addi	r21,r21,-1
1010a584:	1ca4b03a 	or	r18,r3,r18
1010a588:	a8800005 	stb	r2,0(r21)
1010a58c:	94c4b03a 	or	r2,r18,r19
1010a590:	103ff51e 	bne	r2,zero,1010a568 <___vfiprintf_internal_r+0xee8>
1010a594:	003e5906 	br	10109efc <___vfiprintf_internal_r+0x87c>
1010a598:	d9402117 	ldw	r5,132(sp)
1010a59c:	d9002017 	ldw	r4,128(sp)
1010a5a0:	d9801a04 	addi	r6,sp,104
1010a5a4:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a5a8:	103f891e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a5ac:	d8801c17 	ldw	r2,112(sp)
1010a5b0:	d811883a 	mov	r8,sp
1010a5b4:	003f9506 	br	1010a40c <___vfiprintf_internal_r+0xd8c>
1010a5b8:	d9402117 	ldw	r5,132(sp)
1010a5bc:	d9002017 	ldw	r4,128(sp)
1010a5c0:	d9801a04 	addi	r6,sp,104
1010a5c4:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a5c8:	103f811e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a5cc:	d811883a 	mov	r8,sp
1010a5d0:	003ced06 	br	10109988 <___vfiprintf_internal_r+0x308>
1010a5d4:	d9402117 	ldw	r5,132(sp)
1010a5d8:	d9002017 	ldw	r4,128(sp)
1010a5dc:	d9801a04 	addi	r6,sp,104
1010a5e0:	da402c15 	stw	r9,176(sp)
1010a5e4:	db802a15 	stw	r14,168(sp)
1010a5e8:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a5ec:	da402c17 	ldw	r9,176(sp)
1010a5f0:	db802a17 	ldw	r14,168(sp)
1010a5f4:	103f761e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a5f8:	d9401b17 	ldw	r5,108(sp)
1010a5fc:	d8801c17 	ldw	r2,112(sp)
1010a600:	d811883a 	mov	r8,sp
1010a604:	29000044 	addi	r4,r5,1
1010a608:	003d5b06 	br	10109b78 <___vfiprintf_internal_r+0x4f8>
1010a60c:	d9402117 	ldw	r5,132(sp)
1010a610:	d9002017 	ldw	r4,128(sp)
1010a614:	d9801a04 	addi	r6,sp,104
1010a618:	da402c15 	stw	r9,176(sp)
1010a61c:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a620:	da402c17 	ldw	r9,176(sp)
1010a624:	103f6a1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a628:	d9401b17 	ldw	r5,108(sp)
1010a62c:	d8801c17 	ldw	r2,112(sp)
1010a630:	d811883a 	mov	r8,sp
1010a634:	29000044 	addi	r4,r5,1
1010a638:	003f1006 	br	1010a27c <___vfiprintf_internal_r+0xbfc>
1010a63c:	1000c31e 	bne	r2,zero,1010a94c <___vfiprintf_internal_r+0x12cc>
1010a640:	01000044 	movi	r4,1
1010a644:	000b883a 	mov	r5,zero
1010a648:	d811883a 	mov	r8,sp
1010a64c:	003f0d06 	br	1010a284 <___vfiprintf_internal_r+0xc04>
1010a650:	d9402117 	ldw	r5,132(sp)
1010a654:	d9002017 	ldw	r4,128(sp)
1010a658:	d9801a04 	addi	r6,sp,104
1010a65c:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a660:	103f5b1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a664:	d9001b17 	ldw	r4,108(sp)
1010a668:	d8801c17 	ldw	r2,112(sp)
1010a66c:	d811883a 	mov	r8,sp
1010a670:	21000044 	addi	r4,r4,1
1010a674:	003d8006 	br	10109c78 <___vfiprintf_internal_r+0x5f8>
1010a678:	01040474 	movhi	r4,4113
1010a67c:	2103ba04 	addi	r4,r4,3816
1010a680:	d9002615 	stw	r4,152(sp)
1010a684:	d8c02215 	stw	r3,136(sp)
1010a688:	1029883a 	mov	r20,r2
1010a68c:	94c4b03a 	or	r2,r18,r19
1010a690:	103fb21e 	bne	r2,zero,1010a55c <___vfiprintf_internal_r+0xedc>
1010a694:	0039883a 	mov	fp,zero
1010a698:	00800084 	movi	r2,2
1010a69c:	003e6b06 	br	1010a04c <___vfiprintf_internal_r+0x9cc>
1010a6a0:	da802217 	ldw	r10,136(sp)
1010a6a4:	d8001d85 	stb	zero,118(sp)
1010a6a8:	0027883a 	mov	r19,zero
1010a6ac:	50800104 	addi	r2,r10,4
1010a6b0:	54800017 	ldw	r18,0(r10)
1010a6b4:	483e6016 	blt	r9,zero,1010a038 <___vfiprintf_internal_r+0x9b8>
1010a6b8:	00ffdfc4 	movi	r3,-129
1010a6bc:	d8802215 	stw	r2,136(sp)
1010a6c0:	a0e8703a 	and	r20,r20,r3
1010a6c4:	0039883a 	mov	fp,zero
1010a6c8:	903ebb26 	beq	r18,zero,1010a1b8 <___vfiprintf_internal_r+0xb38>
1010a6cc:	00800244 	movi	r2,9
1010a6d0:	14bdee36 	bltu	r2,r18,10109e8c <___vfiprintf_internal_r+0x80c>
1010a6d4:	003eba06 	br	1010a1c0 <___vfiprintf_internal_r+0xb40>
1010a6d8:	00800c04 	movi	r2,48
1010a6dc:	d8c01d45 	stb	r3,117(sp)
1010a6e0:	d8801d05 	stb	r2,116(sp)
1010a6e4:	d8001d85 	stb	zero,118(sp)
1010a6e8:	a0c00094 	ori	r3,r20,2
1010a6ec:	4800a916 	blt	r9,zero,1010a994 <___vfiprintf_internal_r+0x1314>
1010a6f0:	00bfdfc4 	movi	r2,-129
1010a6f4:	a096703a 	and	r11,r20,r2
1010a6f8:	5d000094 	ori	r20,r11,2
1010a6fc:	0039883a 	mov	fp,zero
1010a700:	003f9706 	br	1010a560 <___vfiprintf_internal_r+0xee0>
1010a704:	8025883a 	mov	r18,r16
1010a708:	003c2e06 	br	101097c4 <___vfiprintf_internal_r+0x144>
1010a70c:	00840474 	movhi	r2,4113
1010a710:	1083ba04 	addi	r2,r2,3816
1010a714:	0039883a 	mov	fp,zero
1010a718:	d8802615 	stw	r2,152(sp)
1010a71c:	003f9006 	br	1010a560 <___vfiprintf_internal_r+0xee0>
1010a720:	04a5c83a 	sub	r18,zero,r18
1010a724:	07000b44 	movi	fp,45
1010a728:	9004c03a 	cmpne	r2,r18,zero
1010a72c:	04e7c83a 	sub	r19,zero,r19
1010a730:	df001d85 	stb	fp,118(sp)
1010a734:	98a7c83a 	sub	r19,r19,r2
1010a738:	48009f16 	blt	r9,zero,1010a9b8 <___vfiprintf_internal_r+0x1338>
1010a73c:	00bfdfc4 	movi	r2,-129
1010a740:	a0a8703a 	and	r20,r20,r2
1010a744:	003dd006 	br	10109e88 <___vfiprintf_internal_r+0x808>
1010a748:	70004c26 	beq	r14,zero,1010a87c <___vfiprintf_internal_r+0x11fc>
1010a74c:	00800084 	movi	r2,2
1010a750:	d8c01d04 	addi	r3,sp,116
1010a754:	d8c00015 	stw	r3,0(sp)
1010a758:	d8800115 	stw	r2,4(sp)
1010a75c:	01000044 	movi	r4,1
1010a760:	d811883a 	mov	r8,sp
1010a764:	003f7306 	br	1010a534 <___vfiprintf_internal_r+0xeb4>
1010a768:	a080100c 	andi	r2,r20,64
1010a76c:	da802217 	ldw	r10,136(sp)
1010a770:	103e0626 	beq	r2,zero,10109f8c <___vfiprintf_internal_r+0x90c>
1010a774:	5480000f 	ldh	r18,0(r10)
1010a778:	52800104 	addi	r10,r10,4
1010a77c:	da802215 	stw	r10,136(sp)
1010a780:	9027d7fa 	srai	r19,r18,31
1010a784:	9805883a 	mov	r2,r19
1010a788:	003db806 	br	10109e6c <___vfiprintf_internal_r+0x7ec>
1010a78c:	a080040c 	andi	r2,r20,16
1010a790:	1000091e 	bne	r2,zero,1010a7b8 <___vfiprintf_internal_r+0x1138>
1010a794:	a2c0100c 	andi	r11,r20,64
1010a798:	58000726 	beq	r11,zero,1010a7b8 <___vfiprintf_internal_r+0x1138>
1010a79c:	da802217 	ldw	r10,136(sp)
1010a7a0:	50800017 	ldw	r2,0(r10)
1010a7a4:	52800104 	addi	r10,r10,4
1010a7a8:	da802215 	stw	r10,136(sp)
1010a7ac:	da802317 	ldw	r10,140(sp)
1010a7b0:	1280000d 	sth	r10,0(r2)
1010a7b4:	003be706 	br	10109754 <___vfiprintf_internal_r+0xd4>
1010a7b8:	da802217 	ldw	r10,136(sp)
1010a7bc:	50800017 	ldw	r2,0(r10)
1010a7c0:	52800104 	addi	r10,r10,4
1010a7c4:	da802215 	stw	r10,136(sp)
1010a7c8:	da802317 	ldw	r10,140(sp)
1010a7cc:	12800015 	stw	r10,0(r2)
1010a7d0:	003be006 	br	10109754 <___vfiprintf_internal_r+0xd4>
1010a7d4:	a080100c 	andi	r2,r20,64
1010a7d8:	da802217 	ldw	r10,136(sp)
1010a7dc:	10003026 	beq	r2,zero,1010a8a0 <___vfiprintf_internal_r+0x1220>
1010a7e0:	5480000b 	ldhu	r18,0(r10)
1010a7e4:	52800104 	addi	r10,r10,4
1010a7e8:	0027883a 	mov	r19,zero
1010a7ec:	da802215 	stw	r10,136(sp)
1010a7f0:	003d8006 	br	10109df4 <___vfiprintf_internal_r+0x774>
1010a7f4:	80c00007 	ldb	r3,0(r16)
1010a7f8:	003c0006 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010a7fc:	a080100c 	andi	r2,r20,64
1010a800:	d8001d85 	stb	zero,118(sp)
1010a804:	da802217 	ldw	r10,136(sp)
1010a808:	1000201e 	bne	r2,zero,1010a88c <___vfiprintf_internal_r+0x120c>
1010a80c:	50800104 	addi	r2,r10,4
1010a810:	54800017 	ldw	r18,0(r10)
1010a814:	0027883a 	mov	r19,zero
1010a818:	483def0e 	bge	r9,zero,10109fd8 <___vfiprintf_internal_r+0x958>
1010a81c:	94c6b03a 	or	r3,r18,r19
1010a820:	d8802215 	stw	r2,136(sp)
1010a824:	183d4e1e 	bne	r3,zero,10109d60 <___vfiprintf_internal_r+0x6e0>
1010a828:	0039883a 	mov	fp,zero
1010a82c:	0005883a 	mov	r2,zero
1010a830:	003e0606 	br	1010a04c <___vfiprintf_internal_r+0x9cc>
1010a834:	d9402117 	ldw	r5,132(sp)
1010a838:	d9002017 	ldw	r4,128(sp)
1010a83c:	d9801a04 	addi	r6,sp,104
1010a840:	da402c15 	stw	r9,176(sp)
1010a844:	db802a15 	stw	r14,168(sp)
1010a848:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a84c:	da402c17 	ldw	r9,176(sp)
1010a850:	db802a17 	ldw	r14,168(sp)
1010a854:	103ede1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a858:	d9401b17 	ldw	r5,108(sp)
1010a85c:	d8801c17 	ldw	r2,112(sp)
1010a860:	d811883a 	mov	r8,sp
1010a864:	29000044 	addi	r4,r5,1
1010a868:	003e7406 	br	1010a23c <___vfiprintf_internal_r+0xbbc>
1010a86c:	00bfffc4 	movi	r2,-1
1010a870:	003c5806 	br	101099d4 <___vfiprintf_internal_r+0x354>
1010a874:	d811883a 	mov	r8,sp
1010a878:	003ee806 	br	1010a41c <___vfiprintf_internal_r+0xd9c>
1010a87c:	000b883a 	mov	r5,zero
1010a880:	01000044 	movi	r4,1
1010a884:	d811883a 	mov	r8,sp
1010a888:	003e7c06 	br	1010a27c <___vfiprintf_internal_r+0xbfc>
1010a88c:	50800104 	addi	r2,r10,4
1010a890:	5480000b 	ldhu	r18,0(r10)
1010a894:	0027883a 	mov	r19,zero
1010a898:	483dcf0e 	bge	r9,zero,10109fd8 <___vfiprintf_internal_r+0x958>
1010a89c:	003fdf06 	br	1010a81c <___vfiprintf_internal_r+0x119c>
1010a8a0:	54800017 	ldw	r18,0(r10)
1010a8a4:	52800104 	addi	r10,r10,4
1010a8a8:	0027883a 	mov	r19,zero
1010a8ac:	da802215 	stw	r10,136(sp)
1010a8b0:	003d5006 	br	10109df4 <___vfiprintf_internal_r+0x774>
1010a8b4:	50800104 	addi	r2,r10,4
1010a8b8:	5480000b 	ldhu	r18,0(r10)
1010a8bc:	0027883a 	mov	r19,zero
1010a8c0:	483f7d0e 	bge	r9,zero,1010a6b8 <___vfiprintf_internal_r+0x1038>
1010a8c4:	003ddc06 	br	1010a038 <___vfiprintf_internal_r+0x9b8>
1010a8c8:	d8c02215 	stw	r3,136(sp)
1010a8cc:	0039883a 	mov	fp,zero
1010a8d0:	003ddb06 	br	1010a040 <___vfiprintf_internal_r+0x9c0>
1010a8d4:	02840474 	movhi	r10,4113
1010a8d8:	52841b04 	addi	r10,r10,4204
1010a8dc:	da802415 	stw	r10,144(sp)
1010a8e0:	003e8306 	br	1010a2f0 <___vfiprintf_internal_r+0xc70>
1010a8e4:	d8801c17 	ldw	r2,112(sp)
1010a8e8:	dd002117 	ldw	r20,132(sp)
1010a8ec:	103eb926 	beq	r2,zero,1010a3d4 <___vfiprintf_internal_r+0xd54>
1010a8f0:	d9002017 	ldw	r4,128(sp)
1010a8f4:	d9801a04 	addi	r6,sp,104
1010a8f8:	a00b883a 	mov	r5,r20
1010a8fc:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a900:	003eb406 	br	1010a3d4 <___vfiprintf_internal_r+0xd54>
1010a904:	80c00043 	ldbu	r3,1(r16)
1010a908:	a5000814 	ori	r20,r20,32
1010a90c:	84000044 	addi	r16,r16,1
1010a910:	18c03fcc 	andi	r3,r3,255
1010a914:	18c0201c 	xori	r3,r3,128
1010a918:	18ffe004 	addi	r3,r3,-128
1010a91c:	003bb706 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010a920:	a809883a 	mov	r4,r21
1010a924:	d8c02a15 	stw	r3,168(sp)
1010a928:	da002b15 	stw	r8,172(sp)
1010a92c:	0101e6c0 	call	10101e6c <strlen>
1010a930:	d8c02a17 	ldw	r3,168(sp)
1010a934:	1027883a 	mov	r19,r2
1010a938:	df001d83 	ldbu	fp,118(sp)
1010a93c:	d8c02215 	stw	r3,136(sp)
1010a940:	0013883a 	mov	r9,zero
1010a944:	da002b17 	ldw	r8,172(sp)
1010a948:	003c4d06 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010a94c:	d9402117 	ldw	r5,132(sp)
1010a950:	d9002017 	ldw	r4,128(sp)
1010a954:	d9801a04 	addi	r6,sp,104
1010a958:	da402c15 	stw	r9,176(sp)
1010a95c:	010956c0 	call	1010956c <__sprint_r.part.0>
1010a960:	da402c17 	ldw	r9,176(sp)
1010a964:	103e9a1e 	bne	r2,zero,1010a3d0 <___vfiprintf_internal_r+0xd50>
1010a968:	d9401b17 	ldw	r5,108(sp)
1010a96c:	d8801c17 	ldw	r2,112(sp)
1010a970:	d811883a 	mov	r8,sp
1010a974:	29000044 	addi	r4,r5,1
1010a978:	003e4206 	br	1010a284 <___vfiprintf_internal_r+0xc04>
1010a97c:	d9401b17 	ldw	r5,108(sp)
1010a980:	01040474 	movhi	r4,4113
1010a984:	21041f04 	addi	r4,r4,4220
1010a988:	d9002415 	stw	r4,144(sp)
1010a98c:	29400044 	addi	r5,r5,1
1010a990:	003c6d06 	br	10109b48 <___vfiprintf_internal_r+0x4c8>
1010a994:	0039883a 	mov	fp,zero
1010a998:	00800084 	movi	r2,2
1010a99c:	10803fcc 	andi	r2,r2,255
1010a9a0:	01000044 	movi	r4,1
1010a9a4:	11001e26 	beq	r2,r4,1010aa20 <___vfiprintf_internal_r+0x13a0>
1010a9a8:	01000084 	movi	r4,2
1010a9ac:	11001e1e 	bne	r2,r4,1010aa28 <___vfiprintf_internal_r+0x13a8>
1010a9b0:	1829883a 	mov	r20,r3
1010a9b4:	003eea06 	br	1010a560 <___vfiprintf_internal_r+0xee0>
1010a9b8:	a007883a 	mov	r3,r20
1010a9bc:	00800044 	movi	r2,1
1010a9c0:	003ff606 	br	1010a99c <___vfiprintf_internal_r+0x131c>
1010a9c4:	00800184 	movi	r2,6
1010a9c8:	1240012e 	bgeu	r2,r9,1010a9d0 <___vfiprintf_internal_r+0x1350>
1010a9cc:	1013883a 	mov	r9,r2
1010a9d0:	4827883a 	mov	r19,r9
1010a9d4:	4825883a 	mov	r18,r9
1010a9d8:	48001516 	blt	r9,zero,1010aa30 <___vfiprintf_internal_r+0x13b0>
1010a9dc:	05440474 	movhi	r21,4113
1010a9e0:	d8c02215 	stw	r3,136(sp)
1010a9e4:	ad43bf04 	addi	r21,r21,3836
1010a9e8:	003d1406 	br	10109e3c <___vfiprintf_internal_r+0x7bc>
1010a9ec:	02840474 	movhi	r10,4113
1010a9f0:	52841b04 	addi	r10,r10,4204
1010a9f4:	da802415 	stw	r10,144(sp)
1010a9f8:	200d883a 	mov	r6,r4
1010a9fc:	003c9106 	br	10109c44 <___vfiprintf_internal_r+0x5c4>
1010aa00:	5021883a 	mov	r16,r10
1010aa04:	0013883a 	mov	r9,zero
1010aa08:	003b7d06 	br	10109800 <___vfiprintf_internal_r+0x180>
1010aa0c:	4827883a 	mov	r19,r9
1010aa10:	df001d83 	ldbu	fp,118(sp)
1010aa14:	d8c02215 	stw	r3,136(sp)
1010aa18:	0013883a 	mov	r9,zero
1010aa1c:	003c1806 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010aa20:	1829883a 	mov	r20,r3
1010aa24:	003d1806 	br	10109e88 <___vfiprintf_internal_r+0x808>
1010aa28:	1829883a 	mov	r20,r3
1010aa2c:	003ccd06 	br	10109d64 <___vfiprintf_internal_r+0x6e4>
1010aa30:	0025883a 	mov	r18,zero
1010aa34:	003fe906 	br	1010a9dc <___vfiprintf_internal_r+0x135c>
1010aa38:	d8802217 	ldw	r2,136(sp)
1010aa3c:	80c00043 	ldbu	r3,1(r16)
1010aa40:	5021883a 	mov	r16,r10
1010aa44:	12400017 	ldw	r9,0(r2)
1010aa48:	10800104 	addi	r2,r2,4
1010aa4c:	d8802215 	stw	r2,136(sp)
1010aa50:	483faf0e 	bge	r9,zero,1010a910 <___vfiprintf_internal_r+0x1290>
1010aa54:	18c03fcc 	andi	r3,r3,255
1010aa58:	18c0201c 	xori	r3,r3,128
1010aa5c:	027fffc4 	movi	r9,-1
1010aa60:	18ffe004 	addi	r3,r3,-128
1010aa64:	003b6506 	br	101097fc <___vfiprintf_internal_r+0x17c>
1010aa68:	d9c01d85 	stb	r7,118(sp)
1010aa6c:	003ca006 	br	10109cf0 <___vfiprintf_internal_r+0x670>
1010aa70:	d9c01d85 	stb	r7,118(sp)
1010aa74:	003cad06 	br	10109d2c <___vfiprintf_internal_r+0x6ac>
1010aa78:	d9c01d85 	stb	r7,118(sp)
1010aa7c:	003d7d06 	br	1010a074 <___vfiprintf_internal_r+0x9f4>
1010aa80:	d9c01d85 	stb	r7,118(sp)
1010aa84:	003d5f06 	br	1010a004 <___vfiprintf_internal_r+0x984>
1010aa88:	a080004c 	andi	r2,r20,1
1010aa8c:	0039883a 	mov	fp,zero
1010aa90:	10000526 	beq	r2,zero,1010aaa8 <___vfiprintf_internal_r+0x1428>
1010aa94:	00800c04 	movi	r2,48
1010aa98:	d88019c5 	stb	r2,103(sp)
1010aa9c:	dcc02717 	ldw	r19,156(sp)
1010aaa0:	dd4019c4 	addi	r21,sp,103
1010aaa4:	003bf606 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010aaa8:	0027883a 	mov	r19,zero
1010aaac:	dd401a04 	addi	r21,sp,104
1010aab0:	003bf306 	br	10109a80 <___vfiprintf_internal_r+0x400>
1010aab4:	d9c01d85 	stb	r7,118(sp)
1010aab8:	003dc806 	br	1010a1dc <___vfiprintf_internal_r+0xb5c>
1010aabc:	d9c01d85 	stb	r7,118(sp)
1010aac0:	003d3a06 	br	10109fac <___vfiprintf_internal_r+0x92c>
1010aac4:	d9c01d85 	stb	r7,118(sp)
1010aac8:	003d2a06 	br	10109f74 <___vfiprintf_internal_r+0x8f4>
1010aacc:	d9c01d85 	stb	r7,118(sp)
1010aad0:	003cde06 	br	10109e4c <___vfiprintf_internal_r+0x7cc>
1010aad4:	d9c01d85 	stb	r7,118(sp)
1010aad8:	003cbc06 	br	10109dcc <___vfiprintf_internal_r+0x74c>

1010aadc <__vfiprintf_internal>:
1010aadc:	00840474 	movhi	r2,4113
1010aae0:	108b1c04 	addi	r2,r2,11376
1010aae4:	300f883a 	mov	r7,r6
1010aae8:	280d883a 	mov	r6,r5
1010aaec:	200b883a 	mov	r5,r4
1010aaf0:	11000017 	ldw	r4,0(r2)
1010aaf4:	01096801 	jmpi	10109680 <___vfiprintf_internal_r>

1010aaf8 <__sbprintf>:
1010aaf8:	2880030b 	ldhu	r2,12(r5)
1010aafc:	2ac01917 	ldw	r11,100(r5)
1010ab00:	2a80038b 	ldhu	r10,14(r5)
1010ab04:	2a400717 	ldw	r9,28(r5)
1010ab08:	2a000917 	ldw	r8,36(r5)
1010ab0c:	defee204 	addi	sp,sp,-1144
1010ab10:	00c10004 	movi	r3,1024
1010ab14:	dc011a15 	stw	r16,1128(sp)
1010ab18:	10bfff4c 	andi	r2,r2,65533
1010ab1c:	2821883a 	mov	r16,r5
1010ab20:	d8cb883a 	add	r5,sp,r3
1010ab24:	dc811c15 	stw	r18,1136(sp)
1010ab28:	dc411b15 	stw	r17,1132(sp)
1010ab2c:	dfc11d15 	stw	ra,1140(sp)
1010ab30:	2025883a 	mov	r18,r4
1010ab34:	d881030d 	sth	r2,1036(sp)
1010ab38:	dac11915 	stw	r11,1124(sp)
1010ab3c:	da81038d 	sth	r10,1038(sp)
1010ab40:	da410715 	stw	r9,1052(sp)
1010ab44:	da010915 	stw	r8,1060(sp)
1010ab48:	dec10015 	stw	sp,1024(sp)
1010ab4c:	dec10415 	stw	sp,1040(sp)
1010ab50:	d8c10215 	stw	r3,1032(sp)
1010ab54:	d8c10515 	stw	r3,1044(sp)
1010ab58:	d8010615 	stw	zero,1048(sp)
1010ab5c:	01096800 	call	10109680 <___vfiprintf_internal_r>
1010ab60:	1023883a 	mov	r17,r2
1010ab64:	10000416 	blt	r2,zero,1010ab78 <__sbprintf+0x80>
1010ab68:	d9410004 	addi	r5,sp,1024
1010ab6c:	9009883a 	mov	r4,r18
1010ab70:	0105dcc0 	call	10105dcc <_fflush_r>
1010ab74:	10000d1e 	bne	r2,zero,1010abac <__sbprintf+0xb4>
1010ab78:	d881030b 	ldhu	r2,1036(sp)
1010ab7c:	1080100c 	andi	r2,r2,64
1010ab80:	10000326 	beq	r2,zero,1010ab90 <__sbprintf+0x98>
1010ab84:	8080030b 	ldhu	r2,12(r16)
1010ab88:	10801014 	ori	r2,r2,64
1010ab8c:	8080030d 	sth	r2,12(r16)
1010ab90:	8805883a 	mov	r2,r17
1010ab94:	dfc11d17 	ldw	ra,1140(sp)
1010ab98:	dc811c17 	ldw	r18,1136(sp)
1010ab9c:	dc411b17 	ldw	r17,1132(sp)
1010aba0:	dc011a17 	ldw	r16,1128(sp)
1010aba4:	dec11e04 	addi	sp,sp,1144
1010aba8:	f800283a 	ret
1010abac:	047fffc4 	movi	r17,-1
1010abb0:	003ff106 	br	1010ab78 <__sbprintf+0x80>

1010abb4 <__swbuf_r>:
1010abb4:	defffb04 	addi	sp,sp,-20
1010abb8:	dcc00315 	stw	r19,12(sp)
1010abbc:	dc800215 	stw	r18,8(sp)
1010abc0:	dc000015 	stw	r16,0(sp)
1010abc4:	dfc00415 	stw	ra,16(sp)
1010abc8:	dc400115 	stw	r17,4(sp)
1010abcc:	2025883a 	mov	r18,r4
1010abd0:	2827883a 	mov	r19,r5
1010abd4:	3021883a 	mov	r16,r6
1010abd8:	20000226 	beq	r4,zero,1010abe4 <__swbuf_r+0x30>
1010abdc:	20800e17 	ldw	r2,56(r4)
1010abe0:	10004226 	beq	r2,zero,1010acec <__swbuf_r+0x138>
1010abe4:	80800617 	ldw	r2,24(r16)
1010abe8:	8100030b 	ldhu	r4,12(r16)
1010abec:	80800215 	stw	r2,8(r16)
1010abf0:	2080020c 	andi	r2,r4,8
1010abf4:	10003626 	beq	r2,zero,1010acd0 <__swbuf_r+0x11c>
1010abf8:	80c00417 	ldw	r3,16(r16)
1010abfc:	18003426 	beq	r3,zero,1010acd0 <__swbuf_r+0x11c>
1010ac00:	2088000c 	andi	r2,r4,8192
1010ac04:	9c403fcc 	andi	r17,r19,255
1010ac08:	10001a26 	beq	r2,zero,1010ac74 <__swbuf_r+0xc0>
1010ac0c:	80800017 	ldw	r2,0(r16)
1010ac10:	81000517 	ldw	r4,20(r16)
1010ac14:	10c7c83a 	sub	r3,r2,r3
1010ac18:	1900200e 	bge	r3,r4,1010ac9c <__swbuf_r+0xe8>
1010ac1c:	18c00044 	addi	r3,r3,1
1010ac20:	81000217 	ldw	r4,8(r16)
1010ac24:	11400044 	addi	r5,r2,1
1010ac28:	81400015 	stw	r5,0(r16)
1010ac2c:	213fffc4 	addi	r4,r4,-1
1010ac30:	81000215 	stw	r4,8(r16)
1010ac34:	14c00005 	stb	r19,0(r2)
1010ac38:	80800517 	ldw	r2,20(r16)
1010ac3c:	10c01e26 	beq	r2,r3,1010acb8 <__swbuf_r+0x104>
1010ac40:	8080030b 	ldhu	r2,12(r16)
1010ac44:	1080004c 	andi	r2,r2,1
1010ac48:	10000226 	beq	r2,zero,1010ac54 <__swbuf_r+0xa0>
1010ac4c:	00800284 	movi	r2,10
1010ac50:	88801926 	beq	r17,r2,1010acb8 <__swbuf_r+0x104>
1010ac54:	8805883a 	mov	r2,r17
1010ac58:	dfc00417 	ldw	ra,16(sp)
1010ac5c:	dcc00317 	ldw	r19,12(sp)
1010ac60:	dc800217 	ldw	r18,8(sp)
1010ac64:	dc400117 	ldw	r17,4(sp)
1010ac68:	dc000017 	ldw	r16,0(sp)
1010ac6c:	dec00504 	addi	sp,sp,20
1010ac70:	f800283a 	ret
1010ac74:	81401917 	ldw	r5,100(r16)
1010ac78:	00b7ffc4 	movi	r2,-8193
1010ac7c:	21080014 	ori	r4,r4,8192
1010ac80:	2884703a 	and	r2,r5,r2
1010ac84:	80801915 	stw	r2,100(r16)
1010ac88:	80800017 	ldw	r2,0(r16)
1010ac8c:	8100030d 	sth	r4,12(r16)
1010ac90:	81000517 	ldw	r4,20(r16)
1010ac94:	10c7c83a 	sub	r3,r2,r3
1010ac98:	193fe016 	blt	r3,r4,1010ac1c <__swbuf_r+0x68>
1010ac9c:	800b883a 	mov	r5,r16
1010aca0:	9009883a 	mov	r4,r18
1010aca4:	0105dcc0 	call	10105dcc <_fflush_r>
1010aca8:	1000071e 	bne	r2,zero,1010acc8 <__swbuf_r+0x114>
1010acac:	80800017 	ldw	r2,0(r16)
1010acb0:	00c00044 	movi	r3,1
1010acb4:	003fda06 	br	1010ac20 <__swbuf_r+0x6c>
1010acb8:	800b883a 	mov	r5,r16
1010acbc:	9009883a 	mov	r4,r18
1010acc0:	0105dcc0 	call	10105dcc <_fflush_r>
1010acc4:	103fe326 	beq	r2,zero,1010ac54 <__swbuf_r+0xa0>
1010acc8:	00bfffc4 	movi	r2,-1
1010accc:	003fe206 	br	1010ac58 <__swbuf_r+0xa4>
1010acd0:	800b883a 	mov	r5,r16
1010acd4:	9009883a 	mov	r4,r18
1010acd8:	01041d40 	call	101041d4 <__swsetup_r>
1010acdc:	103ffa1e 	bne	r2,zero,1010acc8 <__swbuf_r+0x114>
1010ace0:	8100030b 	ldhu	r4,12(r16)
1010ace4:	80c00417 	ldw	r3,16(r16)
1010ace8:	003fc506 	br	1010ac00 <__swbuf_r+0x4c>
1010acec:	01061a80 	call	101061a8 <__sinit>
1010acf0:	003fbc06 	br	1010abe4 <__swbuf_r+0x30>

1010acf4 <__swbuf>:
1010acf4:	00840474 	movhi	r2,4113
1010acf8:	108b1c04 	addi	r2,r2,11376
1010acfc:	280d883a 	mov	r6,r5
1010ad00:	200b883a 	mov	r5,r4
1010ad04:	11000017 	ldw	r4,0(r2)
1010ad08:	010abb41 	jmpi	1010abb4 <__swbuf_r>

1010ad0c <_write_r>:
1010ad0c:	defffd04 	addi	sp,sp,-12
1010ad10:	2805883a 	mov	r2,r5
1010ad14:	dc000015 	stw	r16,0(sp)
1010ad18:	04040474 	movhi	r16,4113
1010ad1c:	dc400115 	stw	r17,4(sp)
1010ad20:	300b883a 	mov	r5,r6
1010ad24:	8411ec04 	addi	r16,r16,18352
1010ad28:	2023883a 	mov	r17,r4
1010ad2c:	380d883a 	mov	r6,r7
1010ad30:	1009883a 	mov	r4,r2
1010ad34:	dfc00215 	stw	ra,8(sp)
1010ad38:	80000015 	stw	zero,0(r16)
1010ad3c:	010ee7c0 	call	1010ee7c <write>
1010ad40:	00ffffc4 	movi	r3,-1
1010ad44:	10c00526 	beq	r2,r3,1010ad5c <_write_r+0x50>
1010ad48:	dfc00217 	ldw	ra,8(sp)
1010ad4c:	dc400117 	ldw	r17,4(sp)
1010ad50:	dc000017 	ldw	r16,0(sp)
1010ad54:	dec00304 	addi	sp,sp,12
1010ad58:	f800283a 	ret
1010ad5c:	80c00017 	ldw	r3,0(r16)
1010ad60:	183ff926 	beq	r3,zero,1010ad48 <_write_r+0x3c>
1010ad64:	88c00015 	stw	r3,0(r17)
1010ad68:	003ff706 	br	1010ad48 <_write_r+0x3c>

1010ad6c <_close_r>:
1010ad6c:	defffd04 	addi	sp,sp,-12
1010ad70:	dc000015 	stw	r16,0(sp)
1010ad74:	04040474 	movhi	r16,4113
1010ad78:	dc400115 	stw	r17,4(sp)
1010ad7c:	8411ec04 	addi	r16,r16,18352
1010ad80:	2023883a 	mov	r17,r4
1010ad84:	2809883a 	mov	r4,r5
1010ad88:	dfc00215 	stw	ra,8(sp)
1010ad8c:	80000015 	stw	zero,0(r16)
1010ad90:	010e63c0 	call	1010e63c <close>
1010ad94:	00ffffc4 	movi	r3,-1
1010ad98:	10c00526 	beq	r2,r3,1010adb0 <_close_r+0x44>
1010ad9c:	dfc00217 	ldw	ra,8(sp)
1010ada0:	dc400117 	ldw	r17,4(sp)
1010ada4:	dc000017 	ldw	r16,0(sp)
1010ada8:	dec00304 	addi	sp,sp,12
1010adac:	f800283a 	ret
1010adb0:	80c00017 	ldw	r3,0(r16)
1010adb4:	183ff926 	beq	r3,zero,1010ad9c <_close_r+0x30>
1010adb8:	88c00015 	stw	r3,0(r17)
1010adbc:	003ff706 	br	1010ad9c <_close_r+0x30>

1010adc0 <_calloc_r>:
1010adc0:	298b383a 	mul	r5,r5,r6
1010adc4:	defffe04 	addi	sp,sp,-8
1010adc8:	dfc00115 	stw	ra,4(sp)
1010adcc:	dc000015 	stw	r16,0(sp)
1010add0:	0106f080 	call	10106f08 <_malloc_r>
1010add4:	10002926 	beq	r2,zero,1010ae7c <_calloc_r+0xbc>
1010add8:	11bfff17 	ldw	r6,-4(r2)
1010addc:	1021883a 	mov	r16,r2
1010ade0:	00bfff04 	movi	r2,-4
1010ade4:	308c703a 	and	r6,r6,r2
1010ade8:	00c00904 	movi	r3,36
1010adec:	308d883a 	add	r6,r6,r2
1010adf0:	19801636 	bltu	r3,r6,1010ae4c <_calloc_r+0x8c>
1010adf4:	008004c4 	movi	r2,19
1010adf8:	11800b2e 	bgeu	r2,r6,1010ae28 <_calloc_r+0x68>
1010adfc:	80000015 	stw	zero,0(r16)
1010ae00:	80000115 	stw	zero,4(r16)
1010ae04:	008006c4 	movi	r2,27
1010ae08:	11801a2e 	bgeu	r2,r6,1010ae74 <_calloc_r+0xb4>
1010ae0c:	80000215 	stw	zero,8(r16)
1010ae10:	80000315 	stw	zero,12(r16)
1010ae14:	30c0151e 	bne	r6,r3,1010ae6c <_calloc_r+0xac>
1010ae18:	80000415 	stw	zero,16(r16)
1010ae1c:	80800604 	addi	r2,r16,24
1010ae20:	80000515 	stw	zero,20(r16)
1010ae24:	00000106 	br	1010ae2c <_calloc_r+0x6c>
1010ae28:	8005883a 	mov	r2,r16
1010ae2c:	10000015 	stw	zero,0(r2)
1010ae30:	10000115 	stw	zero,4(r2)
1010ae34:	10000215 	stw	zero,8(r2)
1010ae38:	8005883a 	mov	r2,r16
1010ae3c:	dfc00117 	ldw	ra,4(sp)
1010ae40:	dc000017 	ldw	r16,0(sp)
1010ae44:	dec00204 	addi	sp,sp,8
1010ae48:	f800283a 	ret
1010ae4c:	000b883a 	mov	r5,zero
1010ae50:	8009883a 	mov	r4,r16
1010ae54:	0107a9c0 	call	10107a9c <memset>
1010ae58:	8005883a 	mov	r2,r16
1010ae5c:	dfc00117 	ldw	ra,4(sp)
1010ae60:	dc000017 	ldw	r16,0(sp)
1010ae64:	dec00204 	addi	sp,sp,8
1010ae68:	f800283a 	ret
1010ae6c:	80800404 	addi	r2,r16,16
1010ae70:	003fee06 	br	1010ae2c <_calloc_r+0x6c>
1010ae74:	80800204 	addi	r2,r16,8
1010ae78:	003fec06 	br	1010ae2c <_calloc_r+0x6c>
1010ae7c:	0005883a 	mov	r2,zero
1010ae80:	003fee06 	br	1010ae3c <_calloc_r+0x7c>

1010ae84 <_fclose_r>:
1010ae84:	28003926 	beq	r5,zero,1010af6c <_fclose_r+0xe8>
1010ae88:	defffc04 	addi	sp,sp,-16
1010ae8c:	dc400115 	stw	r17,4(sp)
1010ae90:	dc000015 	stw	r16,0(sp)
1010ae94:	dfc00315 	stw	ra,12(sp)
1010ae98:	dc800215 	stw	r18,8(sp)
1010ae9c:	2023883a 	mov	r17,r4
1010aea0:	2821883a 	mov	r16,r5
1010aea4:	20000226 	beq	r4,zero,1010aeb0 <_fclose_r+0x2c>
1010aea8:	20800e17 	ldw	r2,56(r4)
1010aeac:	10002726 	beq	r2,zero,1010af4c <_fclose_r+0xc8>
1010aeb0:	8080030f 	ldh	r2,12(r16)
1010aeb4:	1000071e 	bne	r2,zero,1010aed4 <_fclose_r+0x50>
1010aeb8:	0005883a 	mov	r2,zero
1010aebc:	dfc00317 	ldw	ra,12(sp)
1010aec0:	dc800217 	ldw	r18,8(sp)
1010aec4:	dc400117 	ldw	r17,4(sp)
1010aec8:	dc000017 	ldw	r16,0(sp)
1010aecc:	dec00404 	addi	sp,sp,16
1010aed0:	f800283a 	ret
1010aed4:	800b883a 	mov	r5,r16
1010aed8:	8809883a 	mov	r4,r17
1010aedc:	0105bb00 	call	10105bb0 <__sflush_r>
1010aee0:	1025883a 	mov	r18,r2
1010aee4:	80800b17 	ldw	r2,44(r16)
1010aee8:	10000426 	beq	r2,zero,1010aefc <_fclose_r+0x78>
1010aeec:	81400717 	ldw	r5,28(r16)
1010aef0:	8809883a 	mov	r4,r17
1010aef4:	103ee83a 	callr	r2
1010aef8:	10001616 	blt	r2,zero,1010af54 <_fclose_r+0xd0>
1010aefc:	8080030b 	ldhu	r2,12(r16)
1010af00:	1080200c 	andi	r2,r2,128
1010af04:	1000151e 	bne	r2,zero,1010af5c <_fclose_r+0xd8>
1010af08:	81400c17 	ldw	r5,48(r16)
1010af0c:	28000526 	beq	r5,zero,1010af24 <_fclose_r+0xa0>
1010af10:	80801004 	addi	r2,r16,64
1010af14:	28800226 	beq	r5,r2,1010af20 <_fclose_r+0x9c>
1010af18:	8809883a 	mov	r4,r17
1010af1c:	010631c0 	call	1010631c <_free_r>
1010af20:	80000c15 	stw	zero,48(r16)
1010af24:	81401117 	ldw	r5,68(r16)
1010af28:	28000326 	beq	r5,zero,1010af38 <_fclose_r+0xb4>
1010af2c:	8809883a 	mov	r4,r17
1010af30:	010631c0 	call	1010631c <_free_r>
1010af34:	80001115 	stw	zero,68(r16)
1010af38:	01061b80 	call	101061b8 <__sfp_lock_acquire>
1010af3c:	8000030d 	sth	zero,12(r16)
1010af40:	01061bc0 	call	101061bc <__sfp_lock_release>
1010af44:	9005883a 	mov	r2,r18
1010af48:	003fdc06 	br	1010aebc <_fclose_r+0x38>
1010af4c:	01061a80 	call	101061a8 <__sinit>
1010af50:	003fd706 	br	1010aeb0 <_fclose_r+0x2c>
1010af54:	04bfffc4 	movi	r18,-1
1010af58:	003fe806 	br	1010aefc <_fclose_r+0x78>
1010af5c:	81400417 	ldw	r5,16(r16)
1010af60:	8809883a 	mov	r4,r17
1010af64:	010631c0 	call	1010631c <_free_r>
1010af68:	003fe706 	br	1010af08 <_fclose_r+0x84>
1010af6c:	0005883a 	mov	r2,zero
1010af70:	f800283a 	ret

1010af74 <fclose>:
1010af74:	00840474 	movhi	r2,4113
1010af78:	108b1c04 	addi	r2,r2,11376
1010af7c:	200b883a 	mov	r5,r4
1010af80:	11000017 	ldw	r4,0(r2)
1010af84:	010ae841 	jmpi	1010ae84 <_fclose_r>

1010af88 <__fputwc>:
1010af88:	defff804 	addi	sp,sp,-32
1010af8c:	dcc00415 	stw	r19,16(sp)
1010af90:	dc800315 	stw	r18,12(sp)
1010af94:	dc000115 	stw	r16,4(sp)
1010af98:	dfc00715 	stw	ra,28(sp)
1010af9c:	dd400615 	stw	r21,24(sp)
1010afa0:	dd000515 	stw	r20,20(sp)
1010afa4:	dc400215 	stw	r17,8(sp)
1010afa8:	2027883a 	mov	r19,r4
1010afac:	2825883a 	mov	r18,r5
1010afb0:	3021883a 	mov	r16,r6
1010afb4:	0106cf80 	call	10106cf8 <__locale_mb_cur_max>
1010afb8:	00c00044 	movi	r3,1
1010afbc:	10c03e26 	beq	r2,r3,1010b0b8 <__fputwc+0x130>
1010afc0:	81c01704 	addi	r7,r16,92
1010afc4:	900d883a 	mov	r6,r18
1010afc8:	d80b883a 	mov	r5,sp
1010afcc:	9809883a 	mov	r4,r19
1010afd0:	010b3000 	call	1010b300 <_wcrtomb_r>
1010afd4:	1029883a 	mov	r20,r2
1010afd8:	00bfffc4 	movi	r2,-1
1010afdc:	a0802026 	beq	r20,r2,1010b060 <__fputwc+0xd8>
1010afe0:	d9400003 	ldbu	r5,0(sp)
1010afe4:	a0001c26 	beq	r20,zero,1010b058 <__fputwc+0xd0>
1010afe8:	0023883a 	mov	r17,zero
1010afec:	05400284 	movi	r21,10
1010aff0:	00000906 	br	1010b018 <__fputwc+0x90>
1010aff4:	80800017 	ldw	r2,0(r16)
1010aff8:	11400005 	stb	r5,0(r2)
1010affc:	80c00017 	ldw	r3,0(r16)
1010b000:	18c00044 	addi	r3,r3,1
1010b004:	80c00015 	stw	r3,0(r16)
1010b008:	8c400044 	addi	r17,r17,1
1010b00c:	dc45883a 	add	r2,sp,r17
1010b010:	8d00112e 	bgeu	r17,r20,1010b058 <__fputwc+0xd0>
1010b014:	11400003 	ldbu	r5,0(r2)
1010b018:	80c00217 	ldw	r3,8(r16)
1010b01c:	18ffffc4 	addi	r3,r3,-1
1010b020:	80c00215 	stw	r3,8(r16)
1010b024:	183ff30e 	bge	r3,zero,1010aff4 <__fputwc+0x6c>
1010b028:	80800617 	ldw	r2,24(r16)
1010b02c:	18801916 	blt	r3,r2,1010b094 <__fputwc+0x10c>
1010b030:	80800017 	ldw	r2,0(r16)
1010b034:	11400005 	stb	r5,0(r2)
1010b038:	80800017 	ldw	r2,0(r16)
1010b03c:	10c00003 	ldbu	r3,0(r2)
1010b040:	10800044 	addi	r2,r2,1
1010b044:	1d402326 	beq	r3,r21,1010b0d4 <__fputwc+0x14c>
1010b048:	80800015 	stw	r2,0(r16)
1010b04c:	8c400044 	addi	r17,r17,1
1010b050:	dc45883a 	add	r2,sp,r17
1010b054:	8d3fef36 	bltu	r17,r20,1010b014 <__fputwc+0x8c>
1010b058:	9005883a 	mov	r2,r18
1010b05c:	00000406 	br	1010b070 <__fputwc+0xe8>
1010b060:	80c0030b 	ldhu	r3,12(r16)
1010b064:	a005883a 	mov	r2,r20
1010b068:	18c01014 	ori	r3,r3,64
1010b06c:	80c0030d 	sth	r3,12(r16)
1010b070:	dfc00717 	ldw	ra,28(sp)
1010b074:	dd400617 	ldw	r21,24(sp)
1010b078:	dd000517 	ldw	r20,20(sp)
1010b07c:	dcc00417 	ldw	r19,16(sp)
1010b080:	dc800317 	ldw	r18,12(sp)
1010b084:	dc400217 	ldw	r17,8(sp)
1010b088:	dc000117 	ldw	r16,4(sp)
1010b08c:	dec00804 	addi	sp,sp,32
1010b090:	f800283a 	ret
1010b094:	800d883a 	mov	r6,r16
1010b098:	29403fcc 	andi	r5,r5,255
1010b09c:	9809883a 	mov	r4,r19
1010b0a0:	010abb40 	call	1010abb4 <__swbuf_r>
1010b0a4:	10bfffe0 	cmpeqi	r2,r2,-1
1010b0a8:	10803fcc 	andi	r2,r2,255
1010b0ac:	103fd626 	beq	r2,zero,1010b008 <__fputwc+0x80>
1010b0b0:	00bfffc4 	movi	r2,-1
1010b0b4:	003fee06 	br	1010b070 <__fputwc+0xe8>
1010b0b8:	90ffffc4 	addi	r3,r18,-1
1010b0bc:	01003f84 	movi	r4,254
1010b0c0:	20ffbf36 	bltu	r4,r3,1010afc0 <__fputwc+0x38>
1010b0c4:	900b883a 	mov	r5,r18
1010b0c8:	dc800005 	stb	r18,0(sp)
1010b0cc:	1029883a 	mov	r20,r2
1010b0d0:	003fc506 	br	1010afe8 <__fputwc+0x60>
1010b0d4:	800d883a 	mov	r6,r16
1010b0d8:	a80b883a 	mov	r5,r21
1010b0dc:	9809883a 	mov	r4,r19
1010b0e0:	010abb40 	call	1010abb4 <__swbuf_r>
1010b0e4:	10bfffe0 	cmpeqi	r2,r2,-1
1010b0e8:	003fef06 	br	1010b0a8 <__fputwc+0x120>

1010b0ec <_fputwc_r>:
1010b0ec:	3080030b 	ldhu	r2,12(r6)
1010b0f0:	10c8000c 	andi	r3,r2,8192
1010b0f4:	1800051e 	bne	r3,zero,1010b10c <_fputwc_r+0x20>
1010b0f8:	30c01917 	ldw	r3,100(r6)
1010b0fc:	10880014 	ori	r2,r2,8192
1010b100:	3080030d 	sth	r2,12(r6)
1010b104:	18880014 	ori	r2,r3,8192
1010b108:	30801915 	stw	r2,100(r6)
1010b10c:	010af881 	jmpi	1010af88 <__fputwc>

1010b110 <fputwc>:
1010b110:	00840474 	movhi	r2,4113
1010b114:	defffc04 	addi	sp,sp,-16
1010b118:	108b1c04 	addi	r2,r2,11376
1010b11c:	dc000115 	stw	r16,4(sp)
1010b120:	14000017 	ldw	r16,0(r2)
1010b124:	dc400215 	stw	r17,8(sp)
1010b128:	dfc00315 	stw	ra,12(sp)
1010b12c:	2023883a 	mov	r17,r4
1010b130:	80000226 	beq	r16,zero,1010b13c <fputwc+0x2c>
1010b134:	80800e17 	ldw	r2,56(r16)
1010b138:	10001026 	beq	r2,zero,1010b17c <fputwc+0x6c>
1010b13c:	2880030b 	ldhu	r2,12(r5)
1010b140:	10c8000c 	andi	r3,r2,8192
1010b144:	1800051e 	bne	r3,zero,1010b15c <fputwc+0x4c>
1010b148:	28c01917 	ldw	r3,100(r5)
1010b14c:	10880014 	ori	r2,r2,8192
1010b150:	2880030d 	sth	r2,12(r5)
1010b154:	18880014 	ori	r2,r3,8192
1010b158:	28801915 	stw	r2,100(r5)
1010b15c:	280d883a 	mov	r6,r5
1010b160:	8009883a 	mov	r4,r16
1010b164:	880b883a 	mov	r5,r17
1010b168:	dfc00317 	ldw	ra,12(sp)
1010b16c:	dc400217 	ldw	r17,8(sp)
1010b170:	dc000117 	ldw	r16,4(sp)
1010b174:	dec00404 	addi	sp,sp,16
1010b178:	010af881 	jmpi	1010af88 <__fputwc>
1010b17c:	8009883a 	mov	r4,r16
1010b180:	d9400015 	stw	r5,0(sp)
1010b184:	01061a80 	call	101061a8 <__sinit>
1010b188:	d9400017 	ldw	r5,0(sp)
1010b18c:	003feb06 	br	1010b13c <fputwc+0x2c>

1010b190 <_fstat_r>:
1010b190:	defffd04 	addi	sp,sp,-12
1010b194:	2805883a 	mov	r2,r5
1010b198:	dc000015 	stw	r16,0(sp)
1010b19c:	04040474 	movhi	r16,4113
1010b1a0:	dc400115 	stw	r17,4(sp)
1010b1a4:	8411ec04 	addi	r16,r16,18352
1010b1a8:	2023883a 	mov	r17,r4
1010b1ac:	300b883a 	mov	r5,r6
1010b1b0:	1009883a 	mov	r4,r2
1010b1b4:	dfc00215 	stw	ra,8(sp)
1010b1b8:	80000015 	stw	zero,0(r16)
1010b1bc:	010e7740 	call	1010e774 <fstat>
1010b1c0:	00ffffc4 	movi	r3,-1
1010b1c4:	10c00526 	beq	r2,r3,1010b1dc <_fstat_r+0x4c>
1010b1c8:	dfc00217 	ldw	ra,8(sp)
1010b1cc:	dc400117 	ldw	r17,4(sp)
1010b1d0:	dc000017 	ldw	r16,0(sp)
1010b1d4:	dec00304 	addi	sp,sp,12
1010b1d8:	f800283a 	ret
1010b1dc:	80c00017 	ldw	r3,0(r16)
1010b1e0:	183ff926 	beq	r3,zero,1010b1c8 <_fstat_r+0x38>
1010b1e4:	88c00015 	stw	r3,0(r17)
1010b1e8:	003ff706 	br	1010b1c8 <_fstat_r+0x38>

1010b1ec <_isatty_r>:
1010b1ec:	defffd04 	addi	sp,sp,-12
1010b1f0:	dc000015 	stw	r16,0(sp)
1010b1f4:	04040474 	movhi	r16,4113
1010b1f8:	dc400115 	stw	r17,4(sp)
1010b1fc:	8411ec04 	addi	r16,r16,18352
1010b200:	2023883a 	mov	r17,r4
1010b204:	2809883a 	mov	r4,r5
1010b208:	dfc00215 	stw	ra,8(sp)
1010b20c:	80000015 	stw	zero,0(r16)
1010b210:	010e8600 	call	1010e860 <isatty>
1010b214:	00ffffc4 	movi	r3,-1
1010b218:	10c00526 	beq	r2,r3,1010b230 <_isatty_r+0x44>
1010b21c:	dfc00217 	ldw	ra,8(sp)
1010b220:	dc400117 	ldw	r17,4(sp)
1010b224:	dc000017 	ldw	r16,0(sp)
1010b228:	dec00304 	addi	sp,sp,12
1010b22c:	f800283a 	ret
1010b230:	80c00017 	ldw	r3,0(r16)
1010b234:	183ff926 	beq	r3,zero,1010b21c <_isatty_r+0x30>
1010b238:	88c00015 	stw	r3,0(r17)
1010b23c:	003ff706 	br	1010b21c <_isatty_r+0x30>

1010b240 <_lseek_r>:
1010b240:	defffd04 	addi	sp,sp,-12
1010b244:	2805883a 	mov	r2,r5
1010b248:	dc000015 	stw	r16,0(sp)
1010b24c:	04040474 	movhi	r16,4113
1010b250:	dc400115 	stw	r17,4(sp)
1010b254:	300b883a 	mov	r5,r6
1010b258:	8411ec04 	addi	r16,r16,18352
1010b25c:	2023883a 	mov	r17,r4
1010b260:	380d883a 	mov	r6,r7
1010b264:	1009883a 	mov	r4,r2
1010b268:	dfc00215 	stw	ra,8(sp)
1010b26c:	80000015 	stw	zero,0(r16)
1010b270:	010ea2c0 	call	1010ea2c <lseek>
1010b274:	00ffffc4 	movi	r3,-1
1010b278:	10c00526 	beq	r2,r3,1010b290 <_lseek_r+0x50>
1010b27c:	dfc00217 	ldw	ra,8(sp)
1010b280:	dc400117 	ldw	r17,4(sp)
1010b284:	dc000017 	ldw	r16,0(sp)
1010b288:	dec00304 	addi	sp,sp,12
1010b28c:	f800283a 	ret
1010b290:	80c00017 	ldw	r3,0(r16)
1010b294:	183ff926 	beq	r3,zero,1010b27c <_lseek_r+0x3c>
1010b298:	88c00015 	stw	r3,0(r17)
1010b29c:	003ff706 	br	1010b27c <_lseek_r+0x3c>

1010b2a0 <_read_r>:
1010b2a0:	defffd04 	addi	sp,sp,-12
1010b2a4:	2805883a 	mov	r2,r5
1010b2a8:	dc000015 	stw	r16,0(sp)
1010b2ac:	04040474 	movhi	r16,4113
1010b2b0:	dc400115 	stw	r17,4(sp)
1010b2b4:	300b883a 	mov	r5,r6
1010b2b8:	8411ec04 	addi	r16,r16,18352
1010b2bc:	2023883a 	mov	r17,r4
1010b2c0:	380d883a 	mov	r6,r7
1010b2c4:	1009883a 	mov	r4,r2
1010b2c8:	dfc00215 	stw	ra,8(sp)
1010b2cc:	80000015 	stw	zero,0(r16)
1010b2d0:	010ec000 	call	1010ec00 <read>
1010b2d4:	00ffffc4 	movi	r3,-1
1010b2d8:	10c00526 	beq	r2,r3,1010b2f0 <_read_r+0x50>
1010b2dc:	dfc00217 	ldw	ra,8(sp)
1010b2e0:	dc400117 	ldw	r17,4(sp)
1010b2e4:	dc000017 	ldw	r16,0(sp)
1010b2e8:	dec00304 	addi	sp,sp,12
1010b2ec:	f800283a 	ret
1010b2f0:	80c00017 	ldw	r3,0(r16)
1010b2f4:	183ff926 	beq	r3,zero,1010b2dc <_read_r+0x3c>
1010b2f8:	88c00015 	stw	r3,0(r17)
1010b2fc:	003ff706 	br	1010b2dc <_read_r+0x3c>

1010b300 <_wcrtomb_r>:
1010b300:	defff604 	addi	sp,sp,-40
1010b304:	00840474 	movhi	r2,4113
1010b308:	dc800815 	stw	r18,32(sp)
1010b30c:	dc400715 	stw	r17,28(sp)
1010b310:	dc000615 	stw	r16,24(sp)
1010b314:	108b2004 	addi	r2,r2,11392
1010b318:	dfc00915 	stw	ra,36(sp)
1010b31c:	2021883a 	mov	r16,r4
1010b320:	3823883a 	mov	r17,r7
1010b324:	14800017 	ldw	r18,0(r2)
1010b328:	28001426 	beq	r5,zero,1010b37c <_wcrtomb_r+0x7c>
1010b32c:	d9400415 	stw	r5,16(sp)
1010b330:	d9800515 	stw	r6,20(sp)
1010b334:	0106cec0 	call	10106cec <__locale_charset>
1010b338:	d9800517 	ldw	r6,20(sp)
1010b33c:	d9400417 	ldw	r5,16(sp)
1010b340:	100f883a 	mov	r7,r2
1010b344:	dc400015 	stw	r17,0(sp)
1010b348:	8009883a 	mov	r4,r16
1010b34c:	903ee83a 	callr	r18
1010b350:	00ffffc4 	movi	r3,-1
1010b354:	10c0031e 	bne	r2,r3,1010b364 <_wcrtomb_r+0x64>
1010b358:	88000015 	stw	zero,0(r17)
1010b35c:	00c02284 	movi	r3,138
1010b360:	80c00015 	stw	r3,0(r16)
1010b364:	dfc00917 	ldw	ra,36(sp)
1010b368:	dc800817 	ldw	r18,32(sp)
1010b36c:	dc400717 	ldw	r17,28(sp)
1010b370:	dc000617 	ldw	r16,24(sp)
1010b374:	dec00a04 	addi	sp,sp,40
1010b378:	f800283a 	ret
1010b37c:	0106cec0 	call	10106cec <__locale_charset>
1010b380:	100f883a 	mov	r7,r2
1010b384:	dc400015 	stw	r17,0(sp)
1010b388:	000d883a 	mov	r6,zero
1010b38c:	d9400104 	addi	r5,sp,4
1010b390:	8009883a 	mov	r4,r16
1010b394:	903ee83a 	callr	r18
1010b398:	003fed06 	br	1010b350 <_wcrtomb_r+0x50>

1010b39c <wcrtomb>:
1010b39c:	defff604 	addi	sp,sp,-40
1010b3a0:	00840474 	movhi	r2,4113
1010b3a4:	dc800615 	stw	r18,24(sp)
1010b3a8:	dc400515 	stw	r17,20(sp)
1010b3ac:	108b1c04 	addi	r2,r2,11376
1010b3b0:	dfc00915 	stw	ra,36(sp)
1010b3b4:	dd000815 	stw	r20,32(sp)
1010b3b8:	dcc00715 	stw	r19,28(sp)
1010b3bc:	dc000415 	stw	r16,16(sp)
1010b3c0:	3025883a 	mov	r18,r6
1010b3c4:	14400017 	ldw	r17,0(r2)
1010b3c8:	20001926 	beq	r4,zero,1010b430 <wcrtomb+0x94>
1010b3cc:	00840474 	movhi	r2,4113
1010b3d0:	108b2004 	addi	r2,r2,11392
1010b3d4:	15000017 	ldw	r20,0(r2)
1010b3d8:	2021883a 	mov	r16,r4
1010b3dc:	2827883a 	mov	r19,r5
1010b3e0:	0106cec0 	call	10106cec <__locale_charset>
1010b3e4:	100f883a 	mov	r7,r2
1010b3e8:	dc800015 	stw	r18,0(sp)
1010b3ec:	980d883a 	mov	r6,r19
1010b3f0:	800b883a 	mov	r5,r16
1010b3f4:	8809883a 	mov	r4,r17
1010b3f8:	a03ee83a 	callr	r20
1010b3fc:	00ffffc4 	movi	r3,-1
1010b400:	10c0031e 	bne	r2,r3,1010b410 <wcrtomb+0x74>
1010b404:	90000015 	stw	zero,0(r18)
1010b408:	00c02284 	movi	r3,138
1010b40c:	88c00015 	stw	r3,0(r17)
1010b410:	dfc00917 	ldw	ra,36(sp)
1010b414:	dd000817 	ldw	r20,32(sp)
1010b418:	dcc00717 	ldw	r19,28(sp)
1010b41c:	dc800617 	ldw	r18,24(sp)
1010b420:	dc400517 	ldw	r17,20(sp)
1010b424:	dc000417 	ldw	r16,16(sp)
1010b428:	dec00a04 	addi	sp,sp,40
1010b42c:	f800283a 	ret
1010b430:	00840474 	movhi	r2,4113
1010b434:	108b2004 	addi	r2,r2,11392
1010b438:	14000017 	ldw	r16,0(r2)
1010b43c:	0106cec0 	call	10106cec <__locale_charset>
1010b440:	100f883a 	mov	r7,r2
1010b444:	dc800015 	stw	r18,0(sp)
1010b448:	000d883a 	mov	r6,zero
1010b44c:	d9400104 	addi	r5,sp,4
1010b450:	8809883a 	mov	r4,r17
1010b454:	803ee83a 	callr	r16
1010b458:	003fe806 	br	1010b3fc <wcrtomb+0x60>

1010b45c <__ascii_wctomb>:
1010b45c:	28000526 	beq	r5,zero,1010b474 <__ascii_wctomb+0x18>
1010b460:	00803fc4 	movi	r2,255
1010b464:	11800536 	bltu	r2,r6,1010b47c <__ascii_wctomb+0x20>
1010b468:	29800005 	stb	r6,0(r5)
1010b46c:	00800044 	movi	r2,1
1010b470:	f800283a 	ret
1010b474:	0005883a 	mov	r2,zero
1010b478:	f800283a 	ret
1010b47c:	00802284 	movi	r2,138
1010b480:	20800015 	stw	r2,0(r4)
1010b484:	00bfffc4 	movi	r2,-1
1010b488:	f800283a 	ret

1010b48c <_wctomb_r>:
1010b48c:	00840474 	movhi	r2,4113
1010b490:	defff904 	addi	sp,sp,-28
1010b494:	108b2004 	addi	r2,r2,11392
1010b498:	dfc00615 	stw	ra,24(sp)
1010b49c:	dc400515 	stw	r17,20(sp)
1010b4a0:	dc000415 	stw	r16,16(sp)
1010b4a4:	3823883a 	mov	r17,r7
1010b4a8:	14000017 	ldw	r16,0(r2)
1010b4ac:	d9000115 	stw	r4,4(sp)
1010b4b0:	d9400215 	stw	r5,8(sp)
1010b4b4:	d9800315 	stw	r6,12(sp)
1010b4b8:	0106cec0 	call	10106cec <__locale_charset>
1010b4bc:	d9800317 	ldw	r6,12(sp)
1010b4c0:	d9400217 	ldw	r5,8(sp)
1010b4c4:	d9000117 	ldw	r4,4(sp)
1010b4c8:	100f883a 	mov	r7,r2
1010b4cc:	dc400015 	stw	r17,0(sp)
1010b4d0:	803ee83a 	callr	r16
1010b4d4:	dfc00617 	ldw	ra,24(sp)
1010b4d8:	dc400517 	ldw	r17,20(sp)
1010b4dc:	dc000417 	ldw	r16,16(sp)
1010b4e0:	dec00704 	addi	sp,sp,28
1010b4e4:	f800283a 	ret

1010b4e8 <__udivdi3>:
1010b4e8:	defff504 	addi	sp,sp,-44
1010b4ec:	dcc00415 	stw	r19,16(sp)
1010b4f0:	dc000115 	stw	r16,4(sp)
1010b4f4:	dfc00a15 	stw	ra,40(sp)
1010b4f8:	df000915 	stw	fp,36(sp)
1010b4fc:	ddc00815 	stw	r23,32(sp)
1010b500:	dd800715 	stw	r22,28(sp)
1010b504:	dd400615 	stw	r21,24(sp)
1010b508:	dd000515 	stw	r20,20(sp)
1010b50c:	dc800315 	stw	r18,12(sp)
1010b510:	dc400215 	stw	r17,8(sp)
1010b514:	2027883a 	mov	r19,r4
1010b518:	2821883a 	mov	r16,r5
1010b51c:	3800411e 	bne	r7,zero,1010b624 <__udivdi3+0x13c>
1010b520:	3023883a 	mov	r17,r6
1010b524:	2025883a 	mov	r18,r4
1010b528:	2980522e 	bgeu	r5,r6,1010b674 <__udivdi3+0x18c>
1010b52c:	00bfffd4 	movui	r2,65535
1010b530:	282d883a 	mov	r22,r5
1010b534:	1180a836 	bltu	r2,r6,1010b7d8 <__udivdi3+0x2f0>
1010b538:	00803fc4 	movi	r2,255
1010b53c:	1185803a 	cmpltu	r2,r2,r6
1010b540:	100490fa 	slli	r2,r2,3
1010b544:	3086d83a 	srl	r3,r6,r2
1010b548:	01040474 	movhi	r4,4113
1010b54c:	21042304 	addi	r4,r4,4236
1010b550:	20c7883a 	add	r3,r4,r3
1010b554:	18c00003 	ldbu	r3,0(r3)
1010b558:	1885883a 	add	r2,r3,r2
1010b55c:	00c00804 	movi	r3,32
1010b560:	1887c83a 	sub	r3,r3,r2
1010b564:	18000526 	beq	r3,zero,1010b57c <__udivdi3+0x94>
1010b568:	80e0983a 	sll	r16,r16,r3
1010b56c:	9884d83a 	srl	r2,r19,r2
1010b570:	30e2983a 	sll	r17,r6,r3
1010b574:	98e4983a 	sll	r18,r19,r3
1010b578:	142cb03a 	or	r22,r2,r16
1010b57c:	882ad43a 	srli	r21,r17,16
1010b580:	b009883a 	mov	r4,r22
1010b584:	8d3fffcc 	andi	r20,r17,65535
1010b588:	a80b883a 	mov	r5,r21
1010b58c:	0101cb40 	call	10101cb4 <__umodsi3>
1010b590:	b009883a 	mov	r4,r22
1010b594:	a80b883a 	mov	r5,r21
1010b598:	1027883a 	mov	r19,r2
1010b59c:	0101c500 	call	10101c50 <__udivsi3>
1010b5a0:	102d883a 	mov	r22,r2
1010b5a4:	9826943a 	slli	r19,r19,16
1010b5a8:	9004d43a 	srli	r2,r18,16
1010b5ac:	a5a1383a 	mul	r16,r20,r22
1010b5b0:	14c4b03a 	or	r2,r2,r19
1010b5b4:	1400052e 	bgeu	r2,r16,1010b5cc <__udivdi3+0xe4>
1010b5b8:	1445883a 	add	r2,r2,r17
1010b5bc:	b0ffffc4 	addi	r3,r22,-1
1010b5c0:	14400136 	bltu	r2,r17,1010b5c8 <__udivdi3+0xe0>
1010b5c4:	14012336 	bltu	r2,r16,1010ba54 <__udivdi3+0x56c>
1010b5c8:	182d883a 	mov	r22,r3
1010b5cc:	1421c83a 	sub	r16,r2,r16
1010b5d0:	a80b883a 	mov	r5,r21
1010b5d4:	8009883a 	mov	r4,r16
1010b5d8:	0101cb40 	call	10101cb4 <__umodsi3>
1010b5dc:	1027883a 	mov	r19,r2
1010b5e0:	a80b883a 	mov	r5,r21
1010b5e4:	8009883a 	mov	r4,r16
1010b5e8:	0101c500 	call	10101c50 <__udivsi3>
1010b5ec:	9826943a 	slli	r19,r19,16
1010b5f0:	a0a9383a 	mul	r20,r20,r2
1010b5f4:	94bfffcc 	andi	r18,r18,65535
1010b5f8:	94e4b03a 	or	r18,r18,r19
1010b5fc:	9500052e 	bgeu	r18,r20,1010b614 <__udivdi3+0x12c>
1010b600:	8ca5883a 	add	r18,r17,r18
1010b604:	10ffffc4 	addi	r3,r2,-1
1010b608:	9440f136 	bltu	r18,r17,1010b9d0 <__udivdi3+0x4e8>
1010b60c:	9500f02e 	bgeu	r18,r20,1010b9d0 <__udivdi3+0x4e8>
1010b610:	10bfff84 	addi	r2,r2,-2
1010b614:	b00c943a 	slli	r6,r22,16
1010b618:	0007883a 	mov	r3,zero
1010b61c:	3084b03a 	or	r2,r6,r2
1010b620:	00005906 	br	1010b788 <__udivdi3+0x2a0>
1010b624:	29c05636 	bltu	r5,r7,1010b780 <__udivdi3+0x298>
1010b628:	00bfffd4 	movui	r2,65535
1010b62c:	11c0622e 	bgeu	r2,r7,1010b7b8 <__udivdi3+0x2d0>
1010b630:	00804034 	movhi	r2,256
1010b634:	10bfffc4 	addi	r2,r2,-1
1010b638:	11c0ee36 	bltu	r2,r7,1010b9f4 <__udivdi3+0x50c>
1010b63c:	00800404 	movi	r2,16
1010b640:	3886d83a 	srl	r3,r7,r2
1010b644:	01040474 	movhi	r4,4113
1010b648:	21042304 	addi	r4,r4,4236
1010b64c:	20c7883a 	add	r3,r4,r3
1010b650:	18c00003 	ldbu	r3,0(r3)
1010b654:	05400804 	movi	r21,32
1010b658:	1885883a 	add	r2,r3,r2
1010b65c:	a8abc83a 	sub	r21,r21,r2
1010b660:	a800621e 	bne	r21,zero,1010b7ec <__udivdi3+0x304>
1010b664:	3c00e936 	bltu	r7,r16,1010ba0c <__udivdi3+0x524>
1010b668:	9985403a 	cmpgeu	r2,r19,r6
1010b66c:	0007883a 	mov	r3,zero
1010b670:	00004506 	br	1010b788 <__udivdi3+0x2a0>
1010b674:	3000041e 	bne	r6,zero,1010b688 <__udivdi3+0x1a0>
1010b678:	000b883a 	mov	r5,zero
1010b67c:	01000044 	movi	r4,1
1010b680:	0101c500 	call	10101c50 <__udivsi3>
1010b684:	1023883a 	mov	r17,r2
1010b688:	00bfffd4 	movui	r2,65535
1010b68c:	14404e2e 	bgeu	r2,r17,1010b7c8 <__udivdi3+0x2e0>
1010b690:	00804034 	movhi	r2,256
1010b694:	10bfffc4 	addi	r2,r2,-1
1010b698:	1440d836 	bltu	r2,r17,1010b9fc <__udivdi3+0x514>
1010b69c:	00800404 	movi	r2,16
1010b6a0:	8886d83a 	srl	r3,r17,r2
1010b6a4:	01040474 	movhi	r4,4113
1010b6a8:	21042304 	addi	r4,r4,4236
1010b6ac:	20c7883a 	add	r3,r4,r3
1010b6b0:	18c00003 	ldbu	r3,0(r3)
1010b6b4:	1885883a 	add	r2,r3,r2
1010b6b8:	00c00804 	movi	r3,32
1010b6bc:	1887c83a 	sub	r3,r3,r2
1010b6c0:	18008f1e 	bne	r3,zero,1010b900 <__udivdi3+0x418>
1010b6c4:	882ad43a 	srli	r21,r17,16
1010b6c8:	8461c83a 	sub	r16,r16,r17
1010b6cc:	8d3fffcc 	andi	r20,r17,65535
1010b6d0:	00c00044 	movi	r3,1
1010b6d4:	8009883a 	mov	r4,r16
1010b6d8:	a80b883a 	mov	r5,r21
1010b6dc:	d8c00015 	stw	r3,0(sp)
1010b6e0:	0101cb40 	call	10101cb4 <__umodsi3>
1010b6e4:	8009883a 	mov	r4,r16
1010b6e8:	a80b883a 	mov	r5,r21
1010b6ec:	1027883a 	mov	r19,r2
1010b6f0:	0101c500 	call	10101c50 <__udivsi3>
1010b6f4:	9826943a 	slli	r19,r19,16
1010b6f8:	9008d43a 	srli	r4,r18,16
1010b6fc:	1521383a 	mul	r16,r2,r20
1010b700:	102d883a 	mov	r22,r2
1010b704:	24c8b03a 	or	r4,r4,r19
1010b708:	d8c00017 	ldw	r3,0(sp)
1010b70c:	2400052e 	bgeu	r4,r16,1010b724 <__udivdi3+0x23c>
1010b710:	2449883a 	add	r4,r4,r17
1010b714:	b0bfffc4 	addi	r2,r22,-1
1010b718:	24400136 	bltu	r4,r17,1010b720 <__udivdi3+0x238>
1010b71c:	2400ca36 	bltu	r4,r16,1010ba48 <__udivdi3+0x560>
1010b720:	102d883a 	mov	r22,r2
1010b724:	2421c83a 	sub	r16,r4,r16
1010b728:	a80b883a 	mov	r5,r21
1010b72c:	8009883a 	mov	r4,r16
1010b730:	d8c00015 	stw	r3,0(sp)
1010b734:	0101cb40 	call	10101cb4 <__umodsi3>
1010b738:	1027883a 	mov	r19,r2
1010b73c:	a80b883a 	mov	r5,r21
1010b740:	8009883a 	mov	r4,r16
1010b744:	0101c500 	call	10101c50 <__udivsi3>
1010b748:	9826943a 	slli	r19,r19,16
1010b74c:	1529383a 	mul	r20,r2,r20
1010b750:	94bfffcc 	andi	r18,r18,65535
1010b754:	94e4b03a 	or	r18,r18,r19
1010b758:	d8c00017 	ldw	r3,0(sp)
1010b75c:	9500052e 	bgeu	r18,r20,1010b774 <__udivdi3+0x28c>
1010b760:	8ca5883a 	add	r18,r17,r18
1010b764:	113fffc4 	addi	r4,r2,-1
1010b768:	94409736 	bltu	r18,r17,1010b9c8 <__udivdi3+0x4e0>
1010b76c:	9500962e 	bgeu	r18,r20,1010b9c8 <__udivdi3+0x4e0>
1010b770:	10bfff84 	addi	r2,r2,-2
1010b774:	b00c943a 	slli	r6,r22,16
1010b778:	3084b03a 	or	r2,r6,r2
1010b77c:	00000206 	br	1010b788 <__udivdi3+0x2a0>
1010b780:	0007883a 	mov	r3,zero
1010b784:	0005883a 	mov	r2,zero
1010b788:	dfc00a17 	ldw	ra,40(sp)
1010b78c:	df000917 	ldw	fp,36(sp)
1010b790:	ddc00817 	ldw	r23,32(sp)
1010b794:	dd800717 	ldw	r22,28(sp)
1010b798:	dd400617 	ldw	r21,24(sp)
1010b79c:	dd000517 	ldw	r20,20(sp)
1010b7a0:	dcc00417 	ldw	r19,16(sp)
1010b7a4:	dc800317 	ldw	r18,12(sp)
1010b7a8:	dc400217 	ldw	r17,8(sp)
1010b7ac:	dc000117 	ldw	r16,4(sp)
1010b7b0:	dec00b04 	addi	sp,sp,44
1010b7b4:	f800283a 	ret
1010b7b8:	00803fc4 	movi	r2,255
1010b7bc:	11c5803a 	cmpltu	r2,r2,r7
1010b7c0:	100490fa 	slli	r2,r2,3
1010b7c4:	003f9e06 	br	1010b640 <__udivdi3+0x158>
1010b7c8:	00803fc4 	movi	r2,255
1010b7cc:	1445803a 	cmpltu	r2,r2,r17
1010b7d0:	100490fa 	slli	r2,r2,3
1010b7d4:	003fb206 	br	1010b6a0 <__udivdi3+0x1b8>
1010b7d8:	00804034 	movhi	r2,256
1010b7dc:	10bfffc4 	addi	r2,r2,-1
1010b7e0:	11808836 	bltu	r2,r6,1010ba04 <__udivdi3+0x51c>
1010b7e4:	00800404 	movi	r2,16
1010b7e8:	003f5606 	br	1010b544 <__udivdi3+0x5c>
1010b7ec:	30aed83a 	srl	r23,r6,r2
1010b7f0:	3d4e983a 	sll	r7,r7,r21
1010b7f4:	80acd83a 	srl	r22,r16,r2
1010b7f8:	9884d83a 	srl	r2,r19,r2
1010b7fc:	3deeb03a 	or	r23,r7,r23
1010b800:	b824d43a 	srli	r18,r23,16
1010b804:	8560983a 	sll	r16,r16,r21
1010b808:	b009883a 	mov	r4,r22
1010b80c:	900b883a 	mov	r5,r18
1010b810:	3568983a 	sll	r20,r6,r21
1010b814:	1420b03a 	or	r16,r2,r16
1010b818:	0101cb40 	call	10101cb4 <__umodsi3>
1010b81c:	b009883a 	mov	r4,r22
1010b820:	900b883a 	mov	r5,r18
1010b824:	1023883a 	mov	r17,r2
1010b828:	0101c500 	call	10101c50 <__udivsi3>
1010b82c:	8808943a 	slli	r4,r17,16
1010b830:	bf3fffcc 	andi	fp,r23,65535
1010b834:	8006d43a 	srli	r3,r16,16
1010b838:	e0a3383a 	mul	r17,fp,r2
1010b83c:	100d883a 	mov	r6,r2
1010b840:	1906b03a 	or	r3,r3,r4
1010b844:	1c40042e 	bgeu	r3,r17,1010b858 <__udivdi3+0x370>
1010b848:	1dc7883a 	add	r3,r3,r23
1010b84c:	10bfffc4 	addi	r2,r2,-1
1010b850:	1dc0752e 	bgeu	r3,r23,1010ba28 <__udivdi3+0x540>
1010b854:	100d883a 	mov	r6,r2
1010b858:	1c63c83a 	sub	r17,r3,r17
1010b85c:	900b883a 	mov	r5,r18
1010b860:	8809883a 	mov	r4,r17
1010b864:	d9800015 	stw	r6,0(sp)
1010b868:	0101cb40 	call	10101cb4 <__umodsi3>
1010b86c:	102d883a 	mov	r22,r2
1010b870:	8809883a 	mov	r4,r17
1010b874:	900b883a 	mov	r5,r18
1010b878:	0101c500 	call	10101c50 <__udivsi3>
1010b87c:	b02c943a 	slli	r22,r22,16
1010b880:	e089383a 	mul	r4,fp,r2
1010b884:	843fffcc 	andi	r16,r16,65535
1010b888:	85a0b03a 	or	r16,r16,r22
1010b88c:	d9800017 	ldw	r6,0(sp)
1010b890:	8100042e 	bgeu	r16,r4,1010b8a4 <__udivdi3+0x3bc>
1010b894:	85e1883a 	add	r16,r16,r23
1010b898:	10ffffc4 	addi	r3,r2,-1
1010b89c:	85c05e2e 	bgeu	r16,r23,1010ba18 <__udivdi3+0x530>
1010b8a0:	1805883a 	mov	r2,r3
1010b8a4:	300c943a 	slli	r6,r6,16
1010b8a8:	a17fffcc 	andi	r5,r20,65535
1010b8ac:	a028d43a 	srli	r20,r20,16
1010b8b0:	3084b03a 	or	r2,r6,r2
1010b8b4:	10ffffcc 	andi	r3,r2,65535
1010b8b8:	100cd43a 	srli	r6,r2,16
1010b8bc:	194f383a 	mul	r7,r3,r5
1010b8c0:	1d07383a 	mul	r3,r3,r20
1010b8c4:	314b383a 	mul	r5,r6,r5
1010b8c8:	3810d43a 	srli	r8,r7,16
1010b8cc:	8121c83a 	sub	r16,r16,r4
1010b8d0:	1947883a 	add	r3,r3,r5
1010b8d4:	40c7883a 	add	r3,r8,r3
1010b8d8:	350d383a 	mul	r6,r6,r20
1010b8dc:	1940022e 	bgeu	r3,r5,1010b8e8 <__udivdi3+0x400>
1010b8e0:	01000074 	movhi	r4,1
1010b8e4:	310d883a 	add	r6,r6,r4
1010b8e8:	1828d43a 	srli	r20,r3,16
1010b8ec:	a18d883a 	add	r6,r20,r6
1010b8f0:	81803e36 	bltu	r16,r6,1010b9ec <__udivdi3+0x504>
1010b8f4:	81803826 	beq	r16,r6,1010b9d8 <__udivdi3+0x4f0>
1010b8f8:	0007883a 	mov	r3,zero
1010b8fc:	003fa206 	br	1010b788 <__udivdi3+0x2a0>
1010b900:	88e2983a 	sll	r17,r17,r3
1010b904:	80a8d83a 	srl	r20,r16,r2
1010b908:	80e0983a 	sll	r16,r16,r3
1010b90c:	882ad43a 	srli	r21,r17,16
1010b910:	9884d83a 	srl	r2,r19,r2
1010b914:	a009883a 	mov	r4,r20
1010b918:	a80b883a 	mov	r5,r21
1010b91c:	142eb03a 	or	r23,r2,r16
1010b920:	98e4983a 	sll	r18,r19,r3
1010b924:	0101cb40 	call	10101cb4 <__umodsi3>
1010b928:	a009883a 	mov	r4,r20
1010b92c:	a80b883a 	mov	r5,r21
1010b930:	1021883a 	mov	r16,r2
1010b934:	0101c500 	call	10101c50 <__udivsi3>
1010b938:	1039883a 	mov	fp,r2
1010b93c:	8d3fffcc 	andi	r20,r17,65535
1010b940:	8020943a 	slli	r16,r16,16
1010b944:	b804d43a 	srli	r2,r23,16
1010b948:	a72d383a 	mul	r22,r20,fp
1010b94c:	1404b03a 	or	r2,r2,r16
1010b950:	1580062e 	bgeu	r2,r22,1010b96c <__udivdi3+0x484>
1010b954:	1445883a 	add	r2,r2,r17
1010b958:	e0ffffc4 	addi	r3,fp,-1
1010b95c:	14403836 	bltu	r2,r17,1010ba40 <__udivdi3+0x558>
1010b960:	1580372e 	bgeu	r2,r22,1010ba40 <__udivdi3+0x558>
1010b964:	e73fff84 	addi	fp,fp,-2
1010b968:	1445883a 	add	r2,r2,r17
1010b96c:	15adc83a 	sub	r22,r2,r22
1010b970:	a80b883a 	mov	r5,r21
1010b974:	b009883a 	mov	r4,r22
1010b978:	0101cb40 	call	10101cb4 <__umodsi3>
1010b97c:	1027883a 	mov	r19,r2
1010b980:	b009883a 	mov	r4,r22
1010b984:	a80b883a 	mov	r5,r21
1010b988:	0101c500 	call	10101c50 <__udivsi3>
1010b98c:	9826943a 	slli	r19,r19,16
1010b990:	a0a1383a 	mul	r16,r20,r2
1010b994:	b93fffcc 	andi	r4,r23,65535
1010b998:	24c8b03a 	or	r4,r4,r19
1010b99c:	2400062e 	bgeu	r4,r16,1010b9b8 <__udivdi3+0x4d0>
1010b9a0:	2449883a 	add	r4,r4,r17
1010b9a4:	10ffffc4 	addi	r3,r2,-1
1010b9a8:	24402336 	bltu	r4,r17,1010ba38 <__udivdi3+0x550>
1010b9ac:	2400222e 	bgeu	r4,r16,1010ba38 <__udivdi3+0x550>
1010b9b0:	10bfff84 	addi	r2,r2,-2
1010b9b4:	2449883a 	add	r4,r4,r17
1010b9b8:	e038943a 	slli	fp,fp,16
1010b9bc:	2421c83a 	sub	r16,r4,r16
1010b9c0:	e086b03a 	or	r3,fp,r2
1010b9c4:	003f4306 	br	1010b6d4 <__udivdi3+0x1ec>
1010b9c8:	2005883a 	mov	r2,r4
1010b9cc:	003f6906 	br	1010b774 <__udivdi3+0x28c>
1010b9d0:	1805883a 	mov	r2,r3
1010b9d4:	003f0f06 	br	1010b614 <__udivdi3+0x12c>
1010b9d8:	1806943a 	slli	r3,r3,16
1010b9dc:	9d66983a 	sll	r19,r19,r21
1010b9e0:	39ffffcc 	andi	r7,r7,65535
1010b9e4:	19c7883a 	add	r3,r3,r7
1010b9e8:	98ffc32e 	bgeu	r19,r3,1010b8f8 <__udivdi3+0x410>
1010b9ec:	10bfffc4 	addi	r2,r2,-1
1010b9f0:	003fc106 	br	1010b8f8 <__udivdi3+0x410>
1010b9f4:	00800604 	movi	r2,24
1010b9f8:	003f1106 	br	1010b640 <__udivdi3+0x158>
1010b9fc:	00800604 	movi	r2,24
1010ba00:	003f2706 	br	1010b6a0 <__udivdi3+0x1b8>
1010ba04:	00800604 	movi	r2,24
1010ba08:	003ece06 	br	1010b544 <__udivdi3+0x5c>
1010ba0c:	0007883a 	mov	r3,zero
1010ba10:	00800044 	movi	r2,1
1010ba14:	003f5c06 	br	1010b788 <__udivdi3+0x2a0>
1010ba18:	813fa12e 	bgeu	r16,r4,1010b8a0 <__udivdi3+0x3b8>
1010ba1c:	10bfff84 	addi	r2,r2,-2
1010ba20:	85e1883a 	add	r16,r16,r23
1010ba24:	003f9f06 	br	1010b8a4 <__udivdi3+0x3bc>
1010ba28:	1c7f8a2e 	bgeu	r3,r17,1010b854 <__udivdi3+0x36c>
1010ba2c:	31bfff84 	addi	r6,r6,-2
1010ba30:	1dc7883a 	add	r3,r3,r23
1010ba34:	003f8806 	br	1010b858 <__udivdi3+0x370>
1010ba38:	1805883a 	mov	r2,r3
1010ba3c:	003fde06 	br	1010b9b8 <__udivdi3+0x4d0>
1010ba40:	1839883a 	mov	fp,r3
1010ba44:	003fc906 	br	1010b96c <__udivdi3+0x484>
1010ba48:	b5bfff84 	addi	r22,r22,-2
1010ba4c:	2449883a 	add	r4,r4,r17
1010ba50:	003f3406 	br	1010b724 <__udivdi3+0x23c>
1010ba54:	b5bfff84 	addi	r22,r22,-2
1010ba58:	1445883a 	add	r2,r2,r17
1010ba5c:	003edb06 	br	1010b5cc <__udivdi3+0xe4>

1010ba60 <__umoddi3>:
1010ba60:	defff404 	addi	sp,sp,-48
1010ba64:	df000a15 	stw	fp,40(sp)
1010ba68:	dc400315 	stw	r17,12(sp)
1010ba6c:	dc000215 	stw	r16,8(sp)
1010ba70:	dfc00b15 	stw	ra,44(sp)
1010ba74:	ddc00915 	stw	r23,36(sp)
1010ba78:	dd800815 	stw	r22,32(sp)
1010ba7c:	dd400715 	stw	r21,28(sp)
1010ba80:	dd000615 	stw	r20,24(sp)
1010ba84:	dcc00515 	stw	r19,20(sp)
1010ba88:	dc800415 	stw	r18,16(sp)
1010ba8c:	2021883a 	mov	r16,r4
1010ba90:	2823883a 	mov	r17,r5
1010ba94:	2839883a 	mov	fp,r5
1010ba98:	38003c1e 	bne	r7,zero,1010bb8c <__umoddi3+0x12c>
1010ba9c:	3027883a 	mov	r19,r6
1010baa0:	2029883a 	mov	r20,r4
1010baa4:	2980512e 	bgeu	r5,r6,1010bbec <__umoddi3+0x18c>
1010baa8:	00bfffd4 	movui	r2,65535
1010baac:	11809a36 	bltu	r2,r6,1010bd18 <__umoddi3+0x2b8>
1010bab0:	01003fc4 	movi	r4,255
1010bab4:	2189803a 	cmpltu	r4,r4,r6
1010bab8:	200890fa 	slli	r4,r4,3
1010babc:	3104d83a 	srl	r2,r6,r4
1010bac0:	00c40474 	movhi	r3,4113
1010bac4:	18c42304 	addi	r3,r3,4236
1010bac8:	1885883a 	add	r2,r3,r2
1010bacc:	10c00003 	ldbu	r3,0(r2)
1010bad0:	00800804 	movi	r2,32
1010bad4:	1909883a 	add	r4,r3,r4
1010bad8:	1125c83a 	sub	r18,r2,r4
1010badc:	90000526 	beq	r18,zero,1010baf4 <__umoddi3+0x94>
1010bae0:	8ca2983a 	sll	r17,r17,r18
1010bae4:	8108d83a 	srl	r4,r16,r4
1010bae8:	34a6983a 	sll	r19,r6,r18
1010baec:	84a8983a 	sll	r20,r16,r18
1010baf0:	2478b03a 	or	fp,r4,r17
1010baf4:	982ed43a 	srli	r23,r19,16
1010baf8:	e009883a 	mov	r4,fp
1010bafc:	9dbfffcc 	andi	r22,r19,65535
1010bb00:	b80b883a 	mov	r5,r23
1010bb04:	0101cb40 	call	10101cb4 <__umodsi3>
1010bb08:	e009883a 	mov	r4,fp
1010bb0c:	b80b883a 	mov	r5,r23
1010bb10:	102b883a 	mov	r21,r2
1010bb14:	0101c500 	call	10101c50 <__udivsi3>
1010bb18:	a806943a 	slli	r3,r21,16
1010bb1c:	a008d43a 	srli	r4,r20,16
1010bb20:	b085383a 	mul	r2,r22,r2
1010bb24:	20c8b03a 	or	r4,r4,r3
1010bb28:	2080032e 	bgeu	r4,r2,1010bb38 <__umoddi3+0xd8>
1010bb2c:	24c9883a 	add	r4,r4,r19
1010bb30:	24c00136 	bltu	r4,r19,1010bb38 <__umoddi3+0xd8>
1010bb34:	20811036 	bltu	r4,r2,1010bf78 <__umoddi3+0x518>
1010bb38:	20abc83a 	sub	r21,r4,r2
1010bb3c:	b80b883a 	mov	r5,r23
1010bb40:	a809883a 	mov	r4,r21
1010bb44:	0101cb40 	call	10101cb4 <__umodsi3>
1010bb48:	1023883a 	mov	r17,r2
1010bb4c:	b80b883a 	mov	r5,r23
1010bb50:	a809883a 	mov	r4,r21
1010bb54:	0101c500 	call	10101c50 <__udivsi3>
1010bb58:	8822943a 	slli	r17,r17,16
1010bb5c:	b085383a 	mul	r2,r22,r2
1010bb60:	a0ffffcc 	andi	r3,r20,65535
1010bb64:	1c46b03a 	or	r3,r3,r17
1010bb68:	1880042e 	bgeu	r3,r2,1010bb7c <__umoddi3+0x11c>
1010bb6c:	1cc7883a 	add	r3,r3,r19
1010bb70:	1cc00236 	bltu	r3,r19,1010bb7c <__umoddi3+0x11c>
1010bb74:	1880012e 	bgeu	r3,r2,1010bb7c <__umoddi3+0x11c>
1010bb78:	1cc7883a 	add	r3,r3,r19
1010bb7c:	1885c83a 	sub	r2,r3,r2
1010bb80:	1484d83a 	srl	r2,r2,r18
1010bb84:	0007883a 	mov	r3,zero
1010bb88:	00004f06 	br	1010bcc8 <__umoddi3+0x268>
1010bb8c:	29c04c36 	bltu	r5,r7,1010bcc0 <__umoddi3+0x260>
1010bb90:	00bfffd4 	movui	r2,65535
1010bb94:	11c0582e 	bgeu	r2,r7,1010bcf8 <__umoddi3+0x298>
1010bb98:	00804034 	movhi	r2,256
1010bb9c:	10bfffc4 	addi	r2,r2,-1
1010bba0:	11c0e736 	bltu	r2,r7,1010bf40 <__umoddi3+0x4e0>
1010bba4:	01000404 	movi	r4,16
1010bba8:	3904d83a 	srl	r2,r7,r4
1010bbac:	00c40474 	movhi	r3,4113
1010bbb0:	18c42304 	addi	r3,r3,4236
1010bbb4:	1885883a 	add	r2,r3,r2
1010bbb8:	14c00003 	ldbu	r19,0(r2)
1010bbbc:	00c00804 	movi	r3,32
1010bbc0:	9927883a 	add	r19,r19,r4
1010bbc4:	1ce9c83a 	sub	r20,r3,r19
1010bbc8:	a000581e 	bne	r20,zero,1010bd2c <__umoddi3+0x2cc>
1010bbcc:	3c400136 	bltu	r7,r17,1010bbd4 <__umoddi3+0x174>
1010bbd0:	8180eb36 	bltu	r16,r6,1010bf80 <__umoddi3+0x520>
1010bbd4:	8185c83a 	sub	r2,r16,r6
1010bbd8:	89e3c83a 	sub	r17,r17,r7
1010bbdc:	8089803a 	cmpltu	r4,r16,r2
1010bbe0:	8939c83a 	sub	fp,r17,r4
1010bbe4:	e007883a 	mov	r3,fp
1010bbe8:	00003706 	br	1010bcc8 <__umoddi3+0x268>
1010bbec:	3000041e 	bne	r6,zero,1010bc00 <__umoddi3+0x1a0>
1010bbf0:	000b883a 	mov	r5,zero
1010bbf4:	01000044 	movi	r4,1
1010bbf8:	0101c500 	call	10101c50 <__udivsi3>
1010bbfc:	1027883a 	mov	r19,r2
1010bc00:	00bfffd4 	movui	r2,65535
1010bc04:	14c0402e 	bgeu	r2,r19,1010bd08 <__umoddi3+0x2a8>
1010bc08:	00804034 	movhi	r2,256
1010bc0c:	10bfffc4 	addi	r2,r2,-1
1010bc10:	14c0cd36 	bltu	r2,r19,1010bf48 <__umoddi3+0x4e8>
1010bc14:	00800404 	movi	r2,16
1010bc18:	9886d83a 	srl	r3,r19,r2
1010bc1c:	01040474 	movhi	r4,4113
1010bc20:	21042304 	addi	r4,r4,4236
1010bc24:	20c7883a 	add	r3,r4,r3
1010bc28:	18c00003 	ldbu	r3,0(r3)
1010bc2c:	1887883a 	add	r3,r3,r2
1010bc30:	00800804 	movi	r2,32
1010bc34:	10e5c83a 	sub	r18,r2,r3
1010bc38:	9000901e 	bne	r18,zero,1010be7c <__umoddi3+0x41c>
1010bc3c:	982cd43a 	srli	r22,r19,16
1010bc40:	8ce3c83a 	sub	r17,r17,r19
1010bc44:	9d7fffcc 	andi	r21,r19,65535
1010bc48:	b00b883a 	mov	r5,r22
1010bc4c:	8809883a 	mov	r4,r17
1010bc50:	0101cb40 	call	10101cb4 <__umodsi3>
1010bc54:	8809883a 	mov	r4,r17
1010bc58:	b00b883a 	mov	r5,r22
1010bc5c:	1021883a 	mov	r16,r2
1010bc60:	0101c500 	call	10101c50 <__udivsi3>
1010bc64:	8006943a 	slli	r3,r16,16
1010bc68:	a008d43a 	srli	r4,r20,16
1010bc6c:	1545383a 	mul	r2,r2,r21
1010bc70:	20c8b03a 	or	r4,r4,r3
1010bc74:	2080042e 	bgeu	r4,r2,1010bc88 <__umoddi3+0x228>
1010bc78:	24c9883a 	add	r4,r4,r19
1010bc7c:	24c00236 	bltu	r4,r19,1010bc88 <__umoddi3+0x228>
1010bc80:	2080012e 	bgeu	r4,r2,1010bc88 <__umoddi3+0x228>
1010bc84:	24c9883a 	add	r4,r4,r19
1010bc88:	20a1c83a 	sub	r16,r4,r2
1010bc8c:	b00b883a 	mov	r5,r22
1010bc90:	8009883a 	mov	r4,r16
1010bc94:	0101cb40 	call	10101cb4 <__umodsi3>
1010bc98:	1023883a 	mov	r17,r2
1010bc9c:	b00b883a 	mov	r5,r22
1010bca0:	8009883a 	mov	r4,r16
1010bca4:	0101c500 	call	10101c50 <__udivsi3>
1010bca8:	8822943a 	slli	r17,r17,16
1010bcac:	1545383a 	mul	r2,r2,r21
1010bcb0:	a53fffcc 	andi	r20,r20,65535
1010bcb4:	a446b03a 	or	r3,r20,r17
1010bcb8:	18bfb02e 	bgeu	r3,r2,1010bb7c <__umoddi3+0x11c>
1010bcbc:	003fab06 	br	1010bb6c <__umoddi3+0x10c>
1010bcc0:	2005883a 	mov	r2,r4
1010bcc4:	2807883a 	mov	r3,r5
1010bcc8:	dfc00b17 	ldw	ra,44(sp)
1010bccc:	df000a17 	ldw	fp,40(sp)
1010bcd0:	ddc00917 	ldw	r23,36(sp)
1010bcd4:	dd800817 	ldw	r22,32(sp)
1010bcd8:	dd400717 	ldw	r21,28(sp)
1010bcdc:	dd000617 	ldw	r20,24(sp)
1010bce0:	dcc00517 	ldw	r19,20(sp)
1010bce4:	dc800417 	ldw	r18,16(sp)
1010bce8:	dc400317 	ldw	r17,12(sp)
1010bcec:	dc000217 	ldw	r16,8(sp)
1010bcf0:	dec00c04 	addi	sp,sp,48
1010bcf4:	f800283a 	ret
1010bcf8:	04c03fc4 	movi	r19,255
1010bcfc:	99c9803a 	cmpltu	r4,r19,r7
1010bd00:	200890fa 	slli	r4,r4,3
1010bd04:	003fa806 	br	1010bba8 <__umoddi3+0x148>
1010bd08:	00803fc4 	movi	r2,255
1010bd0c:	14c5803a 	cmpltu	r2,r2,r19
1010bd10:	100490fa 	slli	r2,r2,3
1010bd14:	003fc006 	br	1010bc18 <__umoddi3+0x1b8>
1010bd18:	00804034 	movhi	r2,256
1010bd1c:	10bfffc4 	addi	r2,r2,-1
1010bd20:	11808b36 	bltu	r2,r6,1010bf50 <__umoddi3+0x4f0>
1010bd24:	01000404 	movi	r4,16
1010bd28:	003f6406 	br	1010babc <__umoddi3+0x5c>
1010bd2c:	34c4d83a 	srl	r2,r6,r19
1010bd30:	3d0e983a 	sll	r7,r7,r20
1010bd34:	8cf8d83a 	srl	fp,r17,r19
1010bd38:	8d10983a 	sll	r8,r17,r20
1010bd3c:	38aab03a 	or	r21,r7,r2
1010bd40:	a82cd43a 	srli	r22,r21,16
1010bd44:	84e2d83a 	srl	r17,r16,r19
1010bd48:	e009883a 	mov	r4,fp
1010bd4c:	b00b883a 	mov	r5,r22
1010bd50:	8a22b03a 	or	r17,r17,r8
1010bd54:	3524983a 	sll	r18,r6,r20
1010bd58:	0101cb40 	call	10101cb4 <__umodsi3>
1010bd5c:	e009883a 	mov	r4,fp
1010bd60:	b00b883a 	mov	r5,r22
1010bd64:	102f883a 	mov	r23,r2
1010bd68:	0101c500 	call	10101c50 <__udivsi3>
1010bd6c:	100d883a 	mov	r6,r2
1010bd70:	b808943a 	slli	r4,r23,16
1010bd74:	aa3fffcc 	andi	r8,r21,65535
1010bd78:	8804d43a 	srli	r2,r17,16
1010bd7c:	41af383a 	mul	r23,r8,r6
1010bd80:	8520983a 	sll	r16,r16,r20
1010bd84:	1104b03a 	or	r2,r2,r4
1010bd88:	15c0042e 	bgeu	r2,r23,1010bd9c <__umoddi3+0x33c>
1010bd8c:	1545883a 	add	r2,r2,r21
1010bd90:	30ffffc4 	addi	r3,r6,-1
1010bd94:	1540742e 	bgeu	r2,r21,1010bf68 <__umoddi3+0x508>
1010bd98:	180d883a 	mov	r6,r3
1010bd9c:	15efc83a 	sub	r23,r2,r23
1010bda0:	b00b883a 	mov	r5,r22
1010bda4:	b809883a 	mov	r4,r23
1010bda8:	d9800115 	stw	r6,4(sp)
1010bdac:	da000015 	stw	r8,0(sp)
1010bdb0:	0101cb40 	call	10101cb4 <__umodsi3>
1010bdb4:	b00b883a 	mov	r5,r22
1010bdb8:	b809883a 	mov	r4,r23
1010bdbc:	1039883a 	mov	fp,r2
1010bdc0:	0101c500 	call	10101c50 <__udivsi3>
1010bdc4:	da000017 	ldw	r8,0(sp)
1010bdc8:	e038943a 	slli	fp,fp,16
1010bdcc:	100b883a 	mov	r5,r2
1010bdd0:	4089383a 	mul	r4,r8,r2
1010bdd4:	8a3fffcc 	andi	r8,r17,65535
1010bdd8:	4710b03a 	or	r8,r8,fp
1010bddc:	d9800117 	ldw	r6,4(sp)
1010bde0:	4100042e 	bgeu	r8,r4,1010bdf4 <__umoddi3+0x394>
1010bde4:	4551883a 	add	r8,r8,r21
1010bde8:	10bfffc4 	addi	r2,r2,-1
1010bdec:	45405a2e 	bgeu	r8,r21,1010bf58 <__umoddi3+0x4f8>
1010bdf0:	100b883a 	mov	r5,r2
1010bdf4:	300c943a 	slli	r6,r6,16
1010bdf8:	91ffffcc 	andi	r7,r18,65535
1010bdfc:	9004d43a 	srli	r2,r18,16
1010be00:	314cb03a 	or	r6,r6,r5
1010be04:	317fffcc 	andi	r5,r6,65535
1010be08:	300cd43a 	srli	r6,r6,16
1010be0c:	29d3383a 	mul	r9,r5,r7
1010be10:	288b383a 	mul	r5,r5,r2
1010be14:	31cf383a 	mul	r7,r6,r7
1010be18:	4806d43a 	srli	r3,r9,16
1010be1c:	4111c83a 	sub	r8,r8,r4
1010be20:	29cb883a 	add	r5,r5,r7
1010be24:	194b883a 	add	r5,r3,r5
1010be28:	3085383a 	mul	r2,r6,r2
1010be2c:	29c0022e 	bgeu	r5,r7,1010be38 <__umoddi3+0x3d8>
1010be30:	00c00074 	movhi	r3,1
1010be34:	10c5883a 	add	r2,r2,r3
1010be38:	2808d43a 	srli	r4,r5,16
1010be3c:	280a943a 	slli	r5,r5,16
1010be40:	4a7fffcc 	andi	r9,r9,65535
1010be44:	2085883a 	add	r2,r4,r2
1010be48:	2a4b883a 	add	r5,r5,r9
1010be4c:	40803636 	bltu	r8,r2,1010bf28 <__umoddi3+0x4c8>
1010be50:	40804d26 	beq	r8,r2,1010bf88 <__umoddi3+0x528>
1010be54:	4089c83a 	sub	r4,r8,r2
1010be58:	280f883a 	mov	r7,r5
1010be5c:	81cfc83a 	sub	r7,r16,r7
1010be60:	81c7803a 	cmpltu	r3,r16,r7
1010be64:	20c7c83a 	sub	r3,r4,r3
1010be68:	1cc4983a 	sll	r2,r3,r19
1010be6c:	3d0ed83a 	srl	r7,r7,r20
1010be70:	1d06d83a 	srl	r3,r3,r20
1010be74:	11c4b03a 	or	r2,r2,r7
1010be78:	003f9306 	br	1010bcc8 <__umoddi3+0x268>
1010be7c:	9ca6983a 	sll	r19,r19,r18
1010be80:	88e8d83a 	srl	r20,r17,r3
1010be84:	80c4d83a 	srl	r2,r16,r3
1010be88:	982cd43a 	srli	r22,r19,16
1010be8c:	8ca2983a 	sll	r17,r17,r18
1010be90:	a009883a 	mov	r4,r20
1010be94:	b00b883a 	mov	r5,r22
1010be98:	1478b03a 	or	fp,r2,r17
1010be9c:	0101cb40 	call	10101cb4 <__umodsi3>
1010bea0:	a009883a 	mov	r4,r20
1010bea4:	b00b883a 	mov	r5,r22
1010bea8:	1023883a 	mov	r17,r2
1010beac:	0101c500 	call	10101c50 <__udivsi3>
1010beb0:	9d7fffcc 	andi	r21,r19,65535
1010beb4:	880a943a 	slli	r5,r17,16
1010beb8:	e008d43a 	srli	r4,fp,16
1010bebc:	a885383a 	mul	r2,r21,r2
1010bec0:	84a8983a 	sll	r20,r16,r18
1010bec4:	2148b03a 	or	r4,r4,r5
1010bec8:	2080042e 	bgeu	r4,r2,1010bedc <__umoddi3+0x47c>
1010becc:	24c9883a 	add	r4,r4,r19
1010bed0:	24c00236 	bltu	r4,r19,1010bedc <__umoddi3+0x47c>
1010bed4:	2080012e 	bgeu	r4,r2,1010bedc <__umoddi3+0x47c>
1010bed8:	24c9883a 	add	r4,r4,r19
1010bedc:	20a3c83a 	sub	r17,r4,r2
1010bee0:	b00b883a 	mov	r5,r22
1010bee4:	8809883a 	mov	r4,r17
1010bee8:	0101cb40 	call	10101cb4 <__umodsi3>
1010beec:	102f883a 	mov	r23,r2
1010bef0:	8809883a 	mov	r4,r17
1010bef4:	b00b883a 	mov	r5,r22
1010bef8:	0101c500 	call	10101c50 <__udivsi3>
1010befc:	b82e943a 	slli	r23,r23,16
1010bf00:	a885383a 	mul	r2,r21,r2
1010bf04:	e13fffcc 	andi	r4,fp,65535
1010bf08:	25c8b03a 	or	r4,r4,r23
1010bf0c:	2080042e 	bgeu	r4,r2,1010bf20 <__umoddi3+0x4c0>
1010bf10:	24c9883a 	add	r4,r4,r19
1010bf14:	24c00236 	bltu	r4,r19,1010bf20 <__umoddi3+0x4c0>
1010bf18:	2080012e 	bgeu	r4,r2,1010bf20 <__umoddi3+0x4c0>
1010bf1c:	24c9883a 	add	r4,r4,r19
1010bf20:	20a3c83a 	sub	r17,r4,r2
1010bf24:	003f4806 	br	1010bc48 <__umoddi3+0x1e8>
1010bf28:	2c8fc83a 	sub	r7,r5,r18
1010bf2c:	1545c83a 	sub	r2,r2,r21
1010bf30:	29cb803a 	cmpltu	r5,r5,r7
1010bf34:	1145c83a 	sub	r2,r2,r5
1010bf38:	4089c83a 	sub	r4,r8,r2
1010bf3c:	003fc706 	br	1010be5c <__umoddi3+0x3fc>
1010bf40:	01000604 	movi	r4,24
1010bf44:	003f1806 	br	1010bba8 <__umoddi3+0x148>
1010bf48:	00800604 	movi	r2,24
1010bf4c:	003f3206 	br	1010bc18 <__umoddi3+0x1b8>
1010bf50:	01000604 	movi	r4,24
1010bf54:	003ed906 	br	1010babc <__umoddi3+0x5c>
1010bf58:	413fa52e 	bgeu	r8,r4,1010bdf0 <__umoddi3+0x390>
1010bf5c:	297fff84 	addi	r5,r5,-2
1010bf60:	4551883a 	add	r8,r8,r21
1010bf64:	003fa306 	br	1010bdf4 <__umoddi3+0x394>
1010bf68:	15ff8b2e 	bgeu	r2,r23,1010bd98 <__umoddi3+0x338>
1010bf6c:	31bfff84 	addi	r6,r6,-2
1010bf70:	1545883a 	add	r2,r2,r21
1010bf74:	003f8906 	br	1010bd9c <__umoddi3+0x33c>
1010bf78:	24c9883a 	add	r4,r4,r19
1010bf7c:	003eee06 	br	1010bb38 <__umoddi3+0xd8>
1010bf80:	8005883a 	mov	r2,r16
1010bf84:	003f1706 	br	1010bbe4 <__umoddi3+0x184>
1010bf88:	817fe736 	bltu	r16,r5,1010bf28 <__umoddi3+0x4c8>
1010bf8c:	280f883a 	mov	r7,r5
1010bf90:	0009883a 	mov	r4,zero
1010bf94:	003fb106 	br	1010be5c <__umoddi3+0x3fc>

1010bf98 <__adddf3>:
1010bf98:	02c00434 	movhi	r11,16
1010bf9c:	5affffc4 	addi	r11,r11,-1
1010bfa0:	2806d7fa 	srli	r3,r5,31
1010bfa4:	2ad4703a 	and	r10,r5,r11
1010bfa8:	3ad2703a 	and	r9,r7,r11
1010bfac:	3804d53a 	srli	r2,r7,20
1010bfb0:	3018d77a 	srli	r12,r6,29
1010bfb4:	280ad53a 	srli	r5,r5,20
1010bfb8:	501490fa 	slli	r10,r10,3
1010bfbc:	2010d77a 	srli	r8,r4,29
1010bfc0:	481290fa 	slli	r9,r9,3
1010bfc4:	380ed7fa 	srli	r7,r7,31
1010bfc8:	defffb04 	addi	sp,sp,-20
1010bfcc:	dc800215 	stw	r18,8(sp)
1010bfd0:	dc400115 	stw	r17,4(sp)
1010bfd4:	dc000015 	stw	r16,0(sp)
1010bfd8:	dfc00415 	stw	ra,16(sp)
1010bfdc:	dcc00315 	stw	r19,12(sp)
1010bfe0:	1c803fcc 	andi	r18,r3,255
1010bfe4:	2c01ffcc 	andi	r16,r5,2047
1010bfe8:	5210b03a 	or	r8,r10,r8
1010bfec:	202290fa 	slli	r17,r4,3
1010bff0:	1081ffcc 	andi	r2,r2,2047
1010bff4:	4b12b03a 	or	r9,r9,r12
1010bff8:	300c90fa 	slli	r6,r6,3
1010bffc:	91c07526 	beq	r18,r7,1010c1d4 <__adddf3+0x23c>
1010c000:	8087c83a 	sub	r3,r16,r2
1010c004:	00c0ab0e 	bge	zero,r3,1010c2b4 <__adddf3+0x31c>
1010c008:	10002a1e 	bne	r2,zero,1010c0b4 <__adddf3+0x11c>
1010c00c:	4984b03a 	or	r2,r9,r6
1010c010:	1000961e 	bne	r2,zero,1010c26c <__adddf3+0x2d4>
1010c014:	888001cc 	andi	r2,r17,7
1010c018:	10000726 	beq	r2,zero,1010c038 <__adddf3+0xa0>
1010c01c:	888003cc 	andi	r2,r17,15
1010c020:	00c00104 	movi	r3,4
1010c024:	10c00426 	beq	r2,r3,1010c038 <__adddf3+0xa0>
1010c028:	88c7883a 	add	r3,r17,r3
1010c02c:	1c63803a 	cmpltu	r17,r3,r17
1010c030:	4451883a 	add	r8,r8,r17
1010c034:	1823883a 	mov	r17,r3
1010c038:	4080202c 	andhi	r2,r8,128
1010c03c:	10005926 	beq	r2,zero,1010c1a4 <__adddf3+0x20c>
1010c040:	84000044 	addi	r16,r16,1
1010c044:	0081ffc4 	movi	r2,2047
1010c048:	8080ba26 	beq	r16,r2,1010c334 <__adddf3+0x39c>
1010c04c:	00bfe034 	movhi	r2,65408
1010c050:	10bfffc4 	addi	r2,r2,-1
1010c054:	4090703a 	and	r8,r8,r2
1010c058:	4004977a 	slli	r2,r8,29
1010c05c:	4010927a 	slli	r8,r8,9
1010c060:	8822d0fa 	srli	r17,r17,3
1010c064:	8401ffcc 	andi	r16,r16,2047
1010c068:	4010d33a 	srli	r8,r8,12
1010c06c:	9007883a 	mov	r3,r18
1010c070:	1444b03a 	or	r2,r2,r17
1010c074:	8401ffcc 	andi	r16,r16,2047
1010c078:	8020953a 	slli	r16,r16,20
1010c07c:	18c03fcc 	andi	r3,r3,255
1010c080:	01000434 	movhi	r4,16
1010c084:	213fffc4 	addi	r4,r4,-1
1010c088:	180697fa 	slli	r3,r3,31
1010c08c:	4110703a 	and	r8,r8,r4
1010c090:	4410b03a 	or	r8,r8,r16
1010c094:	40c6b03a 	or	r3,r8,r3
1010c098:	dfc00417 	ldw	ra,16(sp)
1010c09c:	dcc00317 	ldw	r19,12(sp)
1010c0a0:	dc800217 	ldw	r18,8(sp)
1010c0a4:	dc400117 	ldw	r17,4(sp)
1010c0a8:	dc000017 	ldw	r16,0(sp)
1010c0ac:	dec00504 	addi	sp,sp,20
1010c0b0:	f800283a 	ret
1010c0b4:	0081ffc4 	movi	r2,2047
1010c0b8:	80bfd626 	beq	r16,r2,1010c014 <__adddf3+0x7c>
1010c0bc:	4a402034 	orhi	r9,r9,128
1010c0c0:	00800e04 	movi	r2,56
1010c0c4:	10c09f16 	blt	r2,r3,1010c344 <__adddf3+0x3ac>
1010c0c8:	008007c4 	movi	r2,31
1010c0cc:	10c0c216 	blt	r2,r3,1010c3d8 <__adddf3+0x440>
1010c0d0:	00800804 	movi	r2,32
1010c0d4:	10c5c83a 	sub	r2,r2,r3
1010c0d8:	488a983a 	sll	r5,r9,r2
1010c0dc:	30c8d83a 	srl	r4,r6,r3
1010c0e0:	3084983a 	sll	r2,r6,r2
1010c0e4:	48c6d83a 	srl	r3,r9,r3
1010c0e8:	290cb03a 	or	r6,r5,r4
1010c0ec:	1004c03a 	cmpne	r2,r2,zero
1010c0f0:	308cb03a 	or	r6,r6,r2
1010c0f4:	898dc83a 	sub	r6,r17,r6
1010c0f8:	89a3803a 	cmpltu	r17,r17,r6
1010c0fc:	40d1c83a 	sub	r8,r8,r3
1010c100:	4451c83a 	sub	r8,r8,r17
1010c104:	3023883a 	mov	r17,r6
1010c108:	4080202c 	andhi	r2,r8,128
1010c10c:	10002326 	beq	r2,zero,1010c19c <__adddf3+0x204>
1010c110:	04c02034 	movhi	r19,128
1010c114:	9cffffc4 	addi	r19,r19,-1
1010c118:	44e6703a 	and	r19,r8,r19
1010c11c:	98007626 	beq	r19,zero,1010c2f8 <__adddf3+0x360>
1010c120:	9809883a 	mov	r4,r19
1010c124:	010e59c0 	call	1010e59c <__clzsi2>
1010c128:	10fffe04 	addi	r3,r2,-8
1010c12c:	010007c4 	movi	r4,31
1010c130:	20c07716 	blt	r4,r3,1010c310 <__adddf3+0x378>
1010c134:	00800804 	movi	r2,32
1010c138:	10c5c83a 	sub	r2,r2,r3
1010c13c:	8884d83a 	srl	r2,r17,r2
1010c140:	98d0983a 	sll	r8,r19,r3
1010c144:	88e2983a 	sll	r17,r17,r3
1010c148:	1204b03a 	or	r2,r2,r8
1010c14c:	1c007416 	blt	r3,r16,1010c320 <__adddf3+0x388>
1010c150:	1c21c83a 	sub	r16,r3,r16
1010c154:	82000044 	addi	r8,r16,1
1010c158:	00c007c4 	movi	r3,31
1010c15c:	1a009116 	blt	r3,r8,1010c3a4 <__adddf3+0x40c>
1010c160:	00c00804 	movi	r3,32
1010c164:	1a07c83a 	sub	r3,r3,r8
1010c168:	8a08d83a 	srl	r4,r17,r8
1010c16c:	88e2983a 	sll	r17,r17,r3
1010c170:	10c6983a 	sll	r3,r2,r3
1010c174:	1210d83a 	srl	r8,r2,r8
1010c178:	8804c03a 	cmpne	r2,r17,zero
1010c17c:	1906b03a 	or	r3,r3,r4
1010c180:	18a2b03a 	or	r17,r3,r2
1010c184:	0021883a 	mov	r16,zero
1010c188:	003fa206 	br	1010c014 <__adddf3+0x7c>
1010c18c:	1890b03a 	or	r8,r3,r2
1010c190:	40017d26 	beq	r8,zero,1010c788 <__adddf3+0x7f0>
1010c194:	1011883a 	mov	r8,r2
1010c198:	1823883a 	mov	r17,r3
1010c19c:	888001cc 	andi	r2,r17,7
1010c1a0:	103f9e1e 	bne	r2,zero,1010c01c <__adddf3+0x84>
1010c1a4:	4004977a 	slli	r2,r8,29
1010c1a8:	8822d0fa 	srli	r17,r17,3
1010c1ac:	4010d0fa 	srli	r8,r8,3
1010c1b0:	9007883a 	mov	r3,r18
1010c1b4:	1444b03a 	or	r2,r2,r17
1010c1b8:	0101ffc4 	movi	r4,2047
1010c1bc:	81002426 	beq	r16,r4,1010c250 <__adddf3+0x2b8>
1010c1c0:	8120703a 	and	r16,r16,r4
1010c1c4:	01000434 	movhi	r4,16
1010c1c8:	213fffc4 	addi	r4,r4,-1
1010c1cc:	4110703a 	and	r8,r8,r4
1010c1d0:	003fa806 	br	1010c074 <__adddf3+0xdc>
1010c1d4:	8089c83a 	sub	r4,r16,r2
1010c1d8:	01005e0e 	bge	zero,r4,1010c354 <__adddf3+0x3bc>
1010c1dc:	10002b26 	beq	r2,zero,1010c28c <__adddf3+0x2f4>
1010c1e0:	0081ffc4 	movi	r2,2047
1010c1e4:	80bf8b26 	beq	r16,r2,1010c014 <__adddf3+0x7c>
1010c1e8:	4a402034 	orhi	r9,r9,128
1010c1ec:	00800e04 	movi	r2,56
1010c1f0:	1100a40e 	bge	r2,r4,1010c484 <__adddf3+0x4ec>
1010c1f4:	498cb03a 	or	r6,r9,r6
1010c1f8:	300ac03a 	cmpne	r5,r6,zero
1010c1fc:	0013883a 	mov	r9,zero
1010c200:	2c4b883a 	add	r5,r5,r17
1010c204:	2c63803a 	cmpltu	r17,r5,r17
1010c208:	4a11883a 	add	r8,r9,r8
1010c20c:	8a11883a 	add	r8,r17,r8
1010c210:	2823883a 	mov	r17,r5
1010c214:	4080202c 	andhi	r2,r8,128
1010c218:	103fe026 	beq	r2,zero,1010c19c <__adddf3+0x204>
1010c21c:	84000044 	addi	r16,r16,1
1010c220:	0081ffc4 	movi	r2,2047
1010c224:	8080d226 	beq	r16,r2,1010c570 <__adddf3+0x5d8>
1010c228:	00bfe034 	movhi	r2,65408
1010c22c:	10bfffc4 	addi	r2,r2,-1
1010c230:	4090703a 	and	r8,r8,r2
1010c234:	880ad07a 	srli	r5,r17,1
1010c238:	400897fa 	slli	r4,r8,31
1010c23c:	88c0004c 	andi	r3,r17,1
1010c240:	28e2b03a 	or	r17,r5,r3
1010c244:	4010d07a 	srli	r8,r8,1
1010c248:	2462b03a 	or	r17,r4,r17
1010c24c:	003f7106 	br	1010c014 <__adddf3+0x7c>
1010c250:	4088b03a 	or	r4,r8,r2
1010c254:	20014526 	beq	r4,zero,1010c76c <__adddf3+0x7d4>
1010c258:	01000434 	movhi	r4,16
1010c25c:	42000234 	orhi	r8,r8,8
1010c260:	213fffc4 	addi	r4,r4,-1
1010c264:	4110703a 	and	r8,r8,r4
1010c268:	003f8206 	br	1010c074 <__adddf3+0xdc>
1010c26c:	18ffffc4 	addi	r3,r3,-1
1010c270:	1800491e 	bne	r3,zero,1010c398 <__adddf3+0x400>
1010c274:	898bc83a 	sub	r5,r17,r6
1010c278:	8963803a 	cmpltu	r17,r17,r5
1010c27c:	4251c83a 	sub	r8,r8,r9
1010c280:	4451c83a 	sub	r8,r8,r17
1010c284:	2823883a 	mov	r17,r5
1010c288:	003f9f06 	br	1010c108 <__adddf3+0x170>
1010c28c:	4984b03a 	or	r2,r9,r6
1010c290:	103f6026 	beq	r2,zero,1010c014 <__adddf3+0x7c>
1010c294:	213fffc4 	addi	r4,r4,-1
1010c298:	2000931e 	bne	r4,zero,1010c4e8 <__adddf3+0x550>
1010c29c:	898d883a 	add	r6,r17,r6
1010c2a0:	3463803a 	cmpltu	r17,r6,r17
1010c2a4:	4251883a 	add	r8,r8,r9
1010c2a8:	8a11883a 	add	r8,r17,r8
1010c2ac:	3023883a 	mov	r17,r6
1010c2b0:	003fd806 	br	1010c214 <__adddf3+0x27c>
1010c2b4:	1800541e 	bne	r3,zero,1010c408 <__adddf3+0x470>
1010c2b8:	80800044 	addi	r2,r16,1
1010c2bc:	1081ffcc 	andi	r2,r2,2047
1010c2c0:	00c00044 	movi	r3,1
1010c2c4:	1880a00e 	bge	r3,r2,1010c548 <__adddf3+0x5b0>
1010c2c8:	8989c83a 	sub	r4,r17,r6
1010c2cc:	8905803a 	cmpltu	r2,r17,r4
1010c2d0:	4267c83a 	sub	r19,r8,r9
1010c2d4:	98a7c83a 	sub	r19,r19,r2
1010c2d8:	9880202c 	andhi	r2,r19,128
1010c2dc:	10006326 	beq	r2,zero,1010c46c <__adddf3+0x4d4>
1010c2e0:	3463c83a 	sub	r17,r6,r17
1010c2e4:	4a07c83a 	sub	r3,r9,r8
1010c2e8:	344d803a 	cmpltu	r6,r6,r17
1010c2ec:	19a7c83a 	sub	r19,r3,r6
1010c2f0:	3825883a 	mov	r18,r7
1010c2f4:	983f8a1e 	bne	r19,zero,1010c120 <__adddf3+0x188>
1010c2f8:	8809883a 	mov	r4,r17
1010c2fc:	010e59c0 	call	1010e59c <__clzsi2>
1010c300:	10800804 	addi	r2,r2,32
1010c304:	10fffe04 	addi	r3,r2,-8
1010c308:	010007c4 	movi	r4,31
1010c30c:	20ff890e 	bge	r4,r3,1010c134 <__adddf3+0x19c>
1010c310:	10bff604 	addi	r2,r2,-40
1010c314:	8884983a 	sll	r2,r17,r2
1010c318:	0023883a 	mov	r17,zero
1010c31c:	1c3f8c0e 	bge	r3,r16,1010c150 <__adddf3+0x1b8>
1010c320:	023fe034 	movhi	r8,65408
1010c324:	423fffc4 	addi	r8,r8,-1
1010c328:	80e1c83a 	sub	r16,r16,r3
1010c32c:	1210703a 	and	r8,r2,r8
1010c330:	003f3806 	br	1010c014 <__adddf3+0x7c>
1010c334:	9007883a 	mov	r3,r18
1010c338:	0011883a 	mov	r8,zero
1010c33c:	0005883a 	mov	r2,zero
1010c340:	003f4c06 	br	1010c074 <__adddf3+0xdc>
1010c344:	498cb03a 	or	r6,r9,r6
1010c348:	300cc03a 	cmpne	r6,r6,zero
1010c34c:	0007883a 	mov	r3,zero
1010c350:	003f6806 	br	1010c0f4 <__adddf3+0x15c>
1010c354:	20009c1e 	bne	r4,zero,1010c5c8 <__adddf3+0x630>
1010c358:	80800044 	addi	r2,r16,1
1010c35c:	1141ffcc 	andi	r5,r2,2047
1010c360:	01000044 	movi	r4,1
1010c364:	2140670e 	bge	r4,r5,1010c504 <__adddf3+0x56c>
1010c368:	0101ffc4 	movi	r4,2047
1010c36c:	11007f26 	beq	r2,r4,1010c56c <__adddf3+0x5d4>
1010c370:	898d883a 	add	r6,r17,r6
1010c374:	4247883a 	add	r3,r8,r9
1010c378:	3451803a 	cmpltu	r8,r6,r17
1010c37c:	40d1883a 	add	r8,r8,r3
1010c380:	402297fa 	slli	r17,r8,31
1010c384:	300cd07a 	srli	r6,r6,1
1010c388:	4010d07a 	srli	r8,r8,1
1010c38c:	1021883a 	mov	r16,r2
1010c390:	89a2b03a 	or	r17,r17,r6
1010c394:	003f1f06 	br	1010c014 <__adddf3+0x7c>
1010c398:	0081ffc4 	movi	r2,2047
1010c39c:	80bf481e 	bne	r16,r2,1010c0c0 <__adddf3+0x128>
1010c3a0:	003f1c06 	br	1010c014 <__adddf3+0x7c>
1010c3a4:	843ff844 	addi	r16,r16,-31
1010c3a8:	01000804 	movi	r4,32
1010c3ac:	1406d83a 	srl	r3,r2,r16
1010c3b0:	41005026 	beq	r8,r4,1010c4f4 <__adddf3+0x55c>
1010c3b4:	01001004 	movi	r4,64
1010c3b8:	2211c83a 	sub	r8,r4,r8
1010c3bc:	1204983a 	sll	r2,r2,r8
1010c3c0:	88a2b03a 	or	r17,r17,r2
1010c3c4:	8822c03a 	cmpne	r17,r17,zero
1010c3c8:	1c62b03a 	or	r17,r3,r17
1010c3cc:	0011883a 	mov	r8,zero
1010c3d0:	0021883a 	mov	r16,zero
1010c3d4:	003f7106 	br	1010c19c <__adddf3+0x204>
1010c3d8:	193ff804 	addi	r4,r3,-32
1010c3dc:	00800804 	movi	r2,32
1010c3e0:	4908d83a 	srl	r4,r9,r4
1010c3e4:	18804526 	beq	r3,r2,1010c4fc <__adddf3+0x564>
1010c3e8:	00801004 	movi	r2,64
1010c3ec:	10c5c83a 	sub	r2,r2,r3
1010c3f0:	4886983a 	sll	r3,r9,r2
1010c3f4:	198cb03a 	or	r6,r3,r6
1010c3f8:	300cc03a 	cmpne	r6,r6,zero
1010c3fc:	218cb03a 	or	r6,r4,r6
1010c400:	0007883a 	mov	r3,zero
1010c404:	003f3b06 	br	1010c0f4 <__adddf3+0x15c>
1010c408:	80002a26 	beq	r16,zero,1010c4b4 <__adddf3+0x51c>
1010c40c:	0101ffc4 	movi	r4,2047
1010c410:	11006826 	beq	r2,r4,1010c5b4 <__adddf3+0x61c>
1010c414:	00c7c83a 	sub	r3,zero,r3
1010c418:	42002034 	orhi	r8,r8,128
1010c41c:	01000e04 	movi	r4,56
1010c420:	20c07c16 	blt	r4,r3,1010c614 <__adddf3+0x67c>
1010c424:	010007c4 	movi	r4,31
1010c428:	20c0da16 	blt	r4,r3,1010c794 <__adddf3+0x7fc>
1010c42c:	01000804 	movi	r4,32
1010c430:	20c9c83a 	sub	r4,r4,r3
1010c434:	4114983a 	sll	r10,r8,r4
1010c438:	88cad83a 	srl	r5,r17,r3
1010c43c:	8908983a 	sll	r4,r17,r4
1010c440:	40c6d83a 	srl	r3,r8,r3
1010c444:	5162b03a 	or	r17,r10,r5
1010c448:	2008c03a 	cmpne	r4,r4,zero
1010c44c:	8922b03a 	or	r17,r17,r4
1010c450:	3463c83a 	sub	r17,r6,r17
1010c454:	48c7c83a 	sub	r3,r9,r3
1010c458:	344d803a 	cmpltu	r6,r6,r17
1010c45c:	1991c83a 	sub	r8,r3,r6
1010c460:	1021883a 	mov	r16,r2
1010c464:	3825883a 	mov	r18,r7
1010c468:	003f2706 	br	1010c108 <__adddf3+0x170>
1010c46c:	24d0b03a 	or	r8,r4,r19
1010c470:	40001b1e 	bne	r8,zero,1010c4e0 <__adddf3+0x548>
1010c474:	0005883a 	mov	r2,zero
1010c478:	0007883a 	mov	r3,zero
1010c47c:	0021883a 	mov	r16,zero
1010c480:	003f4d06 	br	1010c1b8 <__adddf3+0x220>
1010c484:	008007c4 	movi	r2,31
1010c488:	11003c16 	blt	r2,r4,1010c57c <__adddf3+0x5e4>
1010c48c:	00800804 	movi	r2,32
1010c490:	1105c83a 	sub	r2,r2,r4
1010c494:	488e983a 	sll	r7,r9,r2
1010c498:	310ad83a 	srl	r5,r6,r4
1010c49c:	3084983a 	sll	r2,r6,r2
1010c4a0:	4912d83a 	srl	r9,r9,r4
1010c4a4:	394ab03a 	or	r5,r7,r5
1010c4a8:	1004c03a 	cmpne	r2,r2,zero
1010c4ac:	288ab03a 	or	r5,r5,r2
1010c4b0:	003f5306 	br	1010c200 <__adddf3+0x268>
1010c4b4:	4448b03a 	or	r4,r8,r17
1010c4b8:	20003e26 	beq	r4,zero,1010c5b4 <__adddf3+0x61c>
1010c4bc:	00c6303a 	nor	r3,zero,r3
1010c4c0:	18003a1e 	bne	r3,zero,1010c5ac <__adddf3+0x614>
1010c4c4:	3463c83a 	sub	r17,r6,r17
1010c4c8:	4a07c83a 	sub	r3,r9,r8
1010c4cc:	344d803a 	cmpltu	r6,r6,r17
1010c4d0:	1991c83a 	sub	r8,r3,r6
1010c4d4:	1021883a 	mov	r16,r2
1010c4d8:	3825883a 	mov	r18,r7
1010c4dc:	003f0a06 	br	1010c108 <__adddf3+0x170>
1010c4e0:	2023883a 	mov	r17,r4
1010c4e4:	003f0d06 	br	1010c11c <__adddf3+0x184>
1010c4e8:	0081ffc4 	movi	r2,2047
1010c4ec:	80bf3f1e 	bne	r16,r2,1010c1ec <__adddf3+0x254>
1010c4f0:	003ec806 	br	1010c014 <__adddf3+0x7c>
1010c4f4:	0005883a 	mov	r2,zero
1010c4f8:	003fb106 	br	1010c3c0 <__adddf3+0x428>
1010c4fc:	0007883a 	mov	r3,zero
1010c500:	003fbc06 	br	1010c3f4 <__adddf3+0x45c>
1010c504:	4444b03a 	or	r2,r8,r17
1010c508:	8000871e 	bne	r16,zero,1010c728 <__adddf3+0x790>
1010c50c:	1000ba26 	beq	r2,zero,1010c7f8 <__adddf3+0x860>
1010c510:	4984b03a 	or	r2,r9,r6
1010c514:	103ebf26 	beq	r2,zero,1010c014 <__adddf3+0x7c>
1010c518:	8985883a 	add	r2,r17,r6
1010c51c:	4247883a 	add	r3,r8,r9
1010c520:	1451803a 	cmpltu	r8,r2,r17
1010c524:	40d1883a 	add	r8,r8,r3
1010c528:	40c0202c 	andhi	r3,r8,128
1010c52c:	1023883a 	mov	r17,r2
1010c530:	183f1a26 	beq	r3,zero,1010c19c <__adddf3+0x204>
1010c534:	00bfe034 	movhi	r2,65408
1010c538:	10bfffc4 	addi	r2,r2,-1
1010c53c:	2021883a 	mov	r16,r4
1010c540:	4090703a 	and	r8,r8,r2
1010c544:	003eb306 	br	1010c014 <__adddf3+0x7c>
1010c548:	4444b03a 	or	r2,r8,r17
1010c54c:	8000291e 	bne	r16,zero,1010c5f4 <__adddf3+0x65c>
1010c550:	10004b1e 	bne	r2,zero,1010c680 <__adddf3+0x6e8>
1010c554:	4990b03a 	or	r8,r9,r6
1010c558:	40008b26 	beq	r8,zero,1010c788 <__adddf3+0x7f0>
1010c55c:	4811883a 	mov	r8,r9
1010c560:	3023883a 	mov	r17,r6
1010c564:	3825883a 	mov	r18,r7
1010c568:	003eaa06 	br	1010c014 <__adddf3+0x7c>
1010c56c:	1021883a 	mov	r16,r2
1010c570:	0011883a 	mov	r8,zero
1010c574:	0005883a 	mov	r2,zero
1010c578:	003f0f06 	br	1010c1b8 <__adddf3+0x220>
1010c57c:	217ff804 	addi	r5,r4,-32
1010c580:	00800804 	movi	r2,32
1010c584:	494ad83a 	srl	r5,r9,r5
1010c588:	20807d26 	beq	r4,r2,1010c780 <__adddf3+0x7e8>
1010c58c:	00801004 	movi	r2,64
1010c590:	1109c83a 	sub	r4,r2,r4
1010c594:	4912983a 	sll	r9,r9,r4
1010c598:	498cb03a 	or	r6,r9,r6
1010c59c:	300cc03a 	cmpne	r6,r6,zero
1010c5a0:	298ab03a 	or	r5,r5,r6
1010c5a4:	0013883a 	mov	r9,zero
1010c5a8:	003f1506 	br	1010c200 <__adddf3+0x268>
1010c5ac:	0101ffc4 	movi	r4,2047
1010c5b0:	113f9a1e 	bne	r2,r4,1010c41c <__adddf3+0x484>
1010c5b4:	4811883a 	mov	r8,r9
1010c5b8:	3023883a 	mov	r17,r6
1010c5bc:	1021883a 	mov	r16,r2
1010c5c0:	3825883a 	mov	r18,r7
1010c5c4:	003e9306 	br	1010c014 <__adddf3+0x7c>
1010c5c8:	8000161e 	bne	r16,zero,1010c624 <__adddf3+0x68c>
1010c5cc:	444ab03a 	or	r5,r8,r17
1010c5d0:	28005126 	beq	r5,zero,1010c718 <__adddf3+0x780>
1010c5d4:	0108303a 	nor	r4,zero,r4
1010c5d8:	20004d1e 	bne	r4,zero,1010c710 <__adddf3+0x778>
1010c5dc:	89a3883a 	add	r17,r17,r6
1010c5e0:	4253883a 	add	r9,r8,r9
1010c5e4:	898d803a 	cmpltu	r6,r17,r6
1010c5e8:	3251883a 	add	r8,r6,r9
1010c5ec:	1021883a 	mov	r16,r2
1010c5f0:	003f0806 	br	1010c214 <__adddf3+0x27c>
1010c5f4:	1000301e 	bne	r2,zero,1010c6b8 <__adddf3+0x720>
1010c5f8:	4984b03a 	or	r2,r9,r6
1010c5fc:	10007126 	beq	r2,zero,1010c7c4 <__adddf3+0x82c>
1010c600:	4811883a 	mov	r8,r9
1010c604:	3023883a 	mov	r17,r6
1010c608:	3825883a 	mov	r18,r7
1010c60c:	0401ffc4 	movi	r16,2047
1010c610:	003e8006 	br	1010c014 <__adddf3+0x7c>
1010c614:	4462b03a 	or	r17,r8,r17
1010c618:	8822c03a 	cmpne	r17,r17,zero
1010c61c:	0007883a 	mov	r3,zero
1010c620:	003f8b06 	br	1010c450 <__adddf3+0x4b8>
1010c624:	0141ffc4 	movi	r5,2047
1010c628:	11403b26 	beq	r2,r5,1010c718 <__adddf3+0x780>
1010c62c:	0109c83a 	sub	r4,zero,r4
1010c630:	42002034 	orhi	r8,r8,128
1010c634:	01400e04 	movi	r5,56
1010c638:	29006716 	blt	r5,r4,1010c7d8 <__adddf3+0x840>
1010c63c:	014007c4 	movi	r5,31
1010c640:	29007016 	blt	r5,r4,1010c804 <__adddf3+0x86c>
1010c644:	01400804 	movi	r5,32
1010c648:	290bc83a 	sub	r5,r5,r4
1010c64c:	4154983a 	sll	r10,r8,r5
1010c650:	890ed83a 	srl	r7,r17,r4
1010c654:	894a983a 	sll	r5,r17,r5
1010c658:	4108d83a 	srl	r4,r8,r4
1010c65c:	51e2b03a 	or	r17,r10,r7
1010c660:	280ac03a 	cmpne	r5,r5,zero
1010c664:	8962b03a 	or	r17,r17,r5
1010c668:	89a3883a 	add	r17,r17,r6
1010c66c:	2253883a 	add	r9,r4,r9
1010c670:	898d803a 	cmpltu	r6,r17,r6
1010c674:	3251883a 	add	r8,r6,r9
1010c678:	1021883a 	mov	r16,r2
1010c67c:	003ee506 	br	1010c214 <__adddf3+0x27c>
1010c680:	4984b03a 	or	r2,r9,r6
1010c684:	103e6326 	beq	r2,zero,1010c014 <__adddf3+0x7c>
1010c688:	8987c83a 	sub	r3,r17,r6
1010c68c:	88c9803a 	cmpltu	r4,r17,r3
1010c690:	4245c83a 	sub	r2,r8,r9
1010c694:	1105c83a 	sub	r2,r2,r4
1010c698:	1100202c 	andhi	r4,r2,128
1010c69c:	203ebb26 	beq	r4,zero,1010c18c <__adddf3+0x1f4>
1010c6a0:	3463c83a 	sub	r17,r6,r17
1010c6a4:	4a07c83a 	sub	r3,r9,r8
1010c6a8:	344d803a 	cmpltu	r6,r6,r17
1010c6ac:	1991c83a 	sub	r8,r3,r6
1010c6b0:	3825883a 	mov	r18,r7
1010c6b4:	003e5706 	br	1010c014 <__adddf3+0x7c>
1010c6b8:	4984b03a 	or	r2,r9,r6
1010c6bc:	10002e26 	beq	r2,zero,1010c778 <__adddf3+0x7e0>
1010c6c0:	4004d0fa 	srli	r2,r8,3
1010c6c4:	8822d0fa 	srli	r17,r17,3
1010c6c8:	4010977a 	slli	r8,r8,29
1010c6cc:	10c0022c 	andhi	r3,r2,8
1010c6d0:	4462b03a 	or	r17,r8,r17
1010c6d4:	18000826 	beq	r3,zero,1010c6f8 <__adddf3+0x760>
1010c6d8:	4808d0fa 	srli	r4,r9,3
1010c6dc:	20c0022c 	andhi	r3,r4,8
1010c6e0:	1800051e 	bne	r3,zero,1010c6f8 <__adddf3+0x760>
1010c6e4:	300cd0fa 	srli	r6,r6,3
1010c6e8:	4806977a 	slli	r3,r9,29
1010c6ec:	2005883a 	mov	r2,r4
1010c6f0:	3825883a 	mov	r18,r7
1010c6f4:	19a2b03a 	or	r17,r3,r6
1010c6f8:	8810d77a 	srli	r8,r17,29
1010c6fc:	100490fa 	slli	r2,r2,3
1010c700:	882290fa 	slli	r17,r17,3
1010c704:	0401ffc4 	movi	r16,2047
1010c708:	4090b03a 	or	r8,r8,r2
1010c70c:	003e4106 	br	1010c014 <__adddf3+0x7c>
1010c710:	0141ffc4 	movi	r5,2047
1010c714:	117fc71e 	bne	r2,r5,1010c634 <__adddf3+0x69c>
1010c718:	4811883a 	mov	r8,r9
1010c71c:	3023883a 	mov	r17,r6
1010c720:	1021883a 	mov	r16,r2
1010c724:	003e3b06 	br	1010c014 <__adddf3+0x7c>
1010c728:	10002f26 	beq	r2,zero,1010c7e8 <__adddf3+0x850>
1010c72c:	4984b03a 	or	r2,r9,r6
1010c730:	10001126 	beq	r2,zero,1010c778 <__adddf3+0x7e0>
1010c734:	4004d0fa 	srli	r2,r8,3
1010c738:	8822d0fa 	srli	r17,r17,3
1010c73c:	4010977a 	slli	r8,r8,29
1010c740:	10c0022c 	andhi	r3,r2,8
1010c744:	4462b03a 	or	r17,r8,r17
1010c748:	183feb26 	beq	r3,zero,1010c6f8 <__adddf3+0x760>
1010c74c:	4808d0fa 	srli	r4,r9,3
1010c750:	20c0022c 	andhi	r3,r4,8
1010c754:	183fe81e 	bne	r3,zero,1010c6f8 <__adddf3+0x760>
1010c758:	300cd0fa 	srli	r6,r6,3
1010c75c:	4806977a 	slli	r3,r9,29
1010c760:	2005883a 	mov	r2,r4
1010c764:	19a2b03a 	or	r17,r3,r6
1010c768:	003fe306 	br	1010c6f8 <__adddf3+0x760>
1010c76c:	0011883a 	mov	r8,zero
1010c770:	0005883a 	mov	r2,zero
1010c774:	003e3f06 	br	1010c074 <__adddf3+0xdc>
1010c778:	0401ffc4 	movi	r16,2047
1010c77c:	003e2506 	br	1010c014 <__adddf3+0x7c>
1010c780:	0013883a 	mov	r9,zero
1010c784:	003f8406 	br	1010c598 <__adddf3+0x600>
1010c788:	0005883a 	mov	r2,zero
1010c78c:	0007883a 	mov	r3,zero
1010c790:	003e8906 	br	1010c1b8 <__adddf3+0x220>
1010c794:	197ff804 	addi	r5,r3,-32
1010c798:	01000804 	movi	r4,32
1010c79c:	414ad83a 	srl	r5,r8,r5
1010c7a0:	19002426 	beq	r3,r4,1010c834 <__adddf3+0x89c>
1010c7a4:	01001004 	movi	r4,64
1010c7a8:	20c7c83a 	sub	r3,r4,r3
1010c7ac:	40c6983a 	sll	r3,r8,r3
1010c7b0:	1c46b03a 	or	r3,r3,r17
1010c7b4:	1806c03a 	cmpne	r3,r3,zero
1010c7b8:	28e2b03a 	or	r17,r5,r3
1010c7bc:	0007883a 	mov	r3,zero
1010c7c0:	003f2306 	br	1010c450 <__adddf3+0x4b8>
1010c7c4:	0007883a 	mov	r3,zero
1010c7c8:	5811883a 	mov	r8,r11
1010c7cc:	00bfffc4 	movi	r2,-1
1010c7d0:	0401ffc4 	movi	r16,2047
1010c7d4:	003e7806 	br	1010c1b8 <__adddf3+0x220>
1010c7d8:	4462b03a 	or	r17,r8,r17
1010c7dc:	8822c03a 	cmpne	r17,r17,zero
1010c7e0:	0009883a 	mov	r4,zero
1010c7e4:	003fa006 	br	1010c668 <__adddf3+0x6d0>
1010c7e8:	4811883a 	mov	r8,r9
1010c7ec:	3023883a 	mov	r17,r6
1010c7f0:	0401ffc4 	movi	r16,2047
1010c7f4:	003e0706 	br	1010c014 <__adddf3+0x7c>
1010c7f8:	4811883a 	mov	r8,r9
1010c7fc:	3023883a 	mov	r17,r6
1010c800:	003e0406 	br	1010c014 <__adddf3+0x7c>
1010c804:	21fff804 	addi	r7,r4,-32
1010c808:	01400804 	movi	r5,32
1010c80c:	41ced83a 	srl	r7,r8,r7
1010c810:	21400a26 	beq	r4,r5,1010c83c <__adddf3+0x8a4>
1010c814:	01401004 	movi	r5,64
1010c818:	2909c83a 	sub	r4,r5,r4
1010c81c:	4108983a 	sll	r4,r8,r4
1010c820:	2448b03a 	or	r4,r4,r17
1010c824:	2008c03a 	cmpne	r4,r4,zero
1010c828:	3922b03a 	or	r17,r7,r4
1010c82c:	0009883a 	mov	r4,zero
1010c830:	003f8d06 	br	1010c668 <__adddf3+0x6d0>
1010c834:	0007883a 	mov	r3,zero
1010c838:	003fdd06 	br	1010c7b0 <__adddf3+0x818>
1010c83c:	0009883a 	mov	r4,zero
1010c840:	003ff706 	br	1010c820 <__adddf3+0x888>

1010c844 <__divdf3>:
1010c844:	defff204 	addi	sp,sp,-56
1010c848:	dd400915 	stw	r21,36(sp)
1010c84c:	282ad53a 	srli	r21,r5,20
1010c850:	dd000815 	stw	r20,32(sp)
1010c854:	2828d7fa 	srli	r20,r5,31
1010c858:	dc000415 	stw	r16,16(sp)
1010c85c:	04000434 	movhi	r16,16
1010c860:	df000c15 	stw	fp,48(sp)
1010c864:	843fffc4 	addi	r16,r16,-1
1010c868:	dfc00d15 	stw	ra,52(sp)
1010c86c:	ddc00b15 	stw	r23,44(sp)
1010c870:	dd800a15 	stw	r22,40(sp)
1010c874:	dcc00715 	stw	r19,28(sp)
1010c878:	dc800615 	stw	r18,24(sp)
1010c87c:	dc400515 	stw	r17,20(sp)
1010c880:	ad41ffcc 	andi	r21,r21,2047
1010c884:	2c20703a 	and	r16,r5,r16
1010c888:	a7003fcc 	andi	fp,r20,255
1010c88c:	a8006126 	beq	r21,zero,1010ca14 <__divdf3+0x1d0>
1010c890:	0081ffc4 	movi	r2,2047
1010c894:	2025883a 	mov	r18,r4
1010c898:	a8803726 	beq	r21,r2,1010c978 <__divdf3+0x134>
1010c89c:	80800434 	orhi	r2,r16,16
1010c8a0:	100490fa 	slli	r2,r2,3
1010c8a4:	2020d77a 	srli	r16,r4,29
1010c8a8:	202490fa 	slli	r18,r4,3
1010c8ac:	ad7f0044 	addi	r21,r21,-1023
1010c8b0:	80a0b03a 	or	r16,r16,r2
1010c8b4:	0027883a 	mov	r19,zero
1010c8b8:	0013883a 	mov	r9,zero
1010c8bc:	3804d53a 	srli	r2,r7,20
1010c8c0:	382cd7fa 	srli	r22,r7,31
1010c8c4:	04400434 	movhi	r17,16
1010c8c8:	8c7fffc4 	addi	r17,r17,-1
1010c8cc:	1081ffcc 	andi	r2,r2,2047
1010c8d0:	3011883a 	mov	r8,r6
1010c8d4:	3c62703a 	and	r17,r7,r17
1010c8d8:	b5c03fcc 	andi	r23,r22,255
1010c8dc:	10006c26 	beq	r2,zero,1010ca90 <__divdf3+0x24c>
1010c8e0:	00c1ffc4 	movi	r3,2047
1010c8e4:	10c06426 	beq	r2,r3,1010ca78 <__divdf3+0x234>
1010c8e8:	88c00434 	orhi	r3,r17,16
1010c8ec:	180690fa 	slli	r3,r3,3
1010c8f0:	3022d77a 	srli	r17,r6,29
1010c8f4:	301090fa 	slli	r8,r6,3
1010c8f8:	10bf0044 	addi	r2,r2,-1023
1010c8fc:	88e2b03a 	or	r17,r17,r3
1010c900:	000f883a 	mov	r7,zero
1010c904:	a58cf03a 	xor	r6,r20,r22
1010c908:	3cc8b03a 	or	r4,r7,r19
1010c90c:	a8abc83a 	sub	r21,r21,r2
1010c910:	008003c4 	movi	r2,15
1010c914:	3007883a 	mov	r3,r6
1010c918:	34c03fcc 	andi	r19,r6,255
1010c91c:	11009036 	bltu	r2,r4,1010cb60 <__divdf3+0x31c>
1010c920:	200890ba 	slli	r4,r4,2
1010c924:	00840474 	movhi	r2,4113
1010c928:	10b24e04 	addi	r2,r2,-14024
1010c92c:	2089883a 	add	r4,r4,r2
1010c930:	20800017 	ldw	r2,0(r4)
1010c934:	1000683a 	jmp	r2
1010c938:	1010cb60 	cmpeqi	zero,r2,17197
1010c93c:	1010c9b0 	cmpltui	zero,r2,17190
1010c940:	1010cb50 	cmplti	zero,r2,17197
1010c944:	1010c9a4 	muli	zero,r2,17190
1010c948:	1010cb50 	cmplti	zero,r2,17197
1010c94c:	1010cb24 	muli	zero,r2,17196
1010c950:	1010cb50 	cmplti	zero,r2,17197
1010c954:	1010c9a4 	muli	zero,r2,17190
1010c958:	1010c9b0 	cmpltui	zero,r2,17190
1010c95c:	1010c9b0 	cmpltui	zero,r2,17190
1010c960:	1010cb24 	muli	zero,r2,17196
1010c964:	1010c9a4 	muli	zero,r2,17190
1010c968:	1010c994 	ori	zero,r2,17190
1010c96c:	1010c994 	ori	zero,r2,17190
1010c970:	1010c994 	ori	zero,r2,17190
1010c974:	1010ce44 	addi	zero,r2,17209
1010c978:	2404b03a 	or	r2,r4,r16
1010c97c:	1000661e 	bne	r2,zero,1010cb18 <__divdf3+0x2d4>
1010c980:	04c00204 	movi	r19,8
1010c984:	0021883a 	mov	r16,zero
1010c988:	0025883a 	mov	r18,zero
1010c98c:	02400084 	movi	r9,2
1010c990:	003fca06 	br	1010c8bc <__divdf3+0x78>
1010c994:	8023883a 	mov	r17,r16
1010c998:	9011883a 	mov	r8,r18
1010c99c:	e02f883a 	mov	r23,fp
1010c9a0:	480f883a 	mov	r7,r9
1010c9a4:	00800084 	movi	r2,2
1010c9a8:	3881311e 	bne	r7,r2,1010ce70 <__divdf3+0x62c>
1010c9ac:	b827883a 	mov	r19,r23
1010c9b0:	98c0004c 	andi	r3,r19,1
1010c9b4:	0081ffc4 	movi	r2,2047
1010c9b8:	000b883a 	mov	r5,zero
1010c9bc:	0025883a 	mov	r18,zero
1010c9c0:	1004953a 	slli	r2,r2,20
1010c9c4:	18c03fcc 	andi	r3,r3,255
1010c9c8:	04400434 	movhi	r17,16
1010c9cc:	8c7fffc4 	addi	r17,r17,-1
1010c9d0:	180697fa 	slli	r3,r3,31
1010c9d4:	2c4a703a 	and	r5,r5,r17
1010c9d8:	288ab03a 	or	r5,r5,r2
1010c9dc:	28c6b03a 	or	r3,r5,r3
1010c9e0:	9005883a 	mov	r2,r18
1010c9e4:	dfc00d17 	ldw	ra,52(sp)
1010c9e8:	df000c17 	ldw	fp,48(sp)
1010c9ec:	ddc00b17 	ldw	r23,44(sp)
1010c9f0:	dd800a17 	ldw	r22,40(sp)
1010c9f4:	dd400917 	ldw	r21,36(sp)
1010c9f8:	dd000817 	ldw	r20,32(sp)
1010c9fc:	dcc00717 	ldw	r19,28(sp)
1010ca00:	dc800617 	ldw	r18,24(sp)
1010ca04:	dc400517 	ldw	r17,20(sp)
1010ca08:	dc000417 	ldw	r16,16(sp)
1010ca0c:	dec00e04 	addi	sp,sp,56
1010ca10:	f800283a 	ret
1010ca14:	2404b03a 	or	r2,r4,r16
1010ca18:	2027883a 	mov	r19,r4
1010ca1c:	10003926 	beq	r2,zero,1010cb04 <__divdf3+0x2c0>
1010ca20:	80012e26 	beq	r16,zero,1010cedc <__divdf3+0x698>
1010ca24:	8009883a 	mov	r4,r16
1010ca28:	d9800315 	stw	r6,12(sp)
1010ca2c:	d9c00215 	stw	r7,8(sp)
1010ca30:	010e59c0 	call	1010e59c <__clzsi2>
1010ca34:	d9800317 	ldw	r6,12(sp)
1010ca38:	d9c00217 	ldw	r7,8(sp)
1010ca3c:	113ffd44 	addi	r4,r2,-11
1010ca40:	00c00704 	movi	r3,28
1010ca44:	19012116 	blt	r3,r4,1010cecc <__divdf3+0x688>
1010ca48:	00c00744 	movi	r3,29
1010ca4c:	147ffe04 	addi	r17,r2,-8
1010ca50:	1907c83a 	sub	r3,r3,r4
1010ca54:	8460983a 	sll	r16,r16,r17
1010ca58:	98c6d83a 	srl	r3,r19,r3
1010ca5c:	9c64983a 	sll	r18,r19,r17
1010ca60:	1c20b03a 	or	r16,r3,r16
1010ca64:	1080fcc4 	addi	r2,r2,1011
1010ca68:	00abc83a 	sub	r21,zero,r2
1010ca6c:	0027883a 	mov	r19,zero
1010ca70:	0013883a 	mov	r9,zero
1010ca74:	003f9106 	br	1010c8bc <__divdf3+0x78>
1010ca78:	3446b03a 	or	r3,r6,r17
1010ca7c:	18001f1e 	bne	r3,zero,1010cafc <__divdf3+0x2b8>
1010ca80:	0023883a 	mov	r17,zero
1010ca84:	0011883a 	mov	r8,zero
1010ca88:	01c00084 	movi	r7,2
1010ca8c:	003f9d06 	br	1010c904 <__divdf3+0xc0>
1010ca90:	3446b03a 	or	r3,r6,r17
1010ca94:	18001526 	beq	r3,zero,1010caec <__divdf3+0x2a8>
1010ca98:	88011b26 	beq	r17,zero,1010cf08 <__divdf3+0x6c4>
1010ca9c:	8809883a 	mov	r4,r17
1010caa0:	d9800315 	stw	r6,12(sp)
1010caa4:	da400115 	stw	r9,4(sp)
1010caa8:	010e59c0 	call	1010e59c <__clzsi2>
1010caac:	d9800317 	ldw	r6,12(sp)
1010cab0:	da400117 	ldw	r9,4(sp)
1010cab4:	113ffd44 	addi	r4,r2,-11
1010cab8:	00c00704 	movi	r3,28
1010cabc:	19010e16 	blt	r3,r4,1010cef8 <__divdf3+0x6b4>
1010cac0:	00c00744 	movi	r3,29
1010cac4:	123ffe04 	addi	r8,r2,-8
1010cac8:	1907c83a 	sub	r3,r3,r4
1010cacc:	8a22983a 	sll	r17,r17,r8
1010cad0:	30c6d83a 	srl	r3,r6,r3
1010cad4:	3210983a 	sll	r8,r6,r8
1010cad8:	1c62b03a 	or	r17,r3,r17
1010cadc:	1080fcc4 	addi	r2,r2,1011
1010cae0:	0085c83a 	sub	r2,zero,r2
1010cae4:	000f883a 	mov	r7,zero
1010cae8:	003f8606 	br	1010c904 <__divdf3+0xc0>
1010caec:	0023883a 	mov	r17,zero
1010caf0:	0011883a 	mov	r8,zero
1010caf4:	01c00044 	movi	r7,1
1010caf8:	003f8206 	br	1010c904 <__divdf3+0xc0>
1010cafc:	01c000c4 	movi	r7,3
1010cb00:	003f8006 	br	1010c904 <__divdf3+0xc0>
1010cb04:	04c00104 	movi	r19,4
1010cb08:	0021883a 	mov	r16,zero
1010cb0c:	0025883a 	mov	r18,zero
1010cb10:	02400044 	movi	r9,1
1010cb14:	003f6906 	br	1010c8bc <__divdf3+0x78>
1010cb18:	04c00304 	movi	r19,12
1010cb1c:	024000c4 	movi	r9,3
1010cb20:	003f6606 	br	1010c8bc <__divdf3+0x78>
1010cb24:	01400434 	movhi	r5,16
1010cb28:	0007883a 	mov	r3,zero
1010cb2c:	297fffc4 	addi	r5,r5,-1
1010cb30:	04bfffc4 	movi	r18,-1
1010cb34:	0081ffc4 	movi	r2,2047
1010cb38:	003fa106 	br	1010c9c0 <__divdf3+0x17c>
1010cb3c:	00c00044 	movi	r3,1
1010cb40:	1887c83a 	sub	r3,r3,r2
1010cb44:	01000e04 	movi	r4,56
1010cb48:	20c1210e 	bge	r4,r3,1010cfd0 <__divdf3+0x78c>
1010cb4c:	98c0004c 	andi	r3,r19,1
1010cb50:	0005883a 	mov	r2,zero
1010cb54:	000b883a 	mov	r5,zero
1010cb58:	0025883a 	mov	r18,zero
1010cb5c:	003f9806 	br	1010c9c0 <__divdf3+0x17c>
1010cb60:	8c00fd36 	bltu	r17,r16,1010cf58 <__divdf3+0x714>
1010cb64:	8440fb26 	beq	r16,r17,1010cf54 <__divdf3+0x710>
1010cb68:	8007883a 	mov	r3,r16
1010cb6c:	ad7fffc4 	addi	r21,r21,-1
1010cb70:	0021883a 	mov	r16,zero
1010cb74:	4004d63a 	srli	r2,r8,24
1010cb78:	8822923a 	slli	r17,r17,8
1010cb7c:	1809883a 	mov	r4,r3
1010cb80:	402c923a 	slli	r22,r8,8
1010cb84:	88b8b03a 	or	fp,r17,r2
1010cb88:	e028d43a 	srli	r20,fp,16
1010cb8c:	d8c00015 	stw	r3,0(sp)
1010cb90:	e5ffffcc 	andi	r23,fp,65535
1010cb94:	a00b883a 	mov	r5,r20
1010cb98:	0101c500 	call	10101c50 <__udivsi3>
1010cb9c:	d8c00017 	ldw	r3,0(sp)
1010cba0:	a00b883a 	mov	r5,r20
1010cba4:	d8800315 	stw	r2,12(sp)
1010cba8:	1809883a 	mov	r4,r3
1010cbac:	0101cb40 	call	10101cb4 <__umodsi3>
1010cbb0:	d9800317 	ldw	r6,12(sp)
1010cbb4:	1006943a 	slli	r3,r2,16
1010cbb8:	9004d43a 	srli	r2,r18,16
1010cbbc:	b9a3383a 	mul	r17,r23,r6
1010cbc0:	10c4b03a 	or	r2,r2,r3
1010cbc4:	1440062e 	bgeu	r2,r17,1010cbe0 <__divdf3+0x39c>
1010cbc8:	1705883a 	add	r2,r2,fp
1010cbcc:	30ffffc4 	addi	r3,r6,-1
1010cbd0:	1700ee36 	bltu	r2,fp,1010cf8c <__divdf3+0x748>
1010cbd4:	1440ed2e 	bgeu	r2,r17,1010cf8c <__divdf3+0x748>
1010cbd8:	31bfff84 	addi	r6,r6,-2
1010cbdc:	1705883a 	add	r2,r2,fp
1010cbe0:	1463c83a 	sub	r17,r2,r17
1010cbe4:	a00b883a 	mov	r5,r20
1010cbe8:	8809883a 	mov	r4,r17
1010cbec:	d9800315 	stw	r6,12(sp)
1010cbf0:	0101c500 	call	10101c50 <__udivsi3>
1010cbf4:	a00b883a 	mov	r5,r20
1010cbf8:	8809883a 	mov	r4,r17
1010cbfc:	d8800215 	stw	r2,8(sp)
1010cc00:	0101cb40 	call	10101cb4 <__umodsi3>
1010cc04:	d9c00217 	ldw	r7,8(sp)
1010cc08:	1004943a 	slli	r2,r2,16
1010cc0c:	94bfffcc 	andi	r18,r18,65535
1010cc10:	b9d1383a 	mul	r8,r23,r7
1010cc14:	90a4b03a 	or	r18,r18,r2
1010cc18:	d9800317 	ldw	r6,12(sp)
1010cc1c:	9200062e 	bgeu	r18,r8,1010cc38 <__divdf3+0x3f4>
1010cc20:	9725883a 	add	r18,r18,fp
1010cc24:	38bfffc4 	addi	r2,r7,-1
1010cc28:	9700d636 	bltu	r18,fp,1010cf84 <__divdf3+0x740>
1010cc2c:	9200d52e 	bgeu	r18,r8,1010cf84 <__divdf3+0x740>
1010cc30:	39ffff84 	addi	r7,r7,-2
1010cc34:	9725883a 	add	r18,r18,fp
1010cc38:	3004943a 	slli	r2,r6,16
1010cc3c:	b012d43a 	srli	r9,r22,16
1010cc40:	b1bfffcc 	andi	r6,r22,65535
1010cc44:	11e2b03a 	or	r17,r2,r7
1010cc48:	8806d43a 	srli	r3,r17,16
1010cc4c:	893fffcc 	andi	r4,r17,65535
1010cc50:	218b383a 	mul	r5,r4,r6
1010cc54:	30c5383a 	mul	r2,r6,r3
1010cc58:	2249383a 	mul	r4,r4,r9
1010cc5c:	280ed43a 	srli	r7,r5,16
1010cc60:	9225c83a 	sub	r18,r18,r8
1010cc64:	2089883a 	add	r4,r4,r2
1010cc68:	3909883a 	add	r4,r7,r4
1010cc6c:	1a47383a 	mul	r3,r3,r9
1010cc70:	2080022e 	bgeu	r4,r2,1010cc7c <__divdf3+0x438>
1010cc74:	00800074 	movhi	r2,1
1010cc78:	1887883a 	add	r3,r3,r2
1010cc7c:	2004d43a 	srli	r2,r4,16
1010cc80:	2008943a 	slli	r4,r4,16
1010cc84:	297fffcc 	andi	r5,r5,65535
1010cc88:	10c7883a 	add	r3,r2,r3
1010cc8c:	2149883a 	add	r4,r4,r5
1010cc90:	90c0a536 	bltu	r18,r3,1010cf28 <__divdf3+0x6e4>
1010cc94:	90c0bf26 	beq	r18,r3,1010cf94 <__divdf3+0x750>
1010cc98:	90c7c83a 	sub	r3,r18,r3
1010cc9c:	810fc83a 	sub	r7,r16,r4
1010cca0:	81e5803a 	cmpltu	r18,r16,r7
1010cca4:	1ca5c83a 	sub	r18,r3,r18
1010cca8:	e480c126 	beq	fp,r18,1010cfb0 <__divdf3+0x76c>
1010ccac:	a00b883a 	mov	r5,r20
1010ccb0:	9009883a 	mov	r4,r18
1010ccb4:	d9800315 	stw	r6,12(sp)
1010ccb8:	d9c00215 	stw	r7,8(sp)
1010ccbc:	da400115 	stw	r9,4(sp)
1010ccc0:	0101c500 	call	10101c50 <__udivsi3>
1010ccc4:	a00b883a 	mov	r5,r20
1010ccc8:	9009883a 	mov	r4,r18
1010cccc:	d8800015 	stw	r2,0(sp)
1010ccd0:	0101cb40 	call	10101cb4 <__umodsi3>
1010ccd4:	d9c00217 	ldw	r7,8(sp)
1010ccd8:	da000017 	ldw	r8,0(sp)
1010ccdc:	1006943a 	slli	r3,r2,16
1010cce0:	3804d43a 	srli	r2,r7,16
1010cce4:	ba21383a 	mul	r16,r23,r8
1010cce8:	d9800317 	ldw	r6,12(sp)
1010ccec:	10c4b03a 	or	r2,r2,r3
1010ccf0:	da400117 	ldw	r9,4(sp)
1010ccf4:	1400062e 	bgeu	r2,r16,1010cd10 <__divdf3+0x4cc>
1010ccf8:	1705883a 	add	r2,r2,fp
1010ccfc:	40ffffc4 	addi	r3,r8,-1
1010cd00:	1700ad36 	bltu	r2,fp,1010cfb8 <__divdf3+0x774>
1010cd04:	1400ac2e 	bgeu	r2,r16,1010cfb8 <__divdf3+0x774>
1010cd08:	423fff84 	addi	r8,r8,-2
1010cd0c:	1705883a 	add	r2,r2,fp
1010cd10:	1421c83a 	sub	r16,r2,r16
1010cd14:	a00b883a 	mov	r5,r20
1010cd18:	8009883a 	mov	r4,r16
1010cd1c:	d9800315 	stw	r6,12(sp)
1010cd20:	d9c00215 	stw	r7,8(sp)
1010cd24:	da000015 	stw	r8,0(sp)
1010cd28:	da400115 	stw	r9,4(sp)
1010cd2c:	0101c500 	call	10101c50 <__udivsi3>
1010cd30:	8009883a 	mov	r4,r16
1010cd34:	a00b883a 	mov	r5,r20
1010cd38:	1025883a 	mov	r18,r2
1010cd3c:	0101cb40 	call	10101cb4 <__umodsi3>
1010cd40:	d9c00217 	ldw	r7,8(sp)
1010cd44:	1004943a 	slli	r2,r2,16
1010cd48:	bcaf383a 	mul	r23,r23,r18
1010cd4c:	393fffcc 	andi	r4,r7,65535
1010cd50:	2088b03a 	or	r4,r4,r2
1010cd54:	d9800317 	ldw	r6,12(sp)
1010cd58:	da000017 	ldw	r8,0(sp)
1010cd5c:	da400117 	ldw	r9,4(sp)
1010cd60:	25c0062e 	bgeu	r4,r23,1010cd7c <__divdf3+0x538>
1010cd64:	2709883a 	add	r4,r4,fp
1010cd68:	90bfffc4 	addi	r2,r18,-1
1010cd6c:	27009436 	bltu	r4,fp,1010cfc0 <__divdf3+0x77c>
1010cd70:	25c0932e 	bgeu	r4,r23,1010cfc0 <__divdf3+0x77c>
1010cd74:	94bfff84 	addi	r18,r18,-2
1010cd78:	2709883a 	add	r4,r4,fp
1010cd7c:	4004943a 	slli	r2,r8,16
1010cd80:	25efc83a 	sub	r23,r4,r23
1010cd84:	1490b03a 	or	r8,r2,r18
1010cd88:	4008d43a 	srli	r4,r8,16
1010cd8c:	40ffffcc 	andi	r3,r8,65535
1010cd90:	30c5383a 	mul	r2,r6,r3
1010cd94:	1a47383a 	mul	r3,r3,r9
1010cd98:	310d383a 	mul	r6,r6,r4
1010cd9c:	100ad43a 	srli	r5,r2,16
1010cda0:	4913383a 	mul	r9,r9,r4
1010cda4:	1987883a 	add	r3,r3,r6
1010cda8:	28c7883a 	add	r3,r5,r3
1010cdac:	1980022e 	bgeu	r3,r6,1010cdb8 <__divdf3+0x574>
1010cdb0:	01000074 	movhi	r4,1
1010cdb4:	4913883a 	add	r9,r9,r4
1010cdb8:	1808d43a 	srli	r4,r3,16
1010cdbc:	1806943a 	slli	r3,r3,16
1010cdc0:	10bfffcc 	andi	r2,r2,65535
1010cdc4:	2253883a 	add	r9,r4,r9
1010cdc8:	1887883a 	add	r3,r3,r2
1010cdcc:	ba403836 	bltu	r23,r9,1010ceb0 <__divdf3+0x66c>
1010cdd0:	ba403626 	beq	r23,r9,1010ceac <__divdf3+0x668>
1010cdd4:	42000054 	ori	r8,r8,1
1010cdd8:	a880ffc4 	addi	r2,r21,1023
1010cddc:	00bf570e 	bge	zero,r2,1010cb3c <__divdf3+0x2f8>
1010cde0:	40c001cc 	andi	r3,r8,7
1010cde4:	18000726 	beq	r3,zero,1010ce04 <__divdf3+0x5c0>
1010cde8:	40c003cc 	andi	r3,r8,15
1010cdec:	01000104 	movi	r4,4
1010cdf0:	19000426 	beq	r3,r4,1010ce04 <__divdf3+0x5c0>
1010cdf4:	4107883a 	add	r3,r8,r4
1010cdf8:	1a11803a 	cmpltu	r8,r3,r8
1010cdfc:	8a23883a 	add	r17,r17,r8
1010ce00:	1811883a 	mov	r8,r3
1010ce04:	88c0402c 	andhi	r3,r17,256
1010ce08:	18000426 	beq	r3,zero,1010ce1c <__divdf3+0x5d8>
1010ce0c:	00ffc034 	movhi	r3,65280
1010ce10:	18ffffc4 	addi	r3,r3,-1
1010ce14:	a8810004 	addi	r2,r21,1024
1010ce18:	88e2703a 	and	r17,r17,r3
1010ce1c:	00c1ff84 	movi	r3,2046
1010ce20:	18bee316 	blt	r3,r2,1010c9b0 <__divdf3+0x16c>
1010ce24:	8824977a 	slli	r18,r17,29
1010ce28:	4010d0fa 	srli	r8,r8,3
1010ce2c:	8822927a 	slli	r17,r17,9
1010ce30:	1081ffcc 	andi	r2,r2,2047
1010ce34:	9224b03a 	or	r18,r18,r8
1010ce38:	880ad33a 	srli	r5,r17,12
1010ce3c:	98c0004c 	andi	r3,r19,1
1010ce40:	003edf06 	br	1010c9c0 <__divdf3+0x17c>
1010ce44:	8080022c 	andhi	r2,r16,8
1010ce48:	10001226 	beq	r2,zero,1010ce94 <__divdf3+0x650>
1010ce4c:	8880022c 	andhi	r2,r17,8
1010ce50:	1000101e 	bne	r2,zero,1010ce94 <__divdf3+0x650>
1010ce54:	00800434 	movhi	r2,16
1010ce58:	89400234 	orhi	r5,r17,8
1010ce5c:	10bfffc4 	addi	r2,r2,-1
1010ce60:	b007883a 	mov	r3,r22
1010ce64:	288a703a 	and	r5,r5,r2
1010ce68:	4025883a 	mov	r18,r8
1010ce6c:	003f3106 	br	1010cb34 <__divdf3+0x2f0>
1010ce70:	008000c4 	movi	r2,3
1010ce74:	3880a626 	beq	r7,r2,1010d110 <__divdf3+0x8cc>
1010ce78:	00800044 	movi	r2,1
1010ce7c:	3880521e 	bne	r7,r2,1010cfc8 <__divdf3+0x784>
1010ce80:	b807883a 	mov	r3,r23
1010ce84:	0005883a 	mov	r2,zero
1010ce88:	000b883a 	mov	r5,zero
1010ce8c:	0025883a 	mov	r18,zero
1010ce90:	003ecb06 	br	1010c9c0 <__divdf3+0x17c>
1010ce94:	00800434 	movhi	r2,16
1010ce98:	81400234 	orhi	r5,r16,8
1010ce9c:	10bfffc4 	addi	r2,r2,-1
1010cea0:	a007883a 	mov	r3,r20
1010cea4:	288a703a 	and	r5,r5,r2
1010cea8:	003f2206 	br	1010cb34 <__divdf3+0x2f0>
1010ceac:	183fca26 	beq	r3,zero,1010cdd8 <__divdf3+0x594>
1010ceb0:	e5ef883a 	add	r23,fp,r23
1010ceb4:	40bfffc4 	addi	r2,r8,-1
1010ceb8:	bf00392e 	bgeu	r23,fp,1010cfa0 <__divdf3+0x75c>
1010cebc:	1011883a 	mov	r8,r2
1010cec0:	ba7fc41e 	bne	r23,r9,1010cdd4 <__divdf3+0x590>
1010cec4:	b0ffc31e 	bne	r22,r3,1010cdd4 <__divdf3+0x590>
1010cec8:	003fc306 	br	1010cdd8 <__divdf3+0x594>
1010cecc:	143ff604 	addi	r16,r2,-40
1010ced0:	9c20983a 	sll	r16,r19,r16
1010ced4:	0025883a 	mov	r18,zero
1010ced8:	003ee206 	br	1010ca64 <__divdf3+0x220>
1010cedc:	d9800315 	stw	r6,12(sp)
1010cee0:	d9c00215 	stw	r7,8(sp)
1010cee4:	010e59c0 	call	1010e59c <__clzsi2>
1010cee8:	10800804 	addi	r2,r2,32
1010ceec:	d9c00217 	ldw	r7,8(sp)
1010cef0:	d9800317 	ldw	r6,12(sp)
1010cef4:	003ed106 	br	1010ca3c <__divdf3+0x1f8>
1010cef8:	147ff604 	addi	r17,r2,-40
1010cefc:	3462983a 	sll	r17,r6,r17
1010cf00:	0011883a 	mov	r8,zero
1010cf04:	003ef506 	br	1010cadc <__divdf3+0x298>
1010cf08:	3009883a 	mov	r4,r6
1010cf0c:	d9800315 	stw	r6,12(sp)
1010cf10:	da400115 	stw	r9,4(sp)
1010cf14:	010e59c0 	call	1010e59c <__clzsi2>
1010cf18:	10800804 	addi	r2,r2,32
1010cf1c:	da400117 	ldw	r9,4(sp)
1010cf20:	d9800317 	ldw	r6,12(sp)
1010cf24:	003ee306 	br	1010cab4 <__divdf3+0x270>
1010cf28:	85a1883a 	add	r16,r16,r22
1010cf2c:	8585803a 	cmpltu	r2,r16,r22
1010cf30:	1705883a 	add	r2,r2,fp
1010cf34:	14a5883a 	add	r18,r2,r18
1010cf38:	88bfffc4 	addi	r2,r17,-1
1010cf3c:	e4800c2e 	bgeu	fp,r18,1010cf70 <__divdf3+0x72c>
1010cf40:	90c03e36 	bltu	r18,r3,1010d03c <__divdf3+0x7f8>
1010cf44:	1c806926 	beq	r3,r18,1010d0ec <__divdf3+0x8a8>
1010cf48:	90c7c83a 	sub	r3,r18,r3
1010cf4c:	1023883a 	mov	r17,r2
1010cf50:	003f5206 	br	1010cc9c <__divdf3+0x458>
1010cf54:	923f0436 	bltu	r18,r8,1010cb68 <__divdf3+0x324>
1010cf58:	800897fa 	slli	r4,r16,31
1010cf5c:	9004d07a 	srli	r2,r18,1
1010cf60:	8006d07a 	srli	r3,r16,1
1010cf64:	902097fa 	slli	r16,r18,31
1010cf68:	20a4b03a 	or	r18,r4,r2
1010cf6c:	003f0106 	br	1010cb74 <__divdf3+0x330>
1010cf70:	e4bff51e 	bne	fp,r18,1010cf48 <__divdf3+0x704>
1010cf74:	85bff22e 	bgeu	r16,r22,1010cf40 <__divdf3+0x6fc>
1010cf78:	e0c7c83a 	sub	r3,fp,r3
1010cf7c:	1023883a 	mov	r17,r2
1010cf80:	003f4606 	br	1010cc9c <__divdf3+0x458>
1010cf84:	100f883a 	mov	r7,r2
1010cf88:	003f2b06 	br	1010cc38 <__divdf3+0x3f4>
1010cf8c:	180d883a 	mov	r6,r3
1010cf90:	003f1306 	br	1010cbe0 <__divdf3+0x39c>
1010cf94:	813fe436 	bltu	r16,r4,1010cf28 <__divdf3+0x6e4>
1010cf98:	0007883a 	mov	r3,zero
1010cf9c:	003f3f06 	br	1010cc9c <__divdf3+0x458>
1010cfa0:	ba402c36 	bltu	r23,r9,1010d054 <__divdf3+0x810>
1010cfa4:	4dc05426 	beq	r9,r23,1010d0f8 <__divdf3+0x8b4>
1010cfa8:	1011883a 	mov	r8,r2
1010cfac:	003f8906 	br	1010cdd4 <__divdf3+0x590>
1010cfb0:	023fffc4 	movi	r8,-1
1010cfb4:	003f8806 	br	1010cdd8 <__divdf3+0x594>
1010cfb8:	1811883a 	mov	r8,r3
1010cfbc:	003f5406 	br	1010cd10 <__divdf3+0x4cc>
1010cfc0:	1025883a 	mov	r18,r2
1010cfc4:	003f6d06 	br	1010cd7c <__divdf3+0x538>
1010cfc8:	b827883a 	mov	r19,r23
1010cfcc:	003f8206 	br	1010cdd8 <__divdf3+0x594>
1010cfd0:	010007c4 	movi	r4,31
1010cfd4:	20c02616 	blt	r4,r3,1010d070 <__divdf3+0x82c>
1010cfd8:	00800804 	movi	r2,32
1010cfdc:	10c5c83a 	sub	r2,r2,r3
1010cfe0:	888a983a 	sll	r5,r17,r2
1010cfe4:	40c8d83a 	srl	r4,r8,r3
1010cfe8:	4084983a 	sll	r2,r8,r2
1010cfec:	88e2d83a 	srl	r17,r17,r3
1010cff0:	2906b03a 	or	r3,r5,r4
1010cff4:	1004c03a 	cmpne	r2,r2,zero
1010cff8:	1886b03a 	or	r3,r3,r2
1010cffc:	188001cc 	andi	r2,r3,7
1010d000:	10000726 	beq	r2,zero,1010d020 <__divdf3+0x7dc>
1010d004:	188003cc 	andi	r2,r3,15
1010d008:	01000104 	movi	r4,4
1010d00c:	11000426 	beq	r2,r4,1010d020 <__divdf3+0x7dc>
1010d010:	1805883a 	mov	r2,r3
1010d014:	10c00104 	addi	r3,r2,4
1010d018:	1885803a 	cmpltu	r2,r3,r2
1010d01c:	88a3883a 	add	r17,r17,r2
1010d020:	8880202c 	andhi	r2,r17,128
1010d024:	10002726 	beq	r2,zero,1010d0c4 <__divdf3+0x880>
1010d028:	98c0004c 	andi	r3,r19,1
1010d02c:	00800044 	movi	r2,1
1010d030:	000b883a 	mov	r5,zero
1010d034:	0025883a 	mov	r18,zero
1010d038:	003e6106 	br	1010c9c0 <__divdf3+0x17c>
1010d03c:	85a1883a 	add	r16,r16,r22
1010d040:	8585803a 	cmpltu	r2,r16,r22
1010d044:	1705883a 	add	r2,r2,fp
1010d048:	14a5883a 	add	r18,r2,r18
1010d04c:	8c7fff84 	addi	r17,r17,-2
1010d050:	003f1106 	br	1010cc98 <__divdf3+0x454>
1010d054:	b589883a 	add	r4,r22,r22
1010d058:	25ad803a 	cmpltu	r22,r4,r22
1010d05c:	b739883a 	add	fp,r22,fp
1010d060:	40bfff84 	addi	r2,r8,-2
1010d064:	bf2f883a 	add	r23,r23,fp
1010d068:	202d883a 	mov	r22,r4
1010d06c:	003f9306 	br	1010cebc <__divdf3+0x678>
1010d070:	013ff844 	movi	r4,-31
1010d074:	2085c83a 	sub	r2,r4,r2
1010d078:	8888d83a 	srl	r4,r17,r2
1010d07c:	00800804 	movi	r2,32
1010d080:	18802126 	beq	r3,r2,1010d108 <__divdf3+0x8c4>
1010d084:	00801004 	movi	r2,64
1010d088:	10c5c83a 	sub	r2,r2,r3
1010d08c:	8884983a 	sll	r2,r17,r2
1010d090:	1204b03a 	or	r2,r2,r8
1010d094:	1004c03a 	cmpne	r2,r2,zero
1010d098:	2084b03a 	or	r2,r4,r2
1010d09c:	144001cc 	andi	r17,r2,7
1010d0a0:	88000d1e 	bne	r17,zero,1010d0d8 <__divdf3+0x894>
1010d0a4:	000b883a 	mov	r5,zero
1010d0a8:	1024d0fa 	srli	r18,r2,3
1010d0ac:	98c0004c 	andi	r3,r19,1
1010d0b0:	0005883a 	mov	r2,zero
1010d0b4:	9464b03a 	or	r18,r18,r17
1010d0b8:	003e4106 	br	1010c9c0 <__divdf3+0x17c>
1010d0bc:	1007883a 	mov	r3,r2
1010d0c0:	0023883a 	mov	r17,zero
1010d0c4:	880a927a 	slli	r5,r17,9
1010d0c8:	1805883a 	mov	r2,r3
1010d0cc:	8822977a 	slli	r17,r17,29
1010d0d0:	280ad33a 	srli	r5,r5,12
1010d0d4:	003ff406 	br	1010d0a8 <__divdf3+0x864>
1010d0d8:	10c003cc 	andi	r3,r2,15
1010d0dc:	01000104 	movi	r4,4
1010d0e0:	193ff626 	beq	r3,r4,1010d0bc <__divdf3+0x878>
1010d0e4:	0023883a 	mov	r17,zero
1010d0e8:	003fca06 	br	1010d014 <__divdf3+0x7d0>
1010d0ec:	813fd336 	bltu	r16,r4,1010d03c <__divdf3+0x7f8>
1010d0f0:	1023883a 	mov	r17,r2
1010d0f4:	003fa806 	br	1010cf98 <__divdf3+0x754>
1010d0f8:	b0ffd636 	bltu	r22,r3,1010d054 <__divdf3+0x810>
1010d0fc:	1011883a 	mov	r8,r2
1010d100:	b0ff341e 	bne	r22,r3,1010cdd4 <__divdf3+0x590>
1010d104:	003f3406 	br	1010cdd8 <__divdf3+0x594>
1010d108:	0005883a 	mov	r2,zero
1010d10c:	003fe006 	br	1010d090 <__divdf3+0x84c>
1010d110:	00800434 	movhi	r2,16
1010d114:	89400234 	orhi	r5,r17,8
1010d118:	10bfffc4 	addi	r2,r2,-1
1010d11c:	b807883a 	mov	r3,r23
1010d120:	288a703a 	and	r5,r5,r2
1010d124:	4025883a 	mov	r18,r8
1010d128:	003e8206 	br	1010cb34 <__divdf3+0x2f0>

1010d12c <__eqdf2>:
1010d12c:	2804d53a 	srli	r2,r5,20
1010d130:	3806d53a 	srli	r3,r7,20
1010d134:	02000434 	movhi	r8,16
1010d138:	423fffc4 	addi	r8,r8,-1
1010d13c:	1081ffcc 	andi	r2,r2,2047
1010d140:	0281ffc4 	movi	r10,2047
1010d144:	2a12703a 	and	r9,r5,r8
1010d148:	18c1ffcc 	andi	r3,r3,2047
1010d14c:	3a10703a 	and	r8,r7,r8
1010d150:	280ad7fa 	srli	r5,r5,31
1010d154:	380ed7fa 	srli	r7,r7,31
1010d158:	12801026 	beq	r2,r10,1010d19c <__eqdf2+0x70>
1010d15c:	0281ffc4 	movi	r10,2047
1010d160:	1a800a26 	beq	r3,r10,1010d18c <__eqdf2+0x60>
1010d164:	10c00226 	beq	r2,r3,1010d170 <__eqdf2+0x44>
1010d168:	00800044 	movi	r2,1
1010d16c:	f800283a 	ret
1010d170:	4a3ffd1e 	bne	r9,r8,1010d168 <__eqdf2+0x3c>
1010d174:	21bffc1e 	bne	r4,r6,1010d168 <__eqdf2+0x3c>
1010d178:	29c00c26 	beq	r5,r7,1010d1ac <__eqdf2+0x80>
1010d17c:	103ffa1e 	bne	r2,zero,1010d168 <__eqdf2+0x3c>
1010d180:	2244b03a 	or	r2,r4,r9
1010d184:	1004c03a 	cmpne	r2,r2,zero
1010d188:	f800283a 	ret
1010d18c:	3214b03a 	or	r10,r6,r8
1010d190:	503ff426 	beq	r10,zero,1010d164 <__eqdf2+0x38>
1010d194:	00800044 	movi	r2,1
1010d198:	f800283a 	ret
1010d19c:	2254b03a 	or	r10,r4,r9
1010d1a0:	503fee26 	beq	r10,zero,1010d15c <__eqdf2+0x30>
1010d1a4:	00800044 	movi	r2,1
1010d1a8:	f800283a 	ret
1010d1ac:	0005883a 	mov	r2,zero
1010d1b0:	f800283a 	ret

1010d1b4 <__gedf2>:
1010d1b4:	2804d53a 	srli	r2,r5,20
1010d1b8:	3806d53a 	srli	r3,r7,20
1010d1bc:	02000434 	movhi	r8,16
1010d1c0:	423fffc4 	addi	r8,r8,-1
1010d1c4:	1081ffcc 	andi	r2,r2,2047
1010d1c8:	0241ffc4 	movi	r9,2047
1010d1cc:	2a14703a 	and	r10,r5,r8
1010d1d0:	18c1ffcc 	andi	r3,r3,2047
1010d1d4:	3a10703a 	and	r8,r7,r8
1010d1d8:	280ad7fa 	srli	r5,r5,31
1010d1dc:	380ed7fa 	srli	r7,r7,31
1010d1e0:	12401d26 	beq	r2,r9,1010d258 <__gedf2+0xa4>
1010d1e4:	0241ffc4 	movi	r9,2047
1010d1e8:	1a401226 	beq	r3,r9,1010d234 <__gedf2+0x80>
1010d1ec:	1000081e 	bne	r2,zero,1010d210 <__gedf2+0x5c>
1010d1f0:	2296b03a 	or	r11,r4,r10
1010d1f4:	5813003a 	cmpeq	r9,r11,zero
1010d1f8:	1800091e 	bne	r3,zero,1010d220 <__gedf2+0x6c>
1010d1fc:	3218b03a 	or	r12,r6,r8
1010d200:	6000071e 	bne	r12,zero,1010d220 <__gedf2+0x6c>
1010d204:	0005883a 	mov	r2,zero
1010d208:	5800101e 	bne	r11,zero,1010d24c <__gedf2+0x98>
1010d20c:	f800283a 	ret
1010d210:	18000c1e 	bne	r3,zero,1010d244 <__gedf2+0x90>
1010d214:	3212b03a 	or	r9,r6,r8
1010d218:	48000c26 	beq	r9,zero,1010d24c <__gedf2+0x98>
1010d21c:	0013883a 	mov	r9,zero
1010d220:	39c03fcc 	andi	r7,r7,255
1010d224:	48000826 	beq	r9,zero,1010d248 <__gedf2+0x94>
1010d228:	38000926 	beq	r7,zero,1010d250 <__gedf2+0x9c>
1010d22c:	00800044 	movi	r2,1
1010d230:	f800283a 	ret
1010d234:	3212b03a 	or	r9,r6,r8
1010d238:	483fec26 	beq	r9,zero,1010d1ec <__gedf2+0x38>
1010d23c:	00bfff84 	movi	r2,-2
1010d240:	f800283a 	ret
1010d244:	39c03fcc 	andi	r7,r7,255
1010d248:	29c00626 	beq	r5,r7,1010d264 <__gedf2+0xb0>
1010d24c:	283ff726 	beq	r5,zero,1010d22c <__gedf2+0x78>
1010d250:	00bfffc4 	movi	r2,-1
1010d254:	f800283a 	ret
1010d258:	2292b03a 	or	r9,r4,r10
1010d25c:	483fe126 	beq	r9,zero,1010d1e4 <__gedf2+0x30>
1010d260:	003ff606 	br	1010d23c <__gedf2+0x88>
1010d264:	18bff916 	blt	r3,r2,1010d24c <__gedf2+0x98>
1010d268:	10c00316 	blt	r2,r3,1010d278 <__gedf2+0xc4>
1010d26c:	42bff736 	bltu	r8,r10,1010d24c <__gedf2+0x98>
1010d270:	52000326 	beq	r10,r8,1010d280 <__gedf2+0xcc>
1010d274:	5200042e 	bgeu	r10,r8,1010d288 <__gedf2+0xd4>
1010d278:	283fec1e 	bne	r5,zero,1010d22c <__gedf2+0x78>
1010d27c:	003ff406 	br	1010d250 <__gedf2+0x9c>
1010d280:	313ff236 	bltu	r6,r4,1010d24c <__gedf2+0x98>
1010d284:	21bffc36 	bltu	r4,r6,1010d278 <__gedf2+0xc4>
1010d288:	0005883a 	mov	r2,zero
1010d28c:	f800283a 	ret

1010d290 <__ledf2>:
1010d290:	2804d53a 	srli	r2,r5,20
1010d294:	3810d53a 	srli	r8,r7,20
1010d298:	00c00434 	movhi	r3,16
1010d29c:	18ffffc4 	addi	r3,r3,-1
1010d2a0:	1081ffcc 	andi	r2,r2,2047
1010d2a4:	0241ffc4 	movi	r9,2047
1010d2a8:	28d4703a 	and	r10,r5,r3
1010d2ac:	4201ffcc 	andi	r8,r8,2047
1010d2b0:	38c6703a 	and	r3,r7,r3
1010d2b4:	280ad7fa 	srli	r5,r5,31
1010d2b8:	380ed7fa 	srli	r7,r7,31
1010d2bc:	12401f26 	beq	r2,r9,1010d33c <__ledf2+0xac>
1010d2c0:	0241ffc4 	movi	r9,2047
1010d2c4:	42401426 	beq	r8,r9,1010d318 <__ledf2+0x88>
1010d2c8:	1000091e 	bne	r2,zero,1010d2f0 <__ledf2+0x60>
1010d2cc:	2296b03a 	or	r11,r4,r10
1010d2d0:	5813003a 	cmpeq	r9,r11,zero
1010d2d4:	29403fcc 	andi	r5,r5,255
1010d2d8:	40000a1e 	bne	r8,zero,1010d304 <__ledf2+0x74>
1010d2dc:	30d8b03a 	or	r12,r6,r3
1010d2e0:	6000081e 	bne	r12,zero,1010d304 <__ledf2+0x74>
1010d2e4:	0005883a 	mov	r2,zero
1010d2e8:	5800111e 	bne	r11,zero,1010d330 <__ledf2+0xa0>
1010d2ec:	f800283a 	ret
1010d2f0:	29403fcc 	andi	r5,r5,255
1010d2f4:	40000c1e 	bne	r8,zero,1010d328 <__ledf2+0x98>
1010d2f8:	30d2b03a 	or	r9,r6,r3
1010d2fc:	48000c26 	beq	r9,zero,1010d330 <__ledf2+0xa0>
1010d300:	0013883a 	mov	r9,zero
1010d304:	39c03fcc 	andi	r7,r7,255
1010d308:	48000826 	beq	r9,zero,1010d32c <__ledf2+0x9c>
1010d30c:	38001126 	beq	r7,zero,1010d354 <__ledf2+0xc4>
1010d310:	00800044 	movi	r2,1
1010d314:	f800283a 	ret
1010d318:	30d2b03a 	or	r9,r6,r3
1010d31c:	483fea26 	beq	r9,zero,1010d2c8 <__ledf2+0x38>
1010d320:	00800084 	movi	r2,2
1010d324:	f800283a 	ret
1010d328:	39c03fcc 	andi	r7,r7,255
1010d32c:	39400726 	beq	r7,r5,1010d34c <__ledf2+0xbc>
1010d330:	2800081e 	bne	r5,zero,1010d354 <__ledf2+0xc4>
1010d334:	00800044 	movi	r2,1
1010d338:	f800283a 	ret
1010d33c:	2292b03a 	or	r9,r4,r10
1010d340:	483fdf26 	beq	r9,zero,1010d2c0 <__ledf2+0x30>
1010d344:	00800084 	movi	r2,2
1010d348:	f800283a 	ret
1010d34c:	4080030e 	bge	r8,r2,1010d35c <__ledf2+0xcc>
1010d350:	383fef26 	beq	r7,zero,1010d310 <__ledf2+0x80>
1010d354:	00bfffc4 	movi	r2,-1
1010d358:	f800283a 	ret
1010d35c:	123feb16 	blt	r2,r8,1010d30c <__ledf2+0x7c>
1010d360:	1abff336 	bltu	r3,r10,1010d330 <__ledf2+0xa0>
1010d364:	50c00326 	beq	r10,r3,1010d374 <__ledf2+0xe4>
1010d368:	50c0042e 	bgeu	r10,r3,1010d37c <__ledf2+0xec>
1010d36c:	283fe81e 	bne	r5,zero,1010d310 <__ledf2+0x80>
1010d370:	003ff806 	br	1010d354 <__ledf2+0xc4>
1010d374:	313fee36 	bltu	r6,r4,1010d330 <__ledf2+0xa0>
1010d378:	21bffc36 	bltu	r4,r6,1010d36c <__ledf2+0xdc>
1010d37c:	0005883a 	mov	r2,zero
1010d380:	f800283a 	ret

1010d384 <__muldf3>:
1010d384:	defff304 	addi	sp,sp,-52
1010d388:	2804d53a 	srli	r2,r5,20
1010d38c:	dd800915 	stw	r22,36(sp)
1010d390:	282cd7fa 	srli	r22,r5,31
1010d394:	dc000315 	stw	r16,12(sp)
1010d398:	04000434 	movhi	r16,16
1010d39c:	dd400815 	stw	r21,32(sp)
1010d3a0:	dc800515 	stw	r18,20(sp)
1010d3a4:	843fffc4 	addi	r16,r16,-1
1010d3a8:	dfc00c15 	stw	ra,48(sp)
1010d3ac:	df000b15 	stw	fp,44(sp)
1010d3b0:	ddc00a15 	stw	r23,40(sp)
1010d3b4:	dd000715 	stw	r20,28(sp)
1010d3b8:	dcc00615 	stw	r19,24(sp)
1010d3bc:	dc400415 	stw	r17,16(sp)
1010d3c0:	1481ffcc 	andi	r18,r2,2047
1010d3c4:	2c20703a 	and	r16,r5,r16
1010d3c8:	b02b883a 	mov	r21,r22
1010d3cc:	b2403fcc 	andi	r9,r22,255
1010d3d0:	90006026 	beq	r18,zero,1010d554 <__muldf3+0x1d0>
1010d3d4:	0081ffc4 	movi	r2,2047
1010d3d8:	2029883a 	mov	r20,r4
1010d3dc:	90803626 	beq	r18,r2,1010d4b8 <__muldf3+0x134>
1010d3e0:	80800434 	orhi	r2,r16,16
1010d3e4:	100490fa 	slli	r2,r2,3
1010d3e8:	2020d77a 	srli	r16,r4,29
1010d3ec:	202890fa 	slli	r20,r4,3
1010d3f0:	94bf0044 	addi	r18,r18,-1023
1010d3f4:	80a0b03a 	or	r16,r16,r2
1010d3f8:	0027883a 	mov	r19,zero
1010d3fc:	0039883a 	mov	fp,zero
1010d400:	3804d53a 	srli	r2,r7,20
1010d404:	382ed7fa 	srli	r23,r7,31
1010d408:	04400434 	movhi	r17,16
1010d40c:	8c7fffc4 	addi	r17,r17,-1
1010d410:	1081ffcc 	andi	r2,r2,2047
1010d414:	3011883a 	mov	r8,r6
1010d418:	3c62703a 	and	r17,r7,r17
1010d41c:	ba803fcc 	andi	r10,r23,255
1010d420:	10006d26 	beq	r2,zero,1010d5d8 <__muldf3+0x254>
1010d424:	00c1ffc4 	movi	r3,2047
1010d428:	10c06526 	beq	r2,r3,1010d5c0 <__muldf3+0x23c>
1010d42c:	88c00434 	orhi	r3,r17,16
1010d430:	180690fa 	slli	r3,r3,3
1010d434:	3022d77a 	srli	r17,r6,29
1010d438:	301090fa 	slli	r8,r6,3
1010d43c:	10bf0044 	addi	r2,r2,-1023
1010d440:	88e2b03a 	or	r17,r17,r3
1010d444:	000b883a 	mov	r5,zero
1010d448:	9085883a 	add	r2,r18,r2
1010d44c:	2cc8b03a 	or	r4,r5,r19
1010d450:	00c003c4 	movi	r3,15
1010d454:	bdacf03a 	xor	r22,r23,r22
1010d458:	12c00044 	addi	r11,r2,1
1010d45c:	19009936 	bltu	r3,r4,1010d6c4 <__muldf3+0x340>
1010d460:	200890ba 	slli	r4,r4,2
1010d464:	00c40474 	movhi	r3,4113
1010d468:	18f51e04 	addi	r3,r3,-11144
1010d46c:	20c9883a 	add	r4,r4,r3
1010d470:	20c00017 	ldw	r3,0(r4)
1010d474:	1800683a 	jmp	r3
1010d478:	1010d6c4 	addi	zero,r2,17243
1010d47c:	1010d4d8 	cmpnei	zero,r2,17235
1010d480:	1010d4d8 	cmpnei	zero,r2,17235
1010d484:	1010d4d4 	ori	zero,r2,17235
1010d488:	1010d6a0 	cmpeqi	zero,r2,17242
1010d48c:	1010d6a0 	cmpeqi	zero,r2,17242
1010d490:	1010d688 	cmpgei	zero,r2,17242
1010d494:	1010d4d4 	ori	zero,r2,17235
1010d498:	1010d6a0 	cmpeqi	zero,r2,17242
1010d49c:	1010d688 	cmpgei	zero,r2,17242
1010d4a0:	1010d6a0 	cmpeqi	zero,r2,17242
1010d4a4:	1010d4d4 	ori	zero,r2,17235
1010d4a8:	1010d6b0 	cmpltui	zero,r2,17242
1010d4ac:	1010d6b0 	cmpltui	zero,r2,17242
1010d4b0:	1010d6b0 	cmpltui	zero,r2,17242
1010d4b4:	1010d8cc 	andi	zero,r2,17251
1010d4b8:	2404b03a 	or	r2,r4,r16
1010d4bc:	10006f1e 	bne	r2,zero,1010d67c <__muldf3+0x2f8>
1010d4c0:	04c00204 	movi	r19,8
1010d4c4:	0021883a 	mov	r16,zero
1010d4c8:	0029883a 	mov	r20,zero
1010d4cc:	07000084 	movi	fp,2
1010d4d0:	003fcb06 	br	1010d400 <__muldf3+0x7c>
1010d4d4:	502d883a 	mov	r22,r10
1010d4d8:	00800084 	movi	r2,2
1010d4dc:	28805726 	beq	r5,r2,1010d63c <__muldf3+0x2b8>
1010d4e0:	008000c4 	movi	r2,3
1010d4e4:	28816626 	beq	r5,r2,1010da80 <__muldf3+0x6fc>
1010d4e8:	00800044 	movi	r2,1
1010d4ec:	2881411e 	bne	r5,r2,1010d9f4 <__muldf3+0x670>
1010d4f0:	b02b883a 	mov	r21,r22
1010d4f4:	0005883a 	mov	r2,zero
1010d4f8:	000b883a 	mov	r5,zero
1010d4fc:	0029883a 	mov	r20,zero
1010d500:	1004953a 	slli	r2,r2,20
1010d504:	a8c03fcc 	andi	r3,r21,255
1010d508:	04400434 	movhi	r17,16
1010d50c:	8c7fffc4 	addi	r17,r17,-1
1010d510:	180697fa 	slli	r3,r3,31
1010d514:	2c4a703a 	and	r5,r5,r17
1010d518:	288ab03a 	or	r5,r5,r2
1010d51c:	28c6b03a 	or	r3,r5,r3
1010d520:	a005883a 	mov	r2,r20
1010d524:	dfc00c17 	ldw	ra,48(sp)
1010d528:	df000b17 	ldw	fp,44(sp)
1010d52c:	ddc00a17 	ldw	r23,40(sp)
1010d530:	dd800917 	ldw	r22,36(sp)
1010d534:	dd400817 	ldw	r21,32(sp)
1010d538:	dd000717 	ldw	r20,28(sp)
1010d53c:	dcc00617 	ldw	r19,24(sp)
1010d540:	dc800517 	ldw	r18,20(sp)
1010d544:	dc400417 	ldw	r17,16(sp)
1010d548:	dc000317 	ldw	r16,12(sp)
1010d54c:	dec00d04 	addi	sp,sp,52
1010d550:	f800283a 	ret
1010d554:	2404b03a 	or	r2,r4,r16
1010d558:	2027883a 	mov	r19,r4
1010d55c:	10004226 	beq	r2,zero,1010d668 <__muldf3+0x2e4>
1010d560:	8000fc26 	beq	r16,zero,1010d954 <__muldf3+0x5d0>
1010d564:	8009883a 	mov	r4,r16
1010d568:	d9800215 	stw	r6,8(sp)
1010d56c:	d9c00015 	stw	r7,0(sp)
1010d570:	da400115 	stw	r9,4(sp)
1010d574:	010e59c0 	call	1010e59c <__clzsi2>
1010d578:	d9800217 	ldw	r6,8(sp)
1010d57c:	d9c00017 	ldw	r7,0(sp)
1010d580:	da400117 	ldw	r9,4(sp)
1010d584:	113ffd44 	addi	r4,r2,-11
1010d588:	00c00704 	movi	r3,28
1010d58c:	1900ed16 	blt	r3,r4,1010d944 <__muldf3+0x5c0>
1010d590:	00c00744 	movi	r3,29
1010d594:	147ffe04 	addi	r17,r2,-8
1010d598:	1907c83a 	sub	r3,r3,r4
1010d59c:	8460983a 	sll	r16,r16,r17
1010d5a0:	98c6d83a 	srl	r3,r19,r3
1010d5a4:	9c68983a 	sll	r20,r19,r17
1010d5a8:	1c20b03a 	or	r16,r3,r16
1010d5ac:	1080fcc4 	addi	r2,r2,1011
1010d5b0:	00a5c83a 	sub	r18,zero,r2
1010d5b4:	0027883a 	mov	r19,zero
1010d5b8:	0039883a 	mov	fp,zero
1010d5bc:	003f9006 	br	1010d400 <__muldf3+0x7c>
1010d5c0:	3446b03a 	or	r3,r6,r17
1010d5c4:	1800261e 	bne	r3,zero,1010d660 <__muldf3+0x2dc>
1010d5c8:	0023883a 	mov	r17,zero
1010d5cc:	0011883a 	mov	r8,zero
1010d5d0:	01400084 	movi	r5,2
1010d5d4:	003f9c06 	br	1010d448 <__muldf3+0xc4>
1010d5d8:	3446b03a 	or	r3,r6,r17
1010d5dc:	18001c26 	beq	r3,zero,1010d650 <__muldf3+0x2cc>
1010d5e0:	8800ce26 	beq	r17,zero,1010d91c <__muldf3+0x598>
1010d5e4:	8809883a 	mov	r4,r17
1010d5e8:	d9800215 	stw	r6,8(sp)
1010d5ec:	da400115 	stw	r9,4(sp)
1010d5f0:	da800015 	stw	r10,0(sp)
1010d5f4:	010e59c0 	call	1010e59c <__clzsi2>
1010d5f8:	d9800217 	ldw	r6,8(sp)
1010d5fc:	da400117 	ldw	r9,4(sp)
1010d600:	da800017 	ldw	r10,0(sp)
1010d604:	113ffd44 	addi	r4,r2,-11
1010d608:	00c00704 	movi	r3,28
1010d60c:	1900bf16 	blt	r3,r4,1010d90c <__muldf3+0x588>
1010d610:	00c00744 	movi	r3,29
1010d614:	123ffe04 	addi	r8,r2,-8
1010d618:	1907c83a 	sub	r3,r3,r4
1010d61c:	8a22983a 	sll	r17,r17,r8
1010d620:	30c6d83a 	srl	r3,r6,r3
1010d624:	3210983a 	sll	r8,r6,r8
1010d628:	1c62b03a 	or	r17,r3,r17
1010d62c:	1080fcc4 	addi	r2,r2,1011
1010d630:	0085c83a 	sub	r2,zero,r2
1010d634:	000b883a 	mov	r5,zero
1010d638:	003f8306 	br	1010d448 <__muldf3+0xc4>
1010d63c:	b02b883a 	mov	r21,r22
1010d640:	0081ffc4 	movi	r2,2047
1010d644:	000b883a 	mov	r5,zero
1010d648:	0029883a 	mov	r20,zero
1010d64c:	003fac06 	br	1010d500 <__muldf3+0x17c>
1010d650:	0023883a 	mov	r17,zero
1010d654:	0011883a 	mov	r8,zero
1010d658:	01400044 	movi	r5,1
1010d65c:	003f7a06 	br	1010d448 <__muldf3+0xc4>
1010d660:	014000c4 	movi	r5,3
1010d664:	003f7806 	br	1010d448 <__muldf3+0xc4>
1010d668:	04c00104 	movi	r19,4
1010d66c:	0021883a 	mov	r16,zero
1010d670:	0029883a 	mov	r20,zero
1010d674:	07000044 	movi	fp,1
1010d678:	003f6106 	br	1010d400 <__muldf3+0x7c>
1010d67c:	04c00304 	movi	r19,12
1010d680:	070000c4 	movi	fp,3
1010d684:	003f5e06 	br	1010d400 <__muldf3+0x7c>
1010d688:	01400434 	movhi	r5,16
1010d68c:	002b883a 	mov	r21,zero
1010d690:	297fffc4 	addi	r5,r5,-1
1010d694:	053fffc4 	movi	r20,-1
1010d698:	0081ffc4 	movi	r2,2047
1010d69c:	003f9806 	br	1010d500 <__muldf3+0x17c>
1010d6a0:	8023883a 	mov	r17,r16
1010d6a4:	a011883a 	mov	r8,r20
1010d6a8:	e00b883a 	mov	r5,fp
1010d6ac:	003f8a06 	br	1010d4d8 <__muldf3+0x154>
1010d6b0:	8023883a 	mov	r17,r16
1010d6b4:	a011883a 	mov	r8,r20
1010d6b8:	482d883a 	mov	r22,r9
1010d6bc:	e00b883a 	mov	r5,fp
1010d6c0:	003f8506 	br	1010d4d8 <__muldf3+0x154>
1010d6c4:	a00ad43a 	srli	r5,r20,16
1010d6c8:	401ad43a 	srli	r13,r8,16
1010d6cc:	a53fffcc 	andi	r20,r20,65535
1010d6d0:	423fffcc 	andi	r8,r8,65535
1010d6d4:	4519383a 	mul	r12,r8,r20
1010d6d8:	4147383a 	mul	r3,r8,r5
1010d6dc:	6d09383a 	mul	r4,r13,r20
1010d6e0:	600cd43a 	srli	r6,r12,16
1010d6e4:	2b5d383a 	mul	r14,r5,r13
1010d6e8:	20c9883a 	add	r4,r4,r3
1010d6ec:	310d883a 	add	r6,r6,r4
1010d6f0:	30c0022e 	bgeu	r6,r3,1010d6fc <__muldf3+0x378>
1010d6f4:	00c00074 	movhi	r3,1
1010d6f8:	70dd883a 	add	r14,r14,r3
1010d6fc:	8826d43a 	srli	r19,r17,16
1010d700:	8bffffcc 	andi	r15,r17,65535
1010d704:	7d23383a 	mul	r17,r15,r20
1010d708:	7949383a 	mul	r4,r15,r5
1010d70c:	9d29383a 	mul	r20,r19,r20
1010d710:	8814d43a 	srli	r10,r17,16
1010d714:	3012943a 	slli	r9,r6,16
1010d718:	a129883a 	add	r20,r20,r4
1010d71c:	633fffcc 	andi	r12,r12,65535
1010d720:	5515883a 	add	r10,r10,r20
1010d724:	3006d43a 	srli	r3,r6,16
1010d728:	4b13883a 	add	r9,r9,r12
1010d72c:	2ccb383a 	mul	r5,r5,r19
1010d730:	5100022e 	bgeu	r10,r4,1010d73c <__muldf3+0x3b8>
1010d734:	01000074 	movhi	r4,1
1010d738:	290b883a 	add	r5,r5,r4
1010d73c:	802ad43a 	srli	r21,r16,16
1010d740:	843fffcc 	andi	r16,r16,65535
1010d744:	440d383a 	mul	r6,r8,r16
1010d748:	4565383a 	mul	r18,r8,r21
1010d74c:	8349383a 	mul	r4,r16,r13
1010d750:	500e943a 	slli	r7,r10,16
1010d754:	3010d43a 	srli	r8,r6,16
1010d758:	5028d43a 	srli	r20,r10,16
1010d75c:	2489883a 	add	r4,r4,r18
1010d760:	8abfffcc 	andi	r10,r17,65535
1010d764:	3a95883a 	add	r10,r7,r10
1010d768:	4119883a 	add	r12,r8,r4
1010d76c:	a169883a 	add	r20,r20,r5
1010d770:	1a87883a 	add	r3,r3,r10
1010d774:	6d5b383a 	mul	r13,r13,r21
1010d778:	6480022e 	bgeu	r12,r18,1010d784 <__muldf3+0x400>
1010d77c:	01000074 	movhi	r4,1
1010d780:	691b883a 	add	r13,r13,r4
1010d784:	7c25383a 	mul	r18,r15,r16
1010d788:	7d4b383a 	mul	r5,r15,r21
1010d78c:	84cf383a 	mul	r7,r16,r19
1010d790:	901ed43a 	srli	r15,r18,16
1010d794:	6008d43a 	srli	r4,r12,16
1010d798:	6010943a 	slli	r8,r12,16
1010d79c:	394f883a 	add	r7,r7,r5
1010d7a0:	333fffcc 	andi	r12,r6,65535
1010d7a4:	79df883a 	add	r15,r15,r7
1010d7a8:	235b883a 	add	r13,r4,r13
1010d7ac:	9d63383a 	mul	r17,r19,r21
1010d7b0:	4309883a 	add	r4,r8,r12
1010d7b4:	7940022e 	bgeu	r15,r5,1010d7c0 <__muldf3+0x43c>
1010d7b8:	01400074 	movhi	r5,1
1010d7bc:	8963883a 	add	r17,r17,r5
1010d7c0:	780a943a 	slli	r5,r15,16
1010d7c4:	91bfffcc 	andi	r6,r18,65535
1010d7c8:	70c7883a 	add	r3,r14,r3
1010d7cc:	298d883a 	add	r6,r5,r6
1010d7d0:	1a8f803a 	cmpltu	r7,r3,r10
1010d7d4:	350b883a 	add	r5,r6,r20
1010d7d8:	20c7883a 	add	r3,r4,r3
1010d7dc:	3955883a 	add	r10,r7,r5
1010d7e0:	1909803a 	cmpltu	r4,r3,r4
1010d7e4:	6a91883a 	add	r8,r13,r10
1010d7e8:	780cd43a 	srli	r6,r15,16
1010d7ec:	2219883a 	add	r12,r4,r8
1010d7f0:	2d0b803a 	cmpltu	r5,r5,r20
1010d7f4:	51cf803a 	cmpltu	r7,r10,r7
1010d7f8:	29ceb03a 	or	r7,r5,r7
1010d7fc:	4351803a 	cmpltu	r8,r8,r13
1010d800:	610b803a 	cmpltu	r5,r12,r4
1010d804:	4148b03a 	or	r4,r8,r5
1010d808:	398f883a 	add	r7,r7,r6
1010d80c:	3909883a 	add	r4,r7,r4
1010d810:	1810927a 	slli	r8,r3,9
1010d814:	2449883a 	add	r4,r4,r17
1010d818:	2008927a 	slli	r4,r4,9
1010d81c:	6022d5fa 	srli	r17,r12,23
1010d820:	1806d5fa 	srli	r3,r3,23
1010d824:	4252b03a 	or	r9,r8,r9
1010d828:	600a927a 	slli	r5,r12,9
1010d82c:	4810c03a 	cmpne	r8,r9,zero
1010d830:	2462b03a 	or	r17,r4,r17
1010d834:	40c6b03a 	or	r3,r8,r3
1010d838:	8900402c 	andhi	r4,r17,256
1010d83c:	1950b03a 	or	r8,r3,r5
1010d840:	20000726 	beq	r4,zero,1010d860 <__muldf3+0x4dc>
1010d844:	4006d07a 	srli	r3,r8,1
1010d848:	880497fa 	slli	r2,r17,31
1010d84c:	4200004c 	andi	r8,r8,1
1010d850:	8822d07a 	srli	r17,r17,1
1010d854:	1a10b03a 	or	r8,r3,r8
1010d858:	1210b03a 	or	r8,r2,r8
1010d85c:	5805883a 	mov	r2,r11
1010d860:	1140ffc4 	addi	r5,r2,1023
1010d864:	0140440e 	bge	zero,r5,1010d978 <__muldf3+0x5f4>
1010d868:	40c001cc 	andi	r3,r8,7
1010d86c:	18000726 	beq	r3,zero,1010d88c <__muldf3+0x508>
1010d870:	40c003cc 	andi	r3,r8,15
1010d874:	01000104 	movi	r4,4
1010d878:	19000426 	beq	r3,r4,1010d88c <__muldf3+0x508>
1010d87c:	4107883a 	add	r3,r8,r4
1010d880:	1a11803a 	cmpltu	r8,r3,r8
1010d884:	8a23883a 	add	r17,r17,r8
1010d888:	1811883a 	mov	r8,r3
1010d88c:	88c0402c 	andhi	r3,r17,256
1010d890:	18000426 	beq	r3,zero,1010d8a4 <__muldf3+0x520>
1010d894:	11410004 	addi	r5,r2,1024
1010d898:	00bfc034 	movhi	r2,65280
1010d89c:	10bfffc4 	addi	r2,r2,-1
1010d8a0:	88a2703a 	and	r17,r17,r2
1010d8a4:	0081ff84 	movi	r2,2046
1010d8a8:	117f6416 	blt	r2,r5,1010d63c <__muldf3+0x2b8>
1010d8ac:	8828977a 	slli	r20,r17,29
1010d8b0:	4010d0fa 	srli	r8,r8,3
1010d8b4:	8822927a 	slli	r17,r17,9
1010d8b8:	2881ffcc 	andi	r2,r5,2047
1010d8bc:	a228b03a 	or	r20,r20,r8
1010d8c0:	880ad33a 	srli	r5,r17,12
1010d8c4:	b02b883a 	mov	r21,r22
1010d8c8:	003f0d06 	br	1010d500 <__muldf3+0x17c>
1010d8cc:	8080022c 	andhi	r2,r16,8
1010d8d0:	10000926 	beq	r2,zero,1010d8f8 <__muldf3+0x574>
1010d8d4:	8880022c 	andhi	r2,r17,8
1010d8d8:	1000071e 	bne	r2,zero,1010d8f8 <__muldf3+0x574>
1010d8dc:	00800434 	movhi	r2,16
1010d8e0:	89400234 	orhi	r5,r17,8
1010d8e4:	10bfffc4 	addi	r2,r2,-1
1010d8e8:	b82b883a 	mov	r21,r23
1010d8ec:	288a703a 	and	r5,r5,r2
1010d8f0:	4029883a 	mov	r20,r8
1010d8f4:	003f6806 	br	1010d698 <__muldf3+0x314>
1010d8f8:	00800434 	movhi	r2,16
1010d8fc:	81400234 	orhi	r5,r16,8
1010d900:	10bfffc4 	addi	r2,r2,-1
1010d904:	288a703a 	and	r5,r5,r2
1010d908:	003f6306 	br	1010d698 <__muldf3+0x314>
1010d90c:	147ff604 	addi	r17,r2,-40
1010d910:	3462983a 	sll	r17,r6,r17
1010d914:	0011883a 	mov	r8,zero
1010d918:	003f4406 	br	1010d62c <__muldf3+0x2a8>
1010d91c:	3009883a 	mov	r4,r6
1010d920:	d9800215 	stw	r6,8(sp)
1010d924:	da400115 	stw	r9,4(sp)
1010d928:	da800015 	stw	r10,0(sp)
1010d92c:	010e59c0 	call	1010e59c <__clzsi2>
1010d930:	10800804 	addi	r2,r2,32
1010d934:	da800017 	ldw	r10,0(sp)
1010d938:	da400117 	ldw	r9,4(sp)
1010d93c:	d9800217 	ldw	r6,8(sp)
1010d940:	003f3006 	br	1010d604 <__muldf3+0x280>
1010d944:	143ff604 	addi	r16,r2,-40
1010d948:	9c20983a 	sll	r16,r19,r16
1010d94c:	0029883a 	mov	r20,zero
1010d950:	003f1606 	br	1010d5ac <__muldf3+0x228>
1010d954:	d9800215 	stw	r6,8(sp)
1010d958:	d9c00015 	stw	r7,0(sp)
1010d95c:	da400115 	stw	r9,4(sp)
1010d960:	010e59c0 	call	1010e59c <__clzsi2>
1010d964:	10800804 	addi	r2,r2,32
1010d968:	da400117 	ldw	r9,4(sp)
1010d96c:	d9c00017 	ldw	r7,0(sp)
1010d970:	d9800217 	ldw	r6,8(sp)
1010d974:	003f0306 	br	1010d584 <__muldf3+0x200>
1010d978:	00c00044 	movi	r3,1
1010d97c:	1947c83a 	sub	r3,r3,r5
1010d980:	00800e04 	movi	r2,56
1010d984:	10feda16 	blt	r2,r3,1010d4f0 <__muldf3+0x16c>
1010d988:	008007c4 	movi	r2,31
1010d98c:	10c01b16 	blt	r2,r3,1010d9fc <__muldf3+0x678>
1010d990:	00800804 	movi	r2,32
1010d994:	10c5c83a 	sub	r2,r2,r3
1010d998:	888a983a 	sll	r5,r17,r2
1010d99c:	40c8d83a 	srl	r4,r8,r3
1010d9a0:	4084983a 	sll	r2,r8,r2
1010d9a4:	88e2d83a 	srl	r17,r17,r3
1010d9a8:	2906b03a 	or	r3,r5,r4
1010d9ac:	1004c03a 	cmpne	r2,r2,zero
1010d9b0:	1886b03a 	or	r3,r3,r2
1010d9b4:	188001cc 	andi	r2,r3,7
1010d9b8:	10000726 	beq	r2,zero,1010d9d8 <__muldf3+0x654>
1010d9bc:	188003cc 	andi	r2,r3,15
1010d9c0:	01000104 	movi	r4,4
1010d9c4:	11000426 	beq	r2,r4,1010d9d8 <__muldf3+0x654>
1010d9c8:	1805883a 	mov	r2,r3
1010d9cc:	10c00104 	addi	r3,r2,4
1010d9d0:	1885803a 	cmpltu	r2,r3,r2
1010d9d4:	88a3883a 	add	r17,r17,r2
1010d9d8:	8880202c 	andhi	r2,r17,128
1010d9dc:	10001c26 	beq	r2,zero,1010da50 <__muldf3+0x6cc>
1010d9e0:	b02b883a 	mov	r21,r22
1010d9e4:	00800044 	movi	r2,1
1010d9e8:	000b883a 	mov	r5,zero
1010d9ec:	0029883a 	mov	r20,zero
1010d9f0:	003ec306 	br	1010d500 <__muldf3+0x17c>
1010d9f4:	5805883a 	mov	r2,r11
1010d9f8:	003f9906 	br	1010d860 <__muldf3+0x4dc>
1010d9fc:	00bff844 	movi	r2,-31
1010da00:	1145c83a 	sub	r2,r2,r5
1010da04:	8888d83a 	srl	r4,r17,r2
1010da08:	00800804 	movi	r2,32
1010da0c:	18801a26 	beq	r3,r2,1010da78 <__muldf3+0x6f4>
1010da10:	00801004 	movi	r2,64
1010da14:	10c5c83a 	sub	r2,r2,r3
1010da18:	8884983a 	sll	r2,r17,r2
1010da1c:	1204b03a 	or	r2,r2,r8
1010da20:	1004c03a 	cmpne	r2,r2,zero
1010da24:	2084b03a 	or	r2,r4,r2
1010da28:	144001cc 	andi	r17,r2,7
1010da2c:	88000d1e 	bne	r17,zero,1010da64 <__muldf3+0x6e0>
1010da30:	000b883a 	mov	r5,zero
1010da34:	1028d0fa 	srli	r20,r2,3
1010da38:	b02b883a 	mov	r21,r22
1010da3c:	0005883a 	mov	r2,zero
1010da40:	a468b03a 	or	r20,r20,r17
1010da44:	003eae06 	br	1010d500 <__muldf3+0x17c>
1010da48:	1007883a 	mov	r3,r2
1010da4c:	0023883a 	mov	r17,zero
1010da50:	880a927a 	slli	r5,r17,9
1010da54:	1805883a 	mov	r2,r3
1010da58:	8822977a 	slli	r17,r17,29
1010da5c:	280ad33a 	srli	r5,r5,12
1010da60:	003ff406 	br	1010da34 <__muldf3+0x6b0>
1010da64:	10c003cc 	andi	r3,r2,15
1010da68:	01000104 	movi	r4,4
1010da6c:	193ff626 	beq	r3,r4,1010da48 <__muldf3+0x6c4>
1010da70:	0023883a 	mov	r17,zero
1010da74:	003fd506 	br	1010d9cc <__muldf3+0x648>
1010da78:	0005883a 	mov	r2,zero
1010da7c:	003fe706 	br	1010da1c <__muldf3+0x698>
1010da80:	00800434 	movhi	r2,16
1010da84:	89400234 	orhi	r5,r17,8
1010da88:	10bfffc4 	addi	r2,r2,-1
1010da8c:	b02b883a 	mov	r21,r22
1010da90:	288a703a 	and	r5,r5,r2
1010da94:	4029883a 	mov	r20,r8
1010da98:	003eff06 	br	1010d698 <__muldf3+0x314>

1010da9c <__subdf3>:
1010da9c:	02000434 	movhi	r8,16
1010daa0:	423fffc4 	addi	r8,r8,-1
1010daa4:	defffb04 	addi	sp,sp,-20
1010daa8:	2a14703a 	and	r10,r5,r8
1010daac:	3812d53a 	srli	r9,r7,20
1010dab0:	3a10703a 	and	r8,r7,r8
1010dab4:	2006d77a 	srli	r3,r4,29
1010dab8:	3004d77a 	srli	r2,r6,29
1010dabc:	dc000015 	stw	r16,0(sp)
1010dac0:	501490fa 	slli	r10,r10,3
1010dac4:	2820d53a 	srli	r16,r5,20
1010dac8:	401090fa 	slli	r8,r8,3
1010dacc:	dc800215 	stw	r18,8(sp)
1010dad0:	dc400115 	stw	r17,4(sp)
1010dad4:	dfc00415 	stw	ra,16(sp)
1010dad8:	202290fa 	slli	r17,r4,3
1010dadc:	dcc00315 	stw	r19,12(sp)
1010dae0:	4a41ffcc 	andi	r9,r9,2047
1010dae4:	0101ffc4 	movi	r4,2047
1010dae8:	2824d7fa 	srli	r18,r5,31
1010daec:	8401ffcc 	andi	r16,r16,2047
1010daf0:	50c6b03a 	or	r3,r10,r3
1010daf4:	380ed7fa 	srli	r7,r7,31
1010daf8:	408ab03a 	or	r5,r8,r2
1010dafc:	300c90fa 	slli	r6,r6,3
1010db00:	49009626 	beq	r9,r4,1010dd5c <__subdf3+0x2c0>
1010db04:	39c0005c 	xori	r7,r7,1
1010db08:	8245c83a 	sub	r2,r16,r9
1010db0c:	3c807426 	beq	r7,r18,1010dce0 <__subdf3+0x244>
1010db10:	0080af0e 	bge	zero,r2,1010ddd0 <__subdf3+0x334>
1010db14:	48002a1e 	bne	r9,zero,1010dbc0 <__subdf3+0x124>
1010db18:	2988b03a 	or	r4,r5,r6
1010db1c:	20009a1e 	bne	r4,zero,1010dd88 <__subdf3+0x2ec>
1010db20:	888001cc 	andi	r2,r17,7
1010db24:	10000726 	beq	r2,zero,1010db44 <__subdf3+0xa8>
1010db28:	888003cc 	andi	r2,r17,15
1010db2c:	01000104 	movi	r4,4
1010db30:	11000426 	beq	r2,r4,1010db44 <__subdf3+0xa8>
1010db34:	890b883a 	add	r5,r17,r4
1010db38:	2c63803a 	cmpltu	r17,r5,r17
1010db3c:	1c47883a 	add	r3,r3,r17
1010db40:	2823883a 	mov	r17,r5
1010db44:	1880202c 	andhi	r2,r3,128
1010db48:	10005926 	beq	r2,zero,1010dcb0 <__subdf3+0x214>
1010db4c:	84000044 	addi	r16,r16,1
1010db50:	0081ffc4 	movi	r2,2047
1010db54:	8080be26 	beq	r16,r2,1010de50 <__subdf3+0x3b4>
1010db58:	017fe034 	movhi	r5,65408
1010db5c:	297fffc4 	addi	r5,r5,-1
1010db60:	1946703a 	and	r3,r3,r5
1010db64:	1804977a 	slli	r2,r3,29
1010db68:	1806927a 	slli	r3,r3,9
1010db6c:	8822d0fa 	srli	r17,r17,3
1010db70:	8401ffcc 	andi	r16,r16,2047
1010db74:	180ad33a 	srli	r5,r3,12
1010db78:	9100004c 	andi	r4,r18,1
1010db7c:	1444b03a 	or	r2,r2,r17
1010db80:	80c1ffcc 	andi	r3,r16,2047
1010db84:	1820953a 	slli	r16,r3,20
1010db88:	20c03fcc 	andi	r3,r4,255
1010db8c:	180897fa 	slli	r4,r3,31
1010db90:	00c00434 	movhi	r3,16
1010db94:	18ffffc4 	addi	r3,r3,-1
1010db98:	28c6703a 	and	r3,r5,r3
1010db9c:	1c06b03a 	or	r3,r3,r16
1010dba0:	1906b03a 	or	r3,r3,r4
1010dba4:	dfc00417 	ldw	ra,16(sp)
1010dba8:	dcc00317 	ldw	r19,12(sp)
1010dbac:	dc800217 	ldw	r18,8(sp)
1010dbb0:	dc400117 	ldw	r17,4(sp)
1010dbb4:	dc000017 	ldw	r16,0(sp)
1010dbb8:	dec00504 	addi	sp,sp,20
1010dbbc:	f800283a 	ret
1010dbc0:	0101ffc4 	movi	r4,2047
1010dbc4:	813fd626 	beq	r16,r4,1010db20 <__subdf3+0x84>
1010dbc8:	29402034 	orhi	r5,r5,128
1010dbcc:	01000e04 	movi	r4,56
1010dbd0:	2080a316 	blt	r4,r2,1010de60 <__subdf3+0x3c4>
1010dbd4:	010007c4 	movi	r4,31
1010dbd8:	2080c616 	blt	r4,r2,1010def4 <__subdf3+0x458>
1010dbdc:	01000804 	movi	r4,32
1010dbe0:	2089c83a 	sub	r4,r4,r2
1010dbe4:	2910983a 	sll	r8,r5,r4
1010dbe8:	308ed83a 	srl	r7,r6,r2
1010dbec:	3108983a 	sll	r4,r6,r4
1010dbf0:	2884d83a 	srl	r2,r5,r2
1010dbf4:	41ccb03a 	or	r6,r8,r7
1010dbf8:	2008c03a 	cmpne	r4,r4,zero
1010dbfc:	310cb03a 	or	r6,r6,r4
1010dc00:	898dc83a 	sub	r6,r17,r6
1010dc04:	89a3803a 	cmpltu	r17,r17,r6
1010dc08:	1887c83a 	sub	r3,r3,r2
1010dc0c:	1c47c83a 	sub	r3,r3,r17
1010dc10:	3023883a 	mov	r17,r6
1010dc14:	1880202c 	andhi	r2,r3,128
1010dc18:	10002326 	beq	r2,zero,1010dca8 <__subdf3+0x20c>
1010dc1c:	04c02034 	movhi	r19,128
1010dc20:	9cffffc4 	addi	r19,r19,-1
1010dc24:	1ce6703a 	and	r19,r3,r19
1010dc28:	98007a26 	beq	r19,zero,1010de14 <__subdf3+0x378>
1010dc2c:	9809883a 	mov	r4,r19
1010dc30:	010e59c0 	call	1010e59c <__clzsi2>
1010dc34:	113ffe04 	addi	r4,r2,-8
1010dc38:	00c007c4 	movi	r3,31
1010dc3c:	19007b16 	blt	r3,r4,1010de2c <__subdf3+0x390>
1010dc40:	00800804 	movi	r2,32
1010dc44:	1105c83a 	sub	r2,r2,r4
1010dc48:	8884d83a 	srl	r2,r17,r2
1010dc4c:	9906983a 	sll	r3,r19,r4
1010dc50:	8922983a 	sll	r17,r17,r4
1010dc54:	10c4b03a 	or	r2,r2,r3
1010dc58:	24007816 	blt	r4,r16,1010de3c <__subdf3+0x3a0>
1010dc5c:	2421c83a 	sub	r16,r4,r16
1010dc60:	80c00044 	addi	r3,r16,1
1010dc64:	010007c4 	movi	r4,31
1010dc68:	20c09516 	blt	r4,r3,1010dec0 <__subdf3+0x424>
1010dc6c:	01400804 	movi	r5,32
1010dc70:	28cbc83a 	sub	r5,r5,r3
1010dc74:	88c8d83a 	srl	r4,r17,r3
1010dc78:	8962983a 	sll	r17,r17,r5
1010dc7c:	114a983a 	sll	r5,r2,r5
1010dc80:	10c6d83a 	srl	r3,r2,r3
1010dc84:	8804c03a 	cmpne	r2,r17,zero
1010dc88:	290ab03a 	or	r5,r5,r4
1010dc8c:	28a2b03a 	or	r17,r5,r2
1010dc90:	0021883a 	mov	r16,zero
1010dc94:	003fa206 	br	1010db20 <__subdf3+0x84>
1010dc98:	2090b03a 	or	r8,r4,r2
1010dc9c:	40018e26 	beq	r8,zero,1010e2d8 <__subdf3+0x83c>
1010dca0:	1007883a 	mov	r3,r2
1010dca4:	2023883a 	mov	r17,r4
1010dca8:	888001cc 	andi	r2,r17,7
1010dcac:	103f9e1e 	bne	r2,zero,1010db28 <__subdf3+0x8c>
1010dcb0:	1804977a 	slli	r2,r3,29
1010dcb4:	8822d0fa 	srli	r17,r17,3
1010dcb8:	1810d0fa 	srli	r8,r3,3
1010dcbc:	9100004c 	andi	r4,r18,1
1010dcc0:	1444b03a 	or	r2,r2,r17
1010dcc4:	00c1ffc4 	movi	r3,2047
1010dcc8:	80c02826 	beq	r16,r3,1010dd6c <__subdf3+0x2d0>
1010dccc:	01400434 	movhi	r5,16
1010dcd0:	297fffc4 	addi	r5,r5,-1
1010dcd4:	80e0703a 	and	r16,r16,r3
1010dcd8:	414a703a 	and	r5,r8,r5
1010dcdc:	003fa806 	br	1010db80 <__subdf3+0xe4>
1010dce0:	0080630e 	bge	zero,r2,1010de70 <__subdf3+0x3d4>
1010dce4:	48003026 	beq	r9,zero,1010dda8 <__subdf3+0x30c>
1010dce8:	0101ffc4 	movi	r4,2047
1010dcec:	813f8c26 	beq	r16,r4,1010db20 <__subdf3+0x84>
1010dcf0:	29402034 	orhi	r5,r5,128
1010dcf4:	01000e04 	movi	r4,56
1010dcf8:	2080a90e 	bge	r4,r2,1010dfa0 <__subdf3+0x504>
1010dcfc:	298cb03a 	or	r6,r5,r6
1010dd00:	3012c03a 	cmpne	r9,r6,zero
1010dd04:	0005883a 	mov	r2,zero
1010dd08:	4c53883a 	add	r9,r9,r17
1010dd0c:	4c63803a 	cmpltu	r17,r9,r17
1010dd10:	10c7883a 	add	r3,r2,r3
1010dd14:	88c7883a 	add	r3,r17,r3
1010dd18:	4823883a 	mov	r17,r9
1010dd1c:	1880202c 	andhi	r2,r3,128
1010dd20:	1000d026 	beq	r2,zero,1010e064 <__subdf3+0x5c8>
1010dd24:	84000044 	addi	r16,r16,1
1010dd28:	0081ffc4 	movi	r2,2047
1010dd2c:	8080fe26 	beq	r16,r2,1010e128 <__subdf3+0x68c>
1010dd30:	00bfe034 	movhi	r2,65408
1010dd34:	10bfffc4 	addi	r2,r2,-1
1010dd38:	1886703a 	and	r3,r3,r2
1010dd3c:	880ad07a 	srli	r5,r17,1
1010dd40:	180497fa 	slli	r2,r3,31
1010dd44:	8900004c 	andi	r4,r17,1
1010dd48:	2922b03a 	or	r17,r5,r4
1010dd4c:	1806d07a 	srli	r3,r3,1
1010dd50:	1462b03a 	or	r17,r2,r17
1010dd54:	3825883a 	mov	r18,r7
1010dd58:	003f7106 	br	1010db20 <__subdf3+0x84>
1010dd5c:	2984b03a 	or	r2,r5,r6
1010dd60:	103f6826 	beq	r2,zero,1010db04 <__subdf3+0x68>
1010dd64:	39c03fcc 	andi	r7,r7,255
1010dd68:	003f6706 	br	1010db08 <__subdf3+0x6c>
1010dd6c:	4086b03a 	or	r3,r8,r2
1010dd70:	18015226 	beq	r3,zero,1010e2bc <__subdf3+0x820>
1010dd74:	00c00434 	movhi	r3,16
1010dd78:	41400234 	orhi	r5,r8,8
1010dd7c:	18ffffc4 	addi	r3,r3,-1
1010dd80:	28ca703a 	and	r5,r5,r3
1010dd84:	003f7e06 	br	1010db80 <__subdf3+0xe4>
1010dd88:	10bfffc4 	addi	r2,r2,-1
1010dd8c:	1000491e 	bne	r2,zero,1010deb4 <__subdf3+0x418>
1010dd90:	898fc83a 	sub	r7,r17,r6
1010dd94:	89e3803a 	cmpltu	r17,r17,r7
1010dd98:	1947c83a 	sub	r3,r3,r5
1010dd9c:	1c47c83a 	sub	r3,r3,r17
1010dda0:	3823883a 	mov	r17,r7
1010dda4:	003f9b06 	br	1010dc14 <__subdf3+0x178>
1010dda8:	2988b03a 	or	r4,r5,r6
1010ddac:	203f5c26 	beq	r4,zero,1010db20 <__subdf3+0x84>
1010ddb0:	10bfffc4 	addi	r2,r2,-1
1010ddb4:	1000931e 	bne	r2,zero,1010e004 <__subdf3+0x568>
1010ddb8:	898d883a 	add	r6,r17,r6
1010ddbc:	3463803a 	cmpltu	r17,r6,r17
1010ddc0:	1947883a 	add	r3,r3,r5
1010ddc4:	88c7883a 	add	r3,r17,r3
1010ddc8:	3023883a 	mov	r17,r6
1010ddcc:	003fd306 	br	1010dd1c <__subdf3+0x280>
1010ddd0:	1000541e 	bne	r2,zero,1010df24 <__subdf3+0x488>
1010ddd4:	80800044 	addi	r2,r16,1
1010ddd8:	1081ffcc 	andi	r2,r2,2047
1010dddc:	01000044 	movi	r4,1
1010dde0:	2080a20e 	bge	r4,r2,1010e06c <__subdf3+0x5d0>
1010dde4:	8989c83a 	sub	r4,r17,r6
1010dde8:	8905803a 	cmpltu	r2,r17,r4
1010ddec:	1967c83a 	sub	r19,r3,r5
1010ddf0:	98a7c83a 	sub	r19,r19,r2
1010ddf4:	9880202c 	andhi	r2,r19,128
1010ddf8:	10006326 	beq	r2,zero,1010df88 <__subdf3+0x4ec>
1010ddfc:	3463c83a 	sub	r17,r6,r17
1010de00:	28c7c83a 	sub	r3,r5,r3
1010de04:	344d803a 	cmpltu	r6,r6,r17
1010de08:	19a7c83a 	sub	r19,r3,r6
1010de0c:	3825883a 	mov	r18,r7
1010de10:	983f861e 	bne	r19,zero,1010dc2c <__subdf3+0x190>
1010de14:	8809883a 	mov	r4,r17
1010de18:	010e59c0 	call	1010e59c <__clzsi2>
1010de1c:	10800804 	addi	r2,r2,32
1010de20:	113ffe04 	addi	r4,r2,-8
1010de24:	00c007c4 	movi	r3,31
1010de28:	193f850e 	bge	r3,r4,1010dc40 <__subdf3+0x1a4>
1010de2c:	10bff604 	addi	r2,r2,-40
1010de30:	8884983a 	sll	r2,r17,r2
1010de34:	0023883a 	mov	r17,zero
1010de38:	243f880e 	bge	r4,r16,1010dc5c <__subdf3+0x1c0>
1010de3c:	00ffe034 	movhi	r3,65408
1010de40:	18ffffc4 	addi	r3,r3,-1
1010de44:	8121c83a 	sub	r16,r16,r4
1010de48:	10c6703a 	and	r3,r2,r3
1010de4c:	003f3406 	br	1010db20 <__subdf3+0x84>
1010de50:	9100004c 	andi	r4,r18,1
1010de54:	000b883a 	mov	r5,zero
1010de58:	0005883a 	mov	r2,zero
1010de5c:	003f4806 	br	1010db80 <__subdf3+0xe4>
1010de60:	298cb03a 	or	r6,r5,r6
1010de64:	300cc03a 	cmpne	r6,r6,zero
1010de68:	0005883a 	mov	r2,zero
1010de6c:	003f6406 	br	1010dc00 <__subdf3+0x164>
1010de70:	10009a1e 	bne	r2,zero,1010e0dc <__subdf3+0x640>
1010de74:	82400044 	addi	r9,r16,1
1010de78:	4881ffcc 	andi	r2,r9,2047
1010de7c:	02800044 	movi	r10,1
1010de80:	5080670e 	bge	r10,r2,1010e020 <__subdf3+0x584>
1010de84:	0081ffc4 	movi	r2,2047
1010de88:	4880af26 	beq	r9,r2,1010e148 <__subdf3+0x6ac>
1010de8c:	898d883a 	add	r6,r17,r6
1010de90:	1945883a 	add	r2,r3,r5
1010de94:	3447803a 	cmpltu	r3,r6,r17
1010de98:	1887883a 	add	r3,r3,r2
1010de9c:	182297fa 	slli	r17,r3,31
1010dea0:	300cd07a 	srli	r6,r6,1
1010dea4:	1806d07a 	srli	r3,r3,1
1010dea8:	4821883a 	mov	r16,r9
1010deac:	89a2b03a 	or	r17,r17,r6
1010deb0:	003f1b06 	br	1010db20 <__subdf3+0x84>
1010deb4:	0101ffc4 	movi	r4,2047
1010deb8:	813f441e 	bne	r16,r4,1010dbcc <__subdf3+0x130>
1010debc:	003f1806 	br	1010db20 <__subdf3+0x84>
1010dec0:	843ff844 	addi	r16,r16,-31
1010dec4:	01400804 	movi	r5,32
1010dec8:	1408d83a 	srl	r4,r2,r16
1010decc:	19405026 	beq	r3,r5,1010e010 <__subdf3+0x574>
1010ded0:	01401004 	movi	r5,64
1010ded4:	28c7c83a 	sub	r3,r5,r3
1010ded8:	10c4983a 	sll	r2,r2,r3
1010dedc:	88a2b03a 	or	r17,r17,r2
1010dee0:	8822c03a 	cmpne	r17,r17,zero
1010dee4:	2462b03a 	or	r17,r4,r17
1010dee8:	0007883a 	mov	r3,zero
1010deec:	0021883a 	mov	r16,zero
1010def0:	003f6d06 	br	1010dca8 <__subdf3+0x20c>
1010def4:	11fff804 	addi	r7,r2,-32
1010def8:	01000804 	movi	r4,32
1010defc:	29ced83a 	srl	r7,r5,r7
1010df00:	11004526 	beq	r2,r4,1010e018 <__subdf3+0x57c>
1010df04:	01001004 	movi	r4,64
1010df08:	2089c83a 	sub	r4,r4,r2
1010df0c:	2904983a 	sll	r2,r5,r4
1010df10:	118cb03a 	or	r6,r2,r6
1010df14:	300cc03a 	cmpne	r6,r6,zero
1010df18:	398cb03a 	or	r6,r7,r6
1010df1c:	0005883a 	mov	r2,zero
1010df20:	003f3706 	br	1010dc00 <__subdf3+0x164>
1010df24:	80002a26 	beq	r16,zero,1010dfd0 <__subdf3+0x534>
1010df28:	0101ffc4 	movi	r4,2047
1010df2c:	49006626 	beq	r9,r4,1010e0c8 <__subdf3+0x62c>
1010df30:	0085c83a 	sub	r2,zero,r2
1010df34:	18c02034 	orhi	r3,r3,128
1010df38:	01000e04 	movi	r4,56
1010df3c:	20807e16 	blt	r4,r2,1010e138 <__subdf3+0x69c>
1010df40:	010007c4 	movi	r4,31
1010df44:	2080e716 	blt	r4,r2,1010e2e4 <__subdf3+0x848>
1010df48:	01000804 	movi	r4,32
1010df4c:	2089c83a 	sub	r4,r4,r2
1010df50:	1914983a 	sll	r10,r3,r4
1010df54:	8890d83a 	srl	r8,r17,r2
1010df58:	8908983a 	sll	r4,r17,r4
1010df5c:	1884d83a 	srl	r2,r3,r2
1010df60:	5222b03a 	or	r17,r10,r8
1010df64:	2006c03a 	cmpne	r3,r4,zero
1010df68:	88e2b03a 	or	r17,r17,r3
1010df6c:	3463c83a 	sub	r17,r6,r17
1010df70:	2885c83a 	sub	r2,r5,r2
1010df74:	344d803a 	cmpltu	r6,r6,r17
1010df78:	1187c83a 	sub	r3,r2,r6
1010df7c:	4821883a 	mov	r16,r9
1010df80:	3825883a 	mov	r18,r7
1010df84:	003f2306 	br	1010dc14 <__subdf3+0x178>
1010df88:	24d0b03a 	or	r8,r4,r19
1010df8c:	40001b1e 	bne	r8,zero,1010dffc <__subdf3+0x560>
1010df90:	0005883a 	mov	r2,zero
1010df94:	0009883a 	mov	r4,zero
1010df98:	0021883a 	mov	r16,zero
1010df9c:	003f4906 	br	1010dcc4 <__subdf3+0x228>
1010dfa0:	010007c4 	movi	r4,31
1010dfa4:	20803a16 	blt	r4,r2,1010e090 <__subdf3+0x5f4>
1010dfa8:	01000804 	movi	r4,32
1010dfac:	2089c83a 	sub	r4,r4,r2
1010dfb0:	2912983a 	sll	r9,r5,r4
1010dfb4:	3090d83a 	srl	r8,r6,r2
1010dfb8:	3108983a 	sll	r4,r6,r4
1010dfbc:	2884d83a 	srl	r2,r5,r2
1010dfc0:	4a12b03a 	or	r9,r9,r8
1010dfc4:	2008c03a 	cmpne	r4,r4,zero
1010dfc8:	4912b03a 	or	r9,r9,r4
1010dfcc:	003f4e06 	br	1010dd08 <__subdf3+0x26c>
1010dfd0:	1c48b03a 	or	r4,r3,r17
1010dfd4:	20003c26 	beq	r4,zero,1010e0c8 <__subdf3+0x62c>
1010dfd8:	0084303a 	nor	r2,zero,r2
1010dfdc:	1000381e 	bne	r2,zero,1010e0c0 <__subdf3+0x624>
1010dfe0:	3463c83a 	sub	r17,r6,r17
1010dfe4:	28c5c83a 	sub	r2,r5,r3
1010dfe8:	344d803a 	cmpltu	r6,r6,r17
1010dfec:	1187c83a 	sub	r3,r2,r6
1010dff0:	4821883a 	mov	r16,r9
1010dff4:	3825883a 	mov	r18,r7
1010dff8:	003f0606 	br	1010dc14 <__subdf3+0x178>
1010dffc:	2023883a 	mov	r17,r4
1010e000:	003f0906 	br	1010dc28 <__subdf3+0x18c>
1010e004:	0101ffc4 	movi	r4,2047
1010e008:	813f3a1e 	bne	r16,r4,1010dcf4 <__subdf3+0x258>
1010e00c:	003ec406 	br	1010db20 <__subdf3+0x84>
1010e010:	0005883a 	mov	r2,zero
1010e014:	003fb106 	br	1010dedc <__subdf3+0x440>
1010e018:	0005883a 	mov	r2,zero
1010e01c:	003fbc06 	br	1010df10 <__subdf3+0x474>
1010e020:	1c44b03a 	or	r2,r3,r17
1010e024:	80008e1e 	bne	r16,zero,1010e260 <__subdf3+0x7c4>
1010e028:	1000c826 	beq	r2,zero,1010e34c <__subdf3+0x8b0>
1010e02c:	2984b03a 	or	r2,r5,r6
1010e030:	103ebb26 	beq	r2,zero,1010db20 <__subdf3+0x84>
1010e034:	8989883a 	add	r4,r17,r6
1010e038:	1945883a 	add	r2,r3,r5
1010e03c:	2447803a 	cmpltu	r3,r4,r17
1010e040:	1887883a 	add	r3,r3,r2
1010e044:	1880202c 	andhi	r2,r3,128
1010e048:	2023883a 	mov	r17,r4
1010e04c:	103f1626 	beq	r2,zero,1010dca8 <__subdf3+0x20c>
1010e050:	00bfe034 	movhi	r2,65408
1010e054:	10bfffc4 	addi	r2,r2,-1
1010e058:	5021883a 	mov	r16,r10
1010e05c:	1886703a 	and	r3,r3,r2
1010e060:	003eaf06 	br	1010db20 <__subdf3+0x84>
1010e064:	3825883a 	mov	r18,r7
1010e068:	003f0f06 	br	1010dca8 <__subdf3+0x20c>
1010e06c:	1c44b03a 	or	r2,r3,r17
1010e070:	8000251e 	bne	r16,zero,1010e108 <__subdf3+0x66c>
1010e074:	1000661e 	bne	r2,zero,1010e210 <__subdf3+0x774>
1010e078:	2990b03a 	or	r8,r5,r6
1010e07c:	40009626 	beq	r8,zero,1010e2d8 <__subdf3+0x83c>
1010e080:	2807883a 	mov	r3,r5
1010e084:	3023883a 	mov	r17,r6
1010e088:	3825883a 	mov	r18,r7
1010e08c:	003ea406 	br	1010db20 <__subdf3+0x84>
1010e090:	127ff804 	addi	r9,r2,-32
1010e094:	01000804 	movi	r4,32
1010e098:	2a52d83a 	srl	r9,r5,r9
1010e09c:	11008c26 	beq	r2,r4,1010e2d0 <__subdf3+0x834>
1010e0a0:	01001004 	movi	r4,64
1010e0a4:	2085c83a 	sub	r2,r4,r2
1010e0a8:	2884983a 	sll	r2,r5,r2
1010e0ac:	118cb03a 	or	r6,r2,r6
1010e0b0:	300cc03a 	cmpne	r6,r6,zero
1010e0b4:	4992b03a 	or	r9,r9,r6
1010e0b8:	0005883a 	mov	r2,zero
1010e0bc:	003f1206 	br	1010dd08 <__subdf3+0x26c>
1010e0c0:	0101ffc4 	movi	r4,2047
1010e0c4:	493f9c1e 	bne	r9,r4,1010df38 <__subdf3+0x49c>
1010e0c8:	2807883a 	mov	r3,r5
1010e0cc:	3023883a 	mov	r17,r6
1010e0d0:	4821883a 	mov	r16,r9
1010e0d4:	3825883a 	mov	r18,r7
1010e0d8:	003e9106 	br	1010db20 <__subdf3+0x84>
1010e0dc:	80001f1e 	bne	r16,zero,1010e15c <__subdf3+0x6c0>
1010e0e0:	1c48b03a 	or	r4,r3,r17
1010e0e4:	20005a26 	beq	r4,zero,1010e250 <__subdf3+0x7b4>
1010e0e8:	0084303a 	nor	r2,zero,r2
1010e0ec:	1000561e 	bne	r2,zero,1010e248 <__subdf3+0x7ac>
1010e0f0:	89a3883a 	add	r17,r17,r6
1010e0f4:	1945883a 	add	r2,r3,r5
1010e0f8:	898d803a 	cmpltu	r6,r17,r6
1010e0fc:	3087883a 	add	r3,r6,r2
1010e100:	4821883a 	mov	r16,r9
1010e104:	003f0506 	br	1010dd1c <__subdf3+0x280>
1010e108:	10002b1e 	bne	r2,zero,1010e1b8 <__subdf3+0x71c>
1010e10c:	2984b03a 	or	r2,r5,r6
1010e110:	10008026 	beq	r2,zero,1010e314 <__subdf3+0x878>
1010e114:	2807883a 	mov	r3,r5
1010e118:	3023883a 	mov	r17,r6
1010e11c:	3825883a 	mov	r18,r7
1010e120:	0401ffc4 	movi	r16,2047
1010e124:	003e7e06 	br	1010db20 <__subdf3+0x84>
1010e128:	3809883a 	mov	r4,r7
1010e12c:	0011883a 	mov	r8,zero
1010e130:	0005883a 	mov	r2,zero
1010e134:	003ee306 	br	1010dcc4 <__subdf3+0x228>
1010e138:	1c62b03a 	or	r17,r3,r17
1010e13c:	8822c03a 	cmpne	r17,r17,zero
1010e140:	0005883a 	mov	r2,zero
1010e144:	003f8906 	br	1010df6c <__subdf3+0x4d0>
1010e148:	3809883a 	mov	r4,r7
1010e14c:	4821883a 	mov	r16,r9
1010e150:	0011883a 	mov	r8,zero
1010e154:	0005883a 	mov	r2,zero
1010e158:	003eda06 	br	1010dcc4 <__subdf3+0x228>
1010e15c:	0101ffc4 	movi	r4,2047
1010e160:	49003b26 	beq	r9,r4,1010e250 <__subdf3+0x7b4>
1010e164:	0085c83a 	sub	r2,zero,r2
1010e168:	18c02034 	orhi	r3,r3,128
1010e16c:	01000e04 	movi	r4,56
1010e170:	20806e16 	blt	r4,r2,1010e32c <__subdf3+0x890>
1010e174:	010007c4 	movi	r4,31
1010e178:	20807716 	blt	r4,r2,1010e358 <__subdf3+0x8bc>
1010e17c:	01000804 	movi	r4,32
1010e180:	2089c83a 	sub	r4,r4,r2
1010e184:	1914983a 	sll	r10,r3,r4
1010e188:	8890d83a 	srl	r8,r17,r2
1010e18c:	8908983a 	sll	r4,r17,r4
1010e190:	1884d83a 	srl	r2,r3,r2
1010e194:	5222b03a 	or	r17,r10,r8
1010e198:	2006c03a 	cmpne	r3,r4,zero
1010e19c:	88e2b03a 	or	r17,r17,r3
1010e1a0:	89a3883a 	add	r17,r17,r6
1010e1a4:	1145883a 	add	r2,r2,r5
1010e1a8:	898d803a 	cmpltu	r6,r17,r6
1010e1ac:	3087883a 	add	r3,r6,r2
1010e1b0:	4821883a 	mov	r16,r9
1010e1b4:	003ed906 	br	1010dd1c <__subdf3+0x280>
1010e1b8:	2984b03a 	or	r2,r5,r6
1010e1bc:	10004226 	beq	r2,zero,1010e2c8 <__subdf3+0x82c>
1010e1c0:	1808d0fa 	srli	r4,r3,3
1010e1c4:	8822d0fa 	srli	r17,r17,3
1010e1c8:	1806977a 	slli	r3,r3,29
1010e1cc:	2080022c 	andhi	r2,r4,8
1010e1d0:	1c62b03a 	or	r17,r3,r17
1010e1d4:	10000826 	beq	r2,zero,1010e1f8 <__subdf3+0x75c>
1010e1d8:	2812d0fa 	srli	r9,r5,3
1010e1dc:	4880022c 	andhi	r2,r9,8
1010e1e0:	1000051e 	bne	r2,zero,1010e1f8 <__subdf3+0x75c>
1010e1e4:	300cd0fa 	srli	r6,r6,3
1010e1e8:	2804977a 	slli	r2,r5,29
1010e1ec:	4809883a 	mov	r4,r9
1010e1f0:	3825883a 	mov	r18,r7
1010e1f4:	11a2b03a 	or	r17,r2,r6
1010e1f8:	8806d77a 	srli	r3,r17,29
1010e1fc:	200890fa 	slli	r4,r4,3
1010e200:	882290fa 	slli	r17,r17,3
1010e204:	0401ffc4 	movi	r16,2047
1010e208:	1906b03a 	or	r3,r3,r4
1010e20c:	003e4406 	br	1010db20 <__subdf3+0x84>
1010e210:	2984b03a 	or	r2,r5,r6
1010e214:	103e4226 	beq	r2,zero,1010db20 <__subdf3+0x84>
1010e218:	8989c83a 	sub	r4,r17,r6
1010e21c:	8911803a 	cmpltu	r8,r17,r4
1010e220:	1945c83a 	sub	r2,r3,r5
1010e224:	1205c83a 	sub	r2,r2,r8
1010e228:	1200202c 	andhi	r8,r2,128
1010e22c:	403e9a26 	beq	r8,zero,1010dc98 <__subdf3+0x1fc>
1010e230:	3463c83a 	sub	r17,r6,r17
1010e234:	28c5c83a 	sub	r2,r5,r3
1010e238:	344d803a 	cmpltu	r6,r6,r17
1010e23c:	1187c83a 	sub	r3,r2,r6
1010e240:	3825883a 	mov	r18,r7
1010e244:	003e3606 	br	1010db20 <__subdf3+0x84>
1010e248:	0101ffc4 	movi	r4,2047
1010e24c:	493fc71e 	bne	r9,r4,1010e16c <__subdf3+0x6d0>
1010e250:	2807883a 	mov	r3,r5
1010e254:	3023883a 	mov	r17,r6
1010e258:	4821883a 	mov	r16,r9
1010e25c:	003e3006 	br	1010db20 <__subdf3+0x84>
1010e260:	10003626 	beq	r2,zero,1010e33c <__subdf3+0x8a0>
1010e264:	2984b03a 	or	r2,r5,r6
1010e268:	10001726 	beq	r2,zero,1010e2c8 <__subdf3+0x82c>
1010e26c:	1808d0fa 	srli	r4,r3,3
1010e270:	8822d0fa 	srli	r17,r17,3
1010e274:	1806977a 	slli	r3,r3,29
1010e278:	2080022c 	andhi	r2,r4,8
1010e27c:	1c62b03a 	or	r17,r3,r17
1010e280:	10000726 	beq	r2,zero,1010e2a0 <__subdf3+0x804>
1010e284:	2812d0fa 	srli	r9,r5,3
1010e288:	4880022c 	andhi	r2,r9,8
1010e28c:	1000041e 	bne	r2,zero,1010e2a0 <__subdf3+0x804>
1010e290:	300cd0fa 	srli	r6,r6,3
1010e294:	2804977a 	slli	r2,r5,29
1010e298:	4809883a 	mov	r4,r9
1010e29c:	11a2b03a 	or	r17,r2,r6
1010e2a0:	8806d77a 	srli	r3,r17,29
1010e2a4:	200890fa 	slli	r4,r4,3
1010e2a8:	882290fa 	slli	r17,r17,3
1010e2ac:	3825883a 	mov	r18,r7
1010e2b0:	1906b03a 	or	r3,r3,r4
1010e2b4:	0401ffc4 	movi	r16,2047
1010e2b8:	003e1906 	br	1010db20 <__subdf3+0x84>
1010e2bc:	000b883a 	mov	r5,zero
1010e2c0:	0005883a 	mov	r2,zero
1010e2c4:	003e2e06 	br	1010db80 <__subdf3+0xe4>
1010e2c8:	0401ffc4 	movi	r16,2047
1010e2cc:	003e1406 	br	1010db20 <__subdf3+0x84>
1010e2d0:	0005883a 	mov	r2,zero
1010e2d4:	003f7506 	br	1010e0ac <__subdf3+0x610>
1010e2d8:	0005883a 	mov	r2,zero
1010e2dc:	0009883a 	mov	r4,zero
1010e2e0:	003e7806 	br	1010dcc4 <__subdf3+0x228>
1010e2e4:	123ff804 	addi	r8,r2,-32
1010e2e8:	01000804 	movi	r4,32
1010e2ec:	1a10d83a 	srl	r8,r3,r8
1010e2f0:	11002526 	beq	r2,r4,1010e388 <__subdf3+0x8ec>
1010e2f4:	01001004 	movi	r4,64
1010e2f8:	2085c83a 	sub	r2,r4,r2
1010e2fc:	1884983a 	sll	r2,r3,r2
1010e300:	1444b03a 	or	r2,r2,r17
1010e304:	1004c03a 	cmpne	r2,r2,zero
1010e308:	40a2b03a 	or	r17,r8,r2
1010e30c:	0005883a 	mov	r2,zero
1010e310:	003f1606 	br	1010df6c <__subdf3+0x4d0>
1010e314:	02000434 	movhi	r8,16
1010e318:	0009883a 	mov	r4,zero
1010e31c:	423fffc4 	addi	r8,r8,-1
1010e320:	00bfffc4 	movi	r2,-1
1010e324:	0401ffc4 	movi	r16,2047
1010e328:	003e6606 	br	1010dcc4 <__subdf3+0x228>
1010e32c:	1c62b03a 	or	r17,r3,r17
1010e330:	8822c03a 	cmpne	r17,r17,zero
1010e334:	0005883a 	mov	r2,zero
1010e338:	003f9906 	br	1010e1a0 <__subdf3+0x704>
1010e33c:	2807883a 	mov	r3,r5
1010e340:	3023883a 	mov	r17,r6
1010e344:	0401ffc4 	movi	r16,2047
1010e348:	003df506 	br	1010db20 <__subdf3+0x84>
1010e34c:	2807883a 	mov	r3,r5
1010e350:	3023883a 	mov	r17,r6
1010e354:	003df206 	br	1010db20 <__subdf3+0x84>
1010e358:	123ff804 	addi	r8,r2,-32
1010e35c:	01000804 	movi	r4,32
1010e360:	1a10d83a 	srl	r8,r3,r8
1010e364:	11000a26 	beq	r2,r4,1010e390 <__subdf3+0x8f4>
1010e368:	01001004 	movi	r4,64
1010e36c:	2085c83a 	sub	r2,r4,r2
1010e370:	1884983a 	sll	r2,r3,r2
1010e374:	1444b03a 	or	r2,r2,r17
1010e378:	1004c03a 	cmpne	r2,r2,zero
1010e37c:	40a2b03a 	or	r17,r8,r2
1010e380:	0005883a 	mov	r2,zero
1010e384:	003f8606 	br	1010e1a0 <__subdf3+0x704>
1010e388:	0005883a 	mov	r2,zero
1010e38c:	003fdc06 	br	1010e300 <__subdf3+0x864>
1010e390:	0005883a 	mov	r2,zero
1010e394:	003ff706 	br	1010e374 <__subdf3+0x8d8>

1010e398 <__fixdfsi>:
1010e398:	280cd53a 	srli	r6,r5,20
1010e39c:	00c00434 	movhi	r3,16
1010e3a0:	18ffffc4 	addi	r3,r3,-1
1010e3a4:	3181ffcc 	andi	r6,r6,2047
1010e3a8:	01c0ff84 	movi	r7,1022
1010e3ac:	28c6703a 	and	r3,r5,r3
1010e3b0:	280ad7fa 	srli	r5,r5,31
1010e3b4:	3980120e 	bge	r7,r6,1010e400 <__fixdfsi+0x68>
1010e3b8:	00810744 	movi	r2,1053
1010e3bc:	11800c16 	blt	r2,r6,1010e3f0 <__fixdfsi+0x58>
1010e3c0:	00810cc4 	movi	r2,1075
1010e3c4:	1185c83a 	sub	r2,r2,r6
1010e3c8:	01c007c4 	movi	r7,31
1010e3cc:	18c00434 	orhi	r3,r3,16
1010e3d0:	38800d16 	blt	r7,r2,1010e408 <__fixdfsi+0x70>
1010e3d4:	31befb44 	addi	r6,r6,-1043
1010e3d8:	2084d83a 	srl	r2,r4,r2
1010e3dc:	1986983a 	sll	r3,r3,r6
1010e3e0:	1884b03a 	or	r2,r3,r2
1010e3e4:	28000726 	beq	r5,zero,1010e404 <__fixdfsi+0x6c>
1010e3e8:	0085c83a 	sub	r2,zero,r2
1010e3ec:	f800283a 	ret
1010e3f0:	00a00034 	movhi	r2,32768
1010e3f4:	10bfffc4 	addi	r2,r2,-1
1010e3f8:	2885883a 	add	r2,r5,r2
1010e3fc:	f800283a 	ret
1010e400:	0005883a 	mov	r2,zero
1010e404:	f800283a 	ret
1010e408:	008104c4 	movi	r2,1043
1010e40c:	1185c83a 	sub	r2,r2,r6
1010e410:	1884d83a 	srl	r2,r3,r2
1010e414:	003ff306 	br	1010e3e4 <__fixdfsi+0x4c>

1010e418 <__floatsidf>:
1010e418:	defffd04 	addi	sp,sp,-12
1010e41c:	dfc00215 	stw	ra,8(sp)
1010e420:	dc400115 	stw	r17,4(sp)
1010e424:	dc000015 	stw	r16,0(sp)
1010e428:	20002b26 	beq	r4,zero,1010e4d8 <__floatsidf+0xc0>
1010e42c:	2023883a 	mov	r17,r4
1010e430:	2020d7fa 	srli	r16,r4,31
1010e434:	20002d16 	blt	r4,zero,1010e4ec <__floatsidf+0xd4>
1010e438:	8809883a 	mov	r4,r17
1010e43c:	010e59c0 	call	1010e59c <__clzsi2>
1010e440:	01410784 	movi	r5,1054
1010e444:	288bc83a 	sub	r5,r5,r2
1010e448:	01010cc4 	movi	r4,1075
1010e44c:	2149c83a 	sub	r4,r4,r5
1010e450:	00c007c4 	movi	r3,31
1010e454:	1900160e 	bge	r3,r4,1010e4b0 <__floatsidf+0x98>
1010e458:	00c104c4 	movi	r3,1043
1010e45c:	1947c83a 	sub	r3,r3,r5
1010e460:	88c6983a 	sll	r3,r17,r3
1010e464:	00800434 	movhi	r2,16
1010e468:	10bfffc4 	addi	r2,r2,-1
1010e46c:	1886703a 	and	r3,r3,r2
1010e470:	2941ffcc 	andi	r5,r5,2047
1010e474:	800d883a 	mov	r6,r16
1010e478:	0005883a 	mov	r2,zero
1010e47c:	280a953a 	slli	r5,r5,20
1010e480:	31803fcc 	andi	r6,r6,255
1010e484:	01000434 	movhi	r4,16
1010e488:	300c97fa 	slli	r6,r6,31
1010e48c:	213fffc4 	addi	r4,r4,-1
1010e490:	1906703a 	and	r3,r3,r4
1010e494:	1946b03a 	or	r3,r3,r5
1010e498:	1986b03a 	or	r3,r3,r6
1010e49c:	dfc00217 	ldw	ra,8(sp)
1010e4a0:	dc400117 	ldw	r17,4(sp)
1010e4a4:	dc000017 	ldw	r16,0(sp)
1010e4a8:	dec00304 	addi	sp,sp,12
1010e4ac:	f800283a 	ret
1010e4b0:	00c002c4 	movi	r3,11
1010e4b4:	1887c83a 	sub	r3,r3,r2
1010e4b8:	88c6d83a 	srl	r3,r17,r3
1010e4bc:	8904983a 	sll	r2,r17,r4
1010e4c0:	01000434 	movhi	r4,16
1010e4c4:	213fffc4 	addi	r4,r4,-1
1010e4c8:	2941ffcc 	andi	r5,r5,2047
1010e4cc:	1906703a 	and	r3,r3,r4
1010e4d0:	800d883a 	mov	r6,r16
1010e4d4:	003fe906 	br	1010e47c <__floatsidf+0x64>
1010e4d8:	000d883a 	mov	r6,zero
1010e4dc:	000b883a 	mov	r5,zero
1010e4e0:	0007883a 	mov	r3,zero
1010e4e4:	0005883a 	mov	r2,zero
1010e4e8:	003fe406 	br	1010e47c <__floatsidf+0x64>
1010e4ec:	0123c83a 	sub	r17,zero,r4
1010e4f0:	003fd106 	br	1010e438 <__floatsidf+0x20>

1010e4f4 <__floatunsidf>:
1010e4f4:	defffe04 	addi	sp,sp,-8
1010e4f8:	dc000015 	stw	r16,0(sp)
1010e4fc:	dfc00115 	stw	ra,4(sp)
1010e500:	2021883a 	mov	r16,r4
1010e504:	20002226 	beq	r4,zero,1010e590 <__floatunsidf+0x9c>
1010e508:	010e59c0 	call	1010e59c <__clzsi2>
1010e50c:	01010784 	movi	r4,1054
1010e510:	2089c83a 	sub	r4,r4,r2
1010e514:	01810cc4 	movi	r6,1075
1010e518:	310dc83a 	sub	r6,r6,r4
1010e51c:	00c007c4 	movi	r3,31
1010e520:	1980120e 	bge	r3,r6,1010e56c <__floatunsidf+0x78>
1010e524:	00c104c4 	movi	r3,1043
1010e528:	1907c83a 	sub	r3,r3,r4
1010e52c:	80ca983a 	sll	r5,r16,r3
1010e530:	00800434 	movhi	r2,16
1010e534:	10bfffc4 	addi	r2,r2,-1
1010e538:	2101ffcc 	andi	r4,r4,2047
1010e53c:	0021883a 	mov	r16,zero
1010e540:	288a703a 	and	r5,r5,r2
1010e544:	2008953a 	slli	r4,r4,20
1010e548:	00c00434 	movhi	r3,16
1010e54c:	18ffffc4 	addi	r3,r3,-1
1010e550:	28c6703a 	and	r3,r5,r3
1010e554:	8005883a 	mov	r2,r16
1010e558:	1906b03a 	or	r3,r3,r4
1010e55c:	dfc00117 	ldw	ra,4(sp)
1010e560:	dc000017 	ldw	r16,0(sp)
1010e564:	dec00204 	addi	sp,sp,8
1010e568:	f800283a 	ret
1010e56c:	00c002c4 	movi	r3,11
1010e570:	188bc83a 	sub	r5,r3,r2
1010e574:	814ad83a 	srl	r5,r16,r5
1010e578:	00c00434 	movhi	r3,16
1010e57c:	18ffffc4 	addi	r3,r3,-1
1010e580:	81a0983a 	sll	r16,r16,r6
1010e584:	2101ffcc 	andi	r4,r4,2047
1010e588:	28ca703a 	and	r5,r5,r3
1010e58c:	003fed06 	br	1010e544 <__floatunsidf+0x50>
1010e590:	0009883a 	mov	r4,zero
1010e594:	000b883a 	mov	r5,zero
1010e598:	003fea06 	br	1010e544 <__floatunsidf+0x50>

1010e59c <__clzsi2>:
1010e59c:	00bfffd4 	movui	r2,65535
1010e5a0:	11000536 	bltu	r2,r4,1010e5b8 <__clzsi2+0x1c>
1010e5a4:	00803fc4 	movi	r2,255
1010e5a8:	11000f36 	bltu	r2,r4,1010e5e8 <__clzsi2+0x4c>
1010e5ac:	00800804 	movi	r2,32
1010e5b0:	0007883a 	mov	r3,zero
1010e5b4:	00000506 	br	1010e5cc <__clzsi2+0x30>
1010e5b8:	00804034 	movhi	r2,256
1010e5bc:	10bfffc4 	addi	r2,r2,-1
1010e5c0:	11000c2e 	bgeu	r2,r4,1010e5f4 <__clzsi2+0x58>
1010e5c4:	00800204 	movi	r2,8
1010e5c8:	00c00604 	movi	r3,24
1010e5cc:	20c8d83a 	srl	r4,r4,r3
1010e5d0:	00c40474 	movhi	r3,4113
1010e5d4:	18c42304 	addi	r3,r3,4236
1010e5d8:	1909883a 	add	r4,r3,r4
1010e5dc:	20c00003 	ldbu	r3,0(r4)
1010e5e0:	10c5c83a 	sub	r2,r2,r3
1010e5e4:	f800283a 	ret
1010e5e8:	00800604 	movi	r2,24
1010e5ec:	00c00204 	movi	r3,8
1010e5f0:	003ff606 	br	1010e5cc <__clzsi2+0x30>
1010e5f4:	00800404 	movi	r2,16
1010e5f8:	1007883a 	mov	r3,r2
1010e5fc:	003ff306 	br	1010e5cc <__clzsi2+0x30>

1010e600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e600:	defffe04 	addi	sp,sp,-8
1010e604:	dfc00115 	stw	ra,4(sp)
1010e608:	df000015 	stw	fp,0(sp)
1010e60c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e610:	d0a00b17 	ldw	r2,-32724(gp)
1010e614:	10000326 	beq	r2,zero,1010e624 <alt_get_errno+0x24>
1010e618:	d0a00b17 	ldw	r2,-32724(gp)
1010e61c:	103ee83a 	callr	r2
1010e620:	00000106 	br	1010e628 <alt_get_errno+0x28>
1010e624:	d0a6d104 	addi	r2,gp,-25788
}
1010e628:	e037883a 	mov	sp,fp
1010e62c:	dfc00117 	ldw	ra,4(sp)
1010e630:	df000017 	ldw	fp,0(sp)
1010e634:	dec00204 	addi	sp,sp,8
1010e638:	f800283a 	ret

1010e63c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010e63c:	defffb04 	addi	sp,sp,-20
1010e640:	dfc00415 	stw	ra,16(sp)
1010e644:	df000315 	stw	fp,12(sp)
1010e648:	df000304 	addi	fp,sp,12
1010e64c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010e650:	e0bfff17 	ldw	r2,-4(fp)
1010e654:	10000616 	blt	r2,zero,1010e670 <close+0x34>
1010e658:	e0bfff17 	ldw	r2,-4(fp)
1010e65c:	10c00324 	muli	r3,r2,12
1010e660:	00840474 	movhi	r2,4113
1010e664:	1086a304 	addi	r2,r2,6796
1010e668:	1885883a 	add	r2,r3,r2
1010e66c:	00000106 	br	1010e674 <close+0x38>
1010e670:	0005883a 	mov	r2,zero
1010e674:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010e678:	e0bffd17 	ldw	r2,-12(fp)
1010e67c:	10001926 	beq	r2,zero,1010e6e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010e680:	e0bffd17 	ldw	r2,-12(fp)
1010e684:	10800017 	ldw	r2,0(r2)
1010e688:	10800417 	ldw	r2,16(r2)
1010e68c:	10000626 	beq	r2,zero,1010e6a8 <close+0x6c>
1010e690:	e0bffd17 	ldw	r2,-12(fp)
1010e694:	10800017 	ldw	r2,0(r2)
1010e698:	10800417 	ldw	r2,16(r2)
1010e69c:	e13ffd17 	ldw	r4,-12(fp)
1010e6a0:	103ee83a 	callr	r2
1010e6a4:	00000106 	br	1010e6ac <close+0x70>
1010e6a8:	0005883a 	mov	r2,zero
1010e6ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010e6b0:	e13fff17 	ldw	r4,-4(fp)
1010e6b4:	010ecfc0 	call	1010ecfc <alt_release_fd>
    if (rval < 0)
1010e6b8:	e0bffe17 	ldw	r2,-8(fp)
1010e6bc:	1000070e 	bge	r2,zero,1010e6dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010e6c0:	010e6000 	call	1010e600 <alt_get_errno>
1010e6c4:	1007883a 	mov	r3,r2
1010e6c8:	e0bffe17 	ldw	r2,-8(fp)
1010e6cc:	0085c83a 	sub	r2,zero,r2
1010e6d0:	18800015 	stw	r2,0(r3)
      return -1;
1010e6d4:	00bfffc4 	movi	r2,-1
1010e6d8:	00000706 	br	1010e6f8 <close+0xbc>
    }
    return 0;
1010e6dc:	0005883a 	mov	r2,zero
1010e6e0:	00000506 	br	1010e6f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e6e4:	010e6000 	call	1010e600 <alt_get_errno>
1010e6e8:	1007883a 	mov	r3,r2
1010e6ec:	00801444 	movi	r2,81
1010e6f0:	18800015 	stw	r2,0(r3)
    return -1;
1010e6f4:	00bfffc4 	movi	r2,-1
  }
}
1010e6f8:	e037883a 	mov	sp,fp
1010e6fc:	dfc00117 	ldw	ra,4(sp)
1010e700:	df000017 	ldw	fp,0(sp)
1010e704:	dec00204 	addi	sp,sp,8
1010e708:	f800283a 	ret

1010e70c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e70c:	defffc04 	addi	sp,sp,-16
1010e710:	df000315 	stw	fp,12(sp)
1010e714:	df000304 	addi	fp,sp,12
1010e718:	e13ffd15 	stw	r4,-12(fp)
1010e71c:	e17ffe15 	stw	r5,-8(fp)
1010e720:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e724:	e0bfff17 	ldw	r2,-4(fp)
}
1010e728:	e037883a 	mov	sp,fp
1010e72c:	df000017 	ldw	fp,0(sp)
1010e730:	dec00104 	addi	sp,sp,4
1010e734:	f800283a 	ret

1010e738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e738:	defffe04 	addi	sp,sp,-8
1010e73c:	dfc00115 	stw	ra,4(sp)
1010e740:	df000015 	stw	fp,0(sp)
1010e744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e748:	d0a00b17 	ldw	r2,-32724(gp)
1010e74c:	10000326 	beq	r2,zero,1010e75c <alt_get_errno+0x24>
1010e750:	d0a00b17 	ldw	r2,-32724(gp)
1010e754:	103ee83a 	callr	r2
1010e758:	00000106 	br	1010e760 <alt_get_errno+0x28>
1010e75c:	d0a6d104 	addi	r2,gp,-25788
}
1010e760:	e037883a 	mov	sp,fp
1010e764:	dfc00117 	ldw	ra,4(sp)
1010e768:	df000017 	ldw	fp,0(sp)
1010e76c:	dec00204 	addi	sp,sp,8
1010e770:	f800283a 	ret

1010e774 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e774:	defffb04 	addi	sp,sp,-20
1010e778:	dfc00415 	stw	ra,16(sp)
1010e77c:	df000315 	stw	fp,12(sp)
1010e780:	df000304 	addi	fp,sp,12
1010e784:	e13ffe15 	stw	r4,-8(fp)
1010e788:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e78c:	e0bffe17 	ldw	r2,-8(fp)
1010e790:	10000616 	blt	r2,zero,1010e7ac <fstat+0x38>
1010e794:	e0bffe17 	ldw	r2,-8(fp)
1010e798:	10c00324 	muli	r3,r2,12
1010e79c:	00840474 	movhi	r2,4113
1010e7a0:	1086a304 	addi	r2,r2,6796
1010e7a4:	1885883a 	add	r2,r3,r2
1010e7a8:	00000106 	br	1010e7b0 <fstat+0x3c>
1010e7ac:	0005883a 	mov	r2,zero
1010e7b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e7b4:	e0bffd17 	ldw	r2,-12(fp)
1010e7b8:	10001026 	beq	r2,zero,1010e7fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e7bc:	e0bffd17 	ldw	r2,-12(fp)
1010e7c0:	10800017 	ldw	r2,0(r2)
1010e7c4:	10800817 	ldw	r2,32(r2)
1010e7c8:	10000726 	beq	r2,zero,1010e7e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e7cc:	e0bffd17 	ldw	r2,-12(fp)
1010e7d0:	10800017 	ldw	r2,0(r2)
1010e7d4:	10800817 	ldw	r2,32(r2)
1010e7d8:	e17fff17 	ldw	r5,-4(fp)
1010e7dc:	e13ffd17 	ldw	r4,-12(fp)
1010e7e0:	103ee83a 	callr	r2
1010e7e4:	00000a06 	br	1010e810 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e7e8:	e0bfff17 	ldw	r2,-4(fp)
1010e7ec:	00c80004 	movi	r3,8192
1010e7f0:	10c00115 	stw	r3,4(r2)
      return 0;
1010e7f4:	0005883a 	mov	r2,zero
1010e7f8:	00000506 	br	1010e810 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e7fc:	010e7380 	call	1010e738 <alt_get_errno>
1010e800:	1007883a 	mov	r3,r2
1010e804:	00801444 	movi	r2,81
1010e808:	18800015 	stw	r2,0(r3)
    return -1;
1010e80c:	00bfffc4 	movi	r2,-1
  }
}
1010e810:	e037883a 	mov	sp,fp
1010e814:	dfc00117 	ldw	ra,4(sp)
1010e818:	df000017 	ldw	fp,0(sp)
1010e81c:	dec00204 	addi	sp,sp,8
1010e820:	f800283a 	ret

1010e824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e824:	defffe04 	addi	sp,sp,-8
1010e828:	dfc00115 	stw	ra,4(sp)
1010e82c:	df000015 	stw	fp,0(sp)
1010e830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e834:	d0a00b17 	ldw	r2,-32724(gp)
1010e838:	10000326 	beq	r2,zero,1010e848 <alt_get_errno+0x24>
1010e83c:	d0a00b17 	ldw	r2,-32724(gp)
1010e840:	103ee83a 	callr	r2
1010e844:	00000106 	br	1010e84c <alt_get_errno+0x28>
1010e848:	d0a6d104 	addi	r2,gp,-25788
}
1010e84c:	e037883a 	mov	sp,fp
1010e850:	dfc00117 	ldw	ra,4(sp)
1010e854:	df000017 	ldw	fp,0(sp)
1010e858:	dec00204 	addi	sp,sp,8
1010e85c:	f800283a 	ret

1010e860 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010e860:	deffed04 	addi	sp,sp,-76
1010e864:	dfc01215 	stw	ra,72(sp)
1010e868:	df001115 	stw	fp,68(sp)
1010e86c:	df001104 	addi	fp,sp,68
1010e870:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e874:	e0bfff17 	ldw	r2,-4(fp)
1010e878:	10000616 	blt	r2,zero,1010e894 <isatty+0x34>
1010e87c:	e0bfff17 	ldw	r2,-4(fp)
1010e880:	10c00324 	muli	r3,r2,12
1010e884:	00840474 	movhi	r2,4113
1010e888:	1086a304 	addi	r2,r2,6796
1010e88c:	1885883a 	add	r2,r3,r2
1010e890:	00000106 	br	1010e898 <isatty+0x38>
1010e894:	0005883a 	mov	r2,zero
1010e898:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010e89c:	e0bfef17 	ldw	r2,-68(fp)
1010e8a0:	10000e26 	beq	r2,zero,1010e8dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010e8a4:	e0bfef17 	ldw	r2,-68(fp)
1010e8a8:	10800017 	ldw	r2,0(r2)
1010e8ac:	10800817 	ldw	r2,32(r2)
1010e8b0:	1000021e 	bne	r2,zero,1010e8bc <isatty+0x5c>
    {
      return 1;
1010e8b4:	00800044 	movi	r2,1
1010e8b8:	00000d06 	br	1010e8f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010e8bc:	e0bff004 	addi	r2,fp,-64
1010e8c0:	100b883a 	mov	r5,r2
1010e8c4:	e13fff17 	ldw	r4,-4(fp)
1010e8c8:	010e7740 	call	1010e774 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010e8cc:	e0bff117 	ldw	r2,-60(fp)
1010e8d0:	10880020 	cmpeqi	r2,r2,8192
1010e8d4:	10803fcc 	andi	r2,r2,255
1010e8d8:	00000506 	br	1010e8f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e8dc:	010e8240 	call	1010e824 <alt_get_errno>
1010e8e0:	1007883a 	mov	r3,r2
1010e8e4:	00801444 	movi	r2,81
1010e8e8:	18800015 	stw	r2,0(r3)
    return 0;
1010e8ec:	0005883a 	mov	r2,zero
  }
}
1010e8f0:	e037883a 	mov	sp,fp
1010e8f4:	dfc00117 	ldw	ra,4(sp)
1010e8f8:	df000017 	ldw	fp,0(sp)
1010e8fc:	dec00204 	addi	sp,sp,8
1010e900:	f800283a 	ret

1010e904 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010e904:	defffc04 	addi	sp,sp,-16
1010e908:	df000315 	stw	fp,12(sp)
1010e90c:	df000304 	addi	fp,sp,12
1010e910:	e13ffd15 	stw	r4,-12(fp)
1010e914:	e17ffe15 	stw	r5,-8(fp)
1010e918:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010e91c:	e0fffe17 	ldw	r3,-8(fp)
1010e920:	e0bffd17 	ldw	r2,-12(fp)
1010e924:	18800c26 	beq	r3,r2,1010e958 <alt_load_section+0x54>
  {
    while( to != end )
1010e928:	00000806 	br	1010e94c <alt_load_section+0x48>
    {
      *to++ = *from++;
1010e92c:	e0bffe17 	ldw	r2,-8(fp)
1010e930:	10c00104 	addi	r3,r2,4
1010e934:	e0fffe15 	stw	r3,-8(fp)
1010e938:	e0fffd17 	ldw	r3,-12(fp)
1010e93c:	19000104 	addi	r4,r3,4
1010e940:	e13ffd15 	stw	r4,-12(fp)
1010e944:	18c00017 	ldw	r3,0(r3)
1010e948:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010e94c:	e0fffe17 	ldw	r3,-8(fp)
1010e950:	e0bfff17 	ldw	r2,-4(fp)
1010e954:	18bff51e 	bne	r3,r2,1010e92c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
1010e958:	0001883a 	nop
1010e95c:	e037883a 	mov	sp,fp
1010e960:	df000017 	ldw	fp,0(sp)
1010e964:	dec00104 	addi	sp,sp,4
1010e968:	f800283a 	ret

1010e96c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010e96c:	defffe04 	addi	sp,sp,-8
1010e970:	dfc00115 	stw	ra,4(sp)
1010e974:	df000015 	stw	fp,0(sp)
1010e978:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010e97c:	01840474 	movhi	r6,4113
1010e980:	318b2b04 	addi	r6,r6,11436
1010e984:	01440474 	movhi	r5,4113
1010e988:	29447004 	addi	r5,r5,4544
1010e98c:	01040474 	movhi	r4,4113
1010e990:	210b2b04 	addi	r4,r4,11436
1010e994:	010e9040 	call	1010e904 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010e998:	01840434 	movhi	r6,4112
1010e99c:	31809104 	addi	r6,r6,580
1010e9a0:	01440434 	movhi	r5,4112
1010e9a4:	29400804 	addi	r5,r5,32
1010e9a8:	01040434 	movhi	r4,4112
1010e9ac:	21000804 	addi	r4,r4,32
1010e9b0:	010e9040 	call	1010e904 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010e9b4:	01840474 	movhi	r6,4113
1010e9b8:	31847004 	addi	r6,r6,4544
1010e9bc:	01440474 	movhi	r5,4113
1010e9c0:	29438a04 	addi	r5,r5,3624
1010e9c4:	01040474 	movhi	r4,4113
1010e9c8:	21038a04 	addi	r4,r4,3624
1010e9cc:	010e9040 	call	1010e904 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010e9d0:	010fd140 	call	1010fd14 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010e9d4:	010fefc0 	call	1010fefc <alt_icache_flush_all>
}
1010e9d8:	0001883a 	nop
1010e9dc:	e037883a 	mov	sp,fp
1010e9e0:	dfc00117 	ldw	ra,4(sp)
1010e9e4:	df000017 	ldw	fp,0(sp)
1010e9e8:	dec00204 	addi	sp,sp,8
1010e9ec:	f800283a 	ret

1010e9f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e9f0:	defffe04 	addi	sp,sp,-8
1010e9f4:	dfc00115 	stw	ra,4(sp)
1010e9f8:	df000015 	stw	fp,0(sp)
1010e9fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ea00:	d0a00b17 	ldw	r2,-32724(gp)
1010ea04:	10000326 	beq	r2,zero,1010ea14 <alt_get_errno+0x24>
1010ea08:	d0a00b17 	ldw	r2,-32724(gp)
1010ea0c:	103ee83a 	callr	r2
1010ea10:	00000106 	br	1010ea18 <alt_get_errno+0x28>
1010ea14:	d0a6d104 	addi	r2,gp,-25788
}
1010ea18:	e037883a 	mov	sp,fp
1010ea1c:	dfc00117 	ldw	ra,4(sp)
1010ea20:	df000017 	ldw	fp,0(sp)
1010ea24:	dec00204 	addi	sp,sp,8
1010ea28:	f800283a 	ret

1010ea2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010ea2c:	defff904 	addi	sp,sp,-28
1010ea30:	dfc00615 	stw	ra,24(sp)
1010ea34:	df000515 	stw	fp,20(sp)
1010ea38:	df000504 	addi	fp,sp,20
1010ea3c:	e13ffd15 	stw	r4,-12(fp)
1010ea40:	e17ffe15 	stw	r5,-8(fp)
1010ea44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010ea48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ea4c:	e0bffd17 	ldw	r2,-12(fp)
1010ea50:	10000616 	blt	r2,zero,1010ea6c <lseek+0x40>
1010ea54:	e0bffd17 	ldw	r2,-12(fp)
1010ea58:	10c00324 	muli	r3,r2,12
1010ea5c:	00840474 	movhi	r2,4113
1010ea60:	1086a304 	addi	r2,r2,6796
1010ea64:	1885883a 	add	r2,r3,r2
1010ea68:	00000106 	br	1010ea70 <lseek+0x44>
1010ea6c:	0005883a 	mov	r2,zero
1010ea70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010ea74:	e0bffc17 	ldw	r2,-16(fp)
1010ea78:	10001026 	beq	r2,zero,1010eabc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010ea7c:	e0bffc17 	ldw	r2,-16(fp)
1010ea80:	10800017 	ldw	r2,0(r2)
1010ea84:	10800717 	ldw	r2,28(r2)
1010ea88:	10000926 	beq	r2,zero,1010eab0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010ea8c:	e0bffc17 	ldw	r2,-16(fp)
1010ea90:	10800017 	ldw	r2,0(r2)
1010ea94:	10800717 	ldw	r2,28(r2)
1010ea98:	e1bfff17 	ldw	r6,-4(fp)
1010ea9c:	e17ffe17 	ldw	r5,-8(fp)
1010eaa0:	e13ffc17 	ldw	r4,-16(fp)
1010eaa4:	103ee83a 	callr	r2
1010eaa8:	e0bffb15 	stw	r2,-20(fp)
1010eaac:	00000506 	br	1010eac4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010eab0:	00bfde84 	movi	r2,-134
1010eab4:	e0bffb15 	stw	r2,-20(fp)
1010eab8:	00000206 	br	1010eac4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010eabc:	00bfebc4 	movi	r2,-81
1010eac0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010eac4:	e0bffb17 	ldw	r2,-20(fp)
1010eac8:	1000070e 	bge	r2,zero,1010eae8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010eacc:	010e9f00 	call	1010e9f0 <alt_get_errno>
1010ead0:	1007883a 	mov	r3,r2
1010ead4:	e0bffb17 	ldw	r2,-20(fp)
1010ead8:	0085c83a 	sub	r2,zero,r2
1010eadc:	18800015 	stw	r2,0(r3)
    rc = -1;
1010eae0:	00bfffc4 	movi	r2,-1
1010eae4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010eae8:	e0bffb17 	ldw	r2,-20(fp)
}
1010eaec:	e037883a 	mov	sp,fp
1010eaf0:	dfc00117 	ldw	ra,4(sp)
1010eaf4:	df000017 	ldw	fp,0(sp)
1010eaf8:	dec00204 	addi	sp,sp,8
1010eafc:	f800283a 	ret

1010eb00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010eb00:	defffd04 	addi	sp,sp,-12
1010eb04:	dfc00215 	stw	ra,8(sp)
1010eb08:	df000115 	stw	fp,4(sp)
1010eb0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010eb10:	0009883a 	mov	r4,zero
1010eb14:	010efa80 	call	1010efa8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010eb18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010eb1c:	010efe00 	call	1010efe0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010eb20:	01840474 	movhi	r6,4113
1010eb24:	31846604 	addi	r6,r6,4504
1010eb28:	01440474 	movhi	r5,4113
1010eb2c:	29446604 	addi	r5,r5,4504
1010eb30:	01040474 	movhi	r4,4113
1010eb34:	21046604 	addi	r4,r4,4504
1010eb38:	01102940 	call	10110294 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010eb3c:	010fe3c0 	call	1010fe3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010eb40:	01040474 	movhi	r4,4113
1010eb44:	213fa704 	addi	r4,r4,-356
1010eb48:	0110a940 	call	10110a94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010eb4c:	d0a6d217 	ldw	r2,-25784(gp)
1010eb50:	d0e6d317 	ldw	r3,-25780(gp)
1010eb54:	d126d417 	ldw	r4,-25776(gp)
1010eb58:	200d883a 	mov	r6,r4
1010eb5c:	180b883a 	mov	r5,r3
1010eb60:	1009883a 	mov	r4,r2
1010eb64:	01004f80 	call	101004f8 <main>
1010eb68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010eb6c:	01000044 	movi	r4,1
1010eb70:	010e63c0 	call	1010e63c <close>
  exit (result);
1010eb74:	e13fff17 	ldw	r4,-4(fp)
1010eb78:	0110aa80 	call	10110aa8 <exit>

1010eb7c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010eb7c:	defffe04 	addi	sp,sp,-8
1010eb80:	df000115 	stw	fp,4(sp)
1010eb84:	df000104 	addi	fp,sp,4
1010eb88:	e13fff15 	stw	r4,-4(fp)
}
1010eb8c:	0001883a 	nop
1010eb90:	e037883a 	mov	sp,fp
1010eb94:	df000017 	ldw	fp,0(sp)
1010eb98:	dec00104 	addi	sp,sp,4
1010eb9c:	f800283a 	ret

1010eba0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010eba0:	defffe04 	addi	sp,sp,-8
1010eba4:	df000115 	stw	fp,4(sp)
1010eba8:	df000104 	addi	fp,sp,4
1010ebac:	e13fff15 	stw	r4,-4(fp)
}
1010ebb0:	0001883a 	nop
1010ebb4:	e037883a 	mov	sp,fp
1010ebb8:	df000017 	ldw	fp,0(sp)
1010ebbc:	dec00104 	addi	sp,sp,4
1010ebc0:	f800283a 	ret

1010ebc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ebc4:	defffe04 	addi	sp,sp,-8
1010ebc8:	dfc00115 	stw	ra,4(sp)
1010ebcc:	df000015 	stw	fp,0(sp)
1010ebd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ebd4:	d0a00b17 	ldw	r2,-32724(gp)
1010ebd8:	10000326 	beq	r2,zero,1010ebe8 <alt_get_errno+0x24>
1010ebdc:	d0a00b17 	ldw	r2,-32724(gp)
1010ebe0:	103ee83a 	callr	r2
1010ebe4:	00000106 	br	1010ebec <alt_get_errno+0x28>
1010ebe8:	d0a6d104 	addi	r2,gp,-25788
}
1010ebec:	e037883a 	mov	sp,fp
1010ebf0:	dfc00117 	ldw	ra,4(sp)
1010ebf4:	df000017 	ldw	fp,0(sp)
1010ebf8:	dec00204 	addi	sp,sp,8
1010ebfc:	f800283a 	ret

1010ec00 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010ec00:	defff904 	addi	sp,sp,-28
1010ec04:	dfc00615 	stw	ra,24(sp)
1010ec08:	df000515 	stw	fp,20(sp)
1010ec0c:	df000504 	addi	fp,sp,20
1010ec10:	e13ffd15 	stw	r4,-12(fp)
1010ec14:	e17ffe15 	stw	r5,-8(fp)
1010ec18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ec1c:	e0bffd17 	ldw	r2,-12(fp)
1010ec20:	10000616 	blt	r2,zero,1010ec3c <read+0x3c>
1010ec24:	e0bffd17 	ldw	r2,-12(fp)
1010ec28:	10c00324 	muli	r3,r2,12
1010ec2c:	00840474 	movhi	r2,4113
1010ec30:	1086a304 	addi	r2,r2,6796
1010ec34:	1885883a 	add	r2,r3,r2
1010ec38:	00000106 	br	1010ec40 <read+0x40>
1010ec3c:	0005883a 	mov	r2,zero
1010ec40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ec44:	e0bffb17 	ldw	r2,-20(fp)
1010ec48:	10002226 	beq	r2,zero,1010ecd4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ec4c:	e0bffb17 	ldw	r2,-20(fp)
1010ec50:	10800217 	ldw	r2,8(r2)
1010ec54:	108000cc 	andi	r2,r2,3
1010ec58:	10800060 	cmpeqi	r2,r2,1
1010ec5c:	1000181e 	bne	r2,zero,1010ecc0 <read+0xc0>
        (fd->dev->read))
1010ec60:	e0bffb17 	ldw	r2,-20(fp)
1010ec64:	10800017 	ldw	r2,0(r2)
1010ec68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ec6c:	10001426 	beq	r2,zero,1010ecc0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010ec70:	e0bffb17 	ldw	r2,-20(fp)
1010ec74:	10800017 	ldw	r2,0(r2)
1010ec78:	10800517 	ldw	r2,20(r2)
1010ec7c:	e0ffff17 	ldw	r3,-4(fp)
1010ec80:	180d883a 	mov	r6,r3
1010ec84:	e17ffe17 	ldw	r5,-8(fp)
1010ec88:	e13ffb17 	ldw	r4,-20(fp)
1010ec8c:	103ee83a 	callr	r2
1010ec90:	e0bffc15 	stw	r2,-16(fp)
1010ec94:	e0bffc17 	ldw	r2,-16(fp)
1010ec98:	1000070e 	bge	r2,zero,1010ecb8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010ec9c:	010ebc40 	call	1010ebc4 <alt_get_errno>
1010eca0:	1007883a 	mov	r3,r2
1010eca4:	e0bffc17 	ldw	r2,-16(fp)
1010eca8:	0085c83a 	sub	r2,zero,r2
1010ecac:	18800015 	stw	r2,0(r3)
          return -1;
1010ecb0:	00bfffc4 	movi	r2,-1
1010ecb4:	00000c06 	br	1010ece8 <read+0xe8>
        }
        return rval;
1010ecb8:	e0bffc17 	ldw	r2,-16(fp)
1010ecbc:	00000a06 	br	1010ece8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010ecc0:	010ebc40 	call	1010ebc4 <alt_get_errno>
1010ecc4:	1007883a 	mov	r3,r2
1010ecc8:	00800344 	movi	r2,13
1010eccc:	18800015 	stw	r2,0(r3)
1010ecd0:	00000406 	br	1010ece4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010ecd4:	010ebc40 	call	1010ebc4 <alt_get_errno>
1010ecd8:	1007883a 	mov	r3,r2
1010ecdc:	00801444 	movi	r2,81
1010ece0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010ece4:	00bfffc4 	movi	r2,-1
}
1010ece8:	e037883a 	mov	sp,fp
1010ecec:	dfc00117 	ldw	ra,4(sp)
1010ecf0:	df000017 	ldw	fp,0(sp)
1010ecf4:	dec00204 	addi	sp,sp,8
1010ecf8:	f800283a 	ret

1010ecfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010ecfc:	defffe04 	addi	sp,sp,-8
1010ed00:	df000115 	stw	fp,4(sp)
1010ed04:	df000104 	addi	fp,sp,4
1010ed08:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010ed0c:	e0bfff17 	ldw	r2,-4(fp)
1010ed10:	108000d0 	cmplti	r2,r2,3
1010ed14:	10000d1e 	bne	r2,zero,1010ed4c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010ed18:	00840474 	movhi	r2,4113
1010ed1c:	1086a304 	addi	r2,r2,6796
1010ed20:	e0ffff17 	ldw	r3,-4(fp)
1010ed24:	18c00324 	muli	r3,r3,12
1010ed28:	10c5883a 	add	r2,r2,r3
1010ed2c:	10800204 	addi	r2,r2,8
1010ed30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010ed34:	00840474 	movhi	r2,4113
1010ed38:	1086a304 	addi	r2,r2,6796
1010ed3c:	e0ffff17 	ldw	r3,-4(fp)
1010ed40:	18c00324 	muli	r3,r3,12
1010ed44:	10c5883a 	add	r2,r2,r3
1010ed48:	10000015 	stw	zero,0(r2)
  }
}
1010ed4c:	0001883a 	nop
1010ed50:	e037883a 	mov	sp,fp
1010ed54:	df000017 	ldw	fp,0(sp)
1010ed58:	dec00104 	addi	sp,sp,4
1010ed5c:	f800283a 	ret

1010ed60 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010ed60:	defff904 	addi	sp,sp,-28
1010ed64:	df000615 	stw	fp,24(sp)
1010ed68:	df000604 	addi	fp,sp,24
1010ed6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ed70:	0005303a 	rdctl	r2,status
1010ed74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ed78:	e0fffe17 	ldw	r3,-8(fp)
1010ed7c:	00bfff84 	movi	r2,-2
1010ed80:	1884703a 	and	r2,r3,r2
1010ed84:	1001703a 	wrctl	status,r2
  
  return context;
1010ed88:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010ed8c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010ed90:	d0a00c17 	ldw	r2,-32720(gp)
1010ed94:	10c000c4 	addi	r3,r2,3
1010ed98:	00bfff04 	movi	r2,-4
1010ed9c:	1884703a 	and	r2,r3,r2
1010eda0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010eda4:	d0e00c17 	ldw	r3,-32720(gp)
1010eda8:	e0bfff17 	ldw	r2,-4(fp)
1010edac:	1887883a 	add	r3,r3,r2
1010edb0:	008404b4 	movhi	r2,4114
1010edb4:	10800004 	addi	r2,r2,0
1010edb8:	10c0062e 	bgeu	r2,r3,1010edd4 <sbrk+0x74>
1010edbc:	e0bffb17 	ldw	r2,-20(fp)
1010edc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010edc4:	e0bffa17 	ldw	r2,-24(fp)
1010edc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010edcc:	00bfffc4 	movi	r2,-1
1010edd0:	00000b06 	br	1010ee00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010edd4:	d0a00c17 	ldw	r2,-32720(gp)
1010edd8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010eddc:	d0e00c17 	ldw	r3,-32720(gp)
1010ede0:	e0bfff17 	ldw	r2,-4(fp)
1010ede4:	1885883a 	add	r2,r3,r2
1010ede8:	d0a00c15 	stw	r2,-32720(gp)
1010edec:	e0bffb17 	ldw	r2,-20(fp)
1010edf0:	e0bffc15 	stw	r2,-16(fp)
1010edf4:	e0bffc17 	ldw	r2,-16(fp)
1010edf8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010edfc:	e0bffd17 	ldw	r2,-12(fp)
} 
1010ee00:	e037883a 	mov	sp,fp
1010ee04:	df000017 	ldw	fp,0(sp)
1010ee08:	dec00104 	addi	sp,sp,4
1010ee0c:	f800283a 	ret

1010ee10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1010ee10:	defffd04 	addi	sp,sp,-12
1010ee14:	dfc00215 	stw	ra,8(sp)
1010ee18:	df000115 	stw	fp,4(sp)
1010ee1c:	df000104 	addi	fp,sp,4
1010ee20:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1010ee24:	e13fff17 	ldw	r4,-4(fp)
1010ee28:	010fbbc0 	call	1010fbbc <alt_busy_sleep>
}
1010ee2c:	e037883a 	mov	sp,fp
1010ee30:	dfc00117 	ldw	ra,4(sp)
1010ee34:	df000017 	ldw	fp,0(sp)
1010ee38:	dec00204 	addi	sp,sp,8
1010ee3c:	f800283a 	ret

1010ee40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ee40:	defffe04 	addi	sp,sp,-8
1010ee44:	dfc00115 	stw	ra,4(sp)
1010ee48:	df000015 	stw	fp,0(sp)
1010ee4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ee50:	d0a00b17 	ldw	r2,-32724(gp)
1010ee54:	10000326 	beq	r2,zero,1010ee64 <alt_get_errno+0x24>
1010ee58:	d0a00b17 	ldw	r2,-32724(gp)
1010ee5c:	103ee83a 	callr	r2
1010ee60:	00000106 	br	1010ee68 <alt_get_errno+0x28>
1010ee64:	d0a6d104 	addi	r2,gp,-25788
}
1010ee68:	e037883a 	mov	sp,fp
1010ee6c:	dfc00117 	ldw	ra,4(sp)
1010ee70:	df000017 	ldw	fp,0(sp)
1010ee74:	dec00204 	addi	sp,sp,8
1010ee78:	f800283a 	ret

1010ee7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010ee7c:	defff904 	addi	sp,sp,-28
1010ee80:	dfc00615 	stw	ra,24(sp)
1010ee84:	df000515 	stw	fp,20(sp)
1010ee88:	df000504 	addi	fp,sp,20
1010ee8c:	e13ffd15 	stw	r4,-12(fp)
1010ee90:	e17ffe15 	stw	r5,-8(fp)
1010ee94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ee98:	e0bffd17 	ldw	r2,-12(fp)
1010ee9c:	10000616 	blt	r2,zero,1010eeb8 <write+0x3c>
1010eea0:	e0bffd17 	ldw	r2,-12(fp)
1010eea4:	10c00324 	muli	r3,r2,12
1010eea8:	00840474 	movhi	r2,4113
1010eeac:	1086a304 	addi	r2,r2,6796
1010eeb0:	1885883a 	add	r2,r3,r2
1010eeb4:	00000106 	br	1010eebc <write+0x40>
1010eeb8:	0005883a 	mov	r2,zero
1010eebc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010eec0:	e0bffb17 	ldw	r2,-20(fp)
1010eec4:	10002126 	beq	r2,zero,1010ef4c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010eec8:	e0bffb17 	ldw	r2,-20(fp)
1010eecc:	10800217 	ldw	r2,8(r2)
1010eed0:	108000cc 	andi	r2,r2,3
1010eed4:	10001826 	beq	r2,zero,1010ef38 <write+0xbc>
1010eed8:	e0bffb17 	ldw	r2,-20(fp)
1010eedc:	10800017 	ldw	r2,0(r2)
1010eee0:	10800617 	ldw	r2,24(r2)
1010eee4:	10001426 	beq	r2,zero,1010ef38 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010eee8:	e0bffb17 	ldw	r2,-20(fp)
1010eeec:	10800017 	ldw	r2,0(r2)
1010eef0:	10800617 	ldw	r2,24(r2)
1010eef4:	e0ffff17 	ldw	r3,-4(fp)
1010eef8:	180d883a 	mov	r6,r3
1010eefc:	e17ffe17 	ldw	r5,-8(fp)
1010ef00:	e13ffb17 	ldw	r4,-20(fp)
1010ef04:	103ee83a 	callr	r2
1010ef08:	e0bffc15 	stw	r2,-16(fp)
1010ef0c:	e0bffc17 	ldw	r2,-16(fp)
1010ef10:	1000070e 	bge	r2,zero,1010ef30 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010ef14:	010ee400 	call	1010ee40 <alt_get_errno>
1010ef18:	1007883a 	mov	r3,r2
1010ef1c:	e0bffc17 	ldw	r2,-16(fp)
1010ef20:	0085c83a 	sub	r2,zero,r2
1010ef24:	18800015 	stw	r2,0(r3)
        return -1;
1010ef28:	00bfffc4 	movi	r2,-1
1010ef2c:	00000c06 	br	1010ef60 <write+0xe4>
      }
      return rval;
1010ef30:	e0bffc17 	ldw	r2,-16(fp)
1010ef34:	00000a06 	br	1010ef60 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010ef38:	010ee400 	call	1010ee40 <alt_get_errno>
1010ef3c:	1007883a 	mov	r3,r2
1010ef40:	00800344 	movi	r2,13
1010ef44:	18800015 	stw	r2,0(r3)
1010ef48:	00000406 	br	1010ef5c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010ef4c:	010ee400 	call	1010ee40 <alt_get_errno>
1010ef50:	1007883a 	mov	r3,r2
1010ef54:	00801444 	movi	r2,81
1010ef58:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010ef5c:	00bfffc4 	movi	r2,-1
}
1010ef60:	e037883a 	mov	sp,fp
1010ef64:	dfc00117 	ldw	ra,4(sp)
1010ef68:	df000017 	ldw	fp,0(sp)
1010ef6c:	dec00204 	addi	sp,sp,8
1010ef70:	f800283a 	ret

1010ef74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010ef74:	defffd04 	addi	sp,sp,-12
1010ef78:	dfc00215 	stw	ra,8(sp)
1010ef7c:	df000115 	stw	fp,4(sp)
1010ef80:	df000104 	addi	fp,sp,4
1010ef84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010ef88:	d1600804 	addi	r5,gp,-32736
1010ef8c:	e13fff17 	ldw	r4,-4(fp)
1010ef90:	010fd980 	call	1010fd98 <alt_dev_llist_insert>
}
1010ef94:	e037883a 	mov	sp,fp
1010ef98:	dfc00117 	ldw	ra,4(sp)
1010ef9c:	df000017 	ldw	fp,0(sp)
1010efa0:	dec00204 	addi	sp,sp,8
1010efa4:	f800283a 	ret

1010efa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010efa8:	defffd04 	addi	sp,sp,-12
1010efac:	dfc00215 	stw	ra,8(sp)
1010efb0:	df000115 	stw	fp,4(sp)
1010efb4:	df000104 	addi	fp,sp,4
1010efb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010efbc:	01107080 	call	10110708 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010efc0:	00800044 	movi	r2,1
1010efc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010efc8:	0001883a 	nop
1010efcc:	e037883a 	mov	sp,fp
1010efd0:	dfc00117 	ldw	ra,4(sp)
1010efd4:	df000017 	ldw	fp,0(sp)
1010efd8:	dec00204 	addi	sp,sp,8
1010efdc:	f800283a 	ret

1010efe0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010efe0:	defffe04 	addi	sp,sp,-8
1010efe4:	dfc00115 	stw	ra,4(sp)
1010efe8:	df000015 	stw	fp,0(sp)
1010efec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010eff0:	000d883a 	mov	r6,zero
1010eff4:	000b883a 	mov	r5,zero
1010eff8:	01040474 	movhi	r4,4113
1010effc:	21070d04 	addi	r4,r4,7220
1010f000:	010f18c0 	call	1010f18c <altera_avalon_jtag_uart_init>
1010f004:	01040474 	movhi	r4,4113
1010f008:	21070304 	addi	r4,r4,7180
1010f00c:	010ef740 	call	1010ef74 <alt_dev_reg>
}
1010f010:	0001883a 	nop
1010f014:	e037883a 	mov	sp,fp
1010f018:	dfc00117 	ldw	ra,4(sp)
1010f01c:	df000017 	ldw	fp,0(sp)
1010f020:	dec00204 	addi	sp,sp,8
1010f024:	f800283a 	ret

1010f028 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f028:	defffa04 	addi	sp,sp,-24
1010f02c:	dfc00515 	stw	ra,20(sp)
1010f030:	df000415 	stw	fp,16(sp)
1010f034:	df000404 	addi	fp,sp,16
1010f038:	e13ffd15 	stw	r4,-12(fp)
1010f03c:	e17ffe15 	stw	r5,-8(fp)
1010f040:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f044:	e0bffd17 	ldw	r2,-12(fp)
1010f048:	10800017 	ldw	r2,0(r2)
1010f04c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f050:	e0bffc17 	ldw	r2,-16(fp)
1010f054:	10c00a04 	addi	r3,r2,40
1010f058:	e0bffd17 	ldw	r2,-12(fp)
1010f05c:	10800217 	ldw	r2,8(r2)
1010f060:	100f883a 	mov	r7,r2
1010f064:	e1bfff17 	ldw	r6,-4(fp)
1010f068:	e17ffe17 	ldw	r5,-8(fp)
1010f06c:	1809883a 	mov	r4,r3
1010f070:	010f6500 	call	1010f650 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f074:	e037883a 	mov	sp,fp
1010f078:	dfc00117 	ldw	ra,4(sp)
1010f07c:	df000017 	ldw	fp,0(sp)
1010f080:	dec00204 	addi	sp,sp,8
1010f084:	f800283a 	ret

1010f088 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f088:	defffa04 	addi	sp,sp,-24
1010f08c:	dfc00515 	stw	ra,20(sp)
1010f090:	df000415 	stw	fp,16(sp)
1010f094:	df000404 	addi	fp,sp,16
1010f098:	e13ffd15 	stw	r4,-12(fp)
1010f09c:	e17ffe15 	stw	r5,-8(fp)
1010f0a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f0a4:	e0bffd17 	ldw	r2,-12(fp)
1010f0a8:	10800017 	ldw	r2,0(r2)
1010f0ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f0b0:	e0bffc17 	ldw	r2,-16(fp)
1010f0b4:	10c00a04 	addi	r3,r2,40
1010f0b8:	e0bffd17 	ldw	r2,-12(fp)
1010f0bc:	10800217 	ldw	r2,8(r2)
1010f0c0:	100f883a 	mov	r7,r2
1010f0c4:	e1bfff17 	ldw	r6,-4(fp)
1010f0c8:	e17ffe17 	ldw	r5,-8(fp)
1010f0cc:	1809883a 	mov	r4,r3
1010f0d0:	010f86c0 	call	1010f86c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f0d4:	e037883a 	mov	sp,fp
1010f0d8:	dfc00117 	ldw	ra,4(sp)
1010f0dc:	df000017 	ldw	fp,0(sp)
1010f0e0:	dec00204 	addi	sp,sp,8
1010f0e4:	f800283a 	ret

1010f0e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f0e8:	defffc04 	addi	sp,sp,-16
1010f0ec:	dfc00315 	stw	ra,12(sp)
1010f0f0:	df000215 	stw	fp,8(sp)
1010f0f4:	df000204 	addi	fp,sp,8
1010f0f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f0fc:	e0bfff17 	ldw	r2,-4(fp)
1010f100:	10800017 	ldw	r2,0(r2)
1010f104:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f108:	e0bffe17 	ldw	r2,-8(fp)
1010f10c:	10c00a04 	addi	r3,r2,40
1010f110:	e0bfff17 	ldw	r2,-4(fp)
1010f114:	10800217 	ldw	r2,8(r2)
1010f118:	100b883a 	mov	r5,r2
1010f11c:	1809883a 	mov	r4,r3
1010f120:	010f4f80 	call	1010f4f8 <altera_avalon_jtag_uart_close>
}
1010f124:	e037883a 	mov	sp,fp
1010f128:	dfc00117 	ldw	ra,4(sp)
1010f12c:	df000017 	ldw	fp,0(sp)
1010f130:	dec00204 	addi	sp,sp,8
1010f134:	f800283a 	ret

1010f138 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f138:	defffa04 	addi	sp,sp,-24
1010f13c:	dfc00515 	stw	ra,20(sp)
1010f140:	df000415 	stw	fp,16(sp)
1010f144:	df000404 	addi	fp,sp,16
1010f148:	e13ffd15 	stw	r4,-12(fp)
1010f14c:	e17ffe15 	stw	r5,-8(fp)
1010f150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f154:	e0bffd17 	ldw	r2,-12(fp)
1010f158:	10800017 	ldw	r2,0(r2)
1010f15c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f160:	e0bffc17 	ldw	r2,-16(fp)
1010f164:	10800a04 	addi	r2,r2,40
1010f168:	e1bfff17 	ldw	r6,-4(fp)
1010f16c:	e17ffe17 	ldw	r5,-8(fp)
1010f170:	1009883a 	mov	r4,r2
1010f174:	010f5600 	call	1010f560 <altera_avalon_jtag_uart_ioctl>
}
1010f178:	e037883a 	mov	sp,fp
1010f17c:	dfc00117 	ldw	ra,4(sp)
1010f180:	df000017 	ldw	fp,0(sp)
1010f184:	dec00204 	addi	sp,sp,8
1010f188:	f800283a 	ret

1010f18c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f18c:	defffa04 	addi	sp,sp,-24
1010f190:	dfc00515 	stw	ra,20(sp)
1010f194:	df000415 	stw	fp,16(sp)
1010f198:	df000404 	addi	fp,sp,16
1010f19c:	e13ffd15 	stw	r4,-12(fp)
1010f1a0:	e17ffe15 	stw	r5,-8(fp)
1010f1a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f1a8:	e0bffd17 	ldw	r2,-12(fp)
1010f1ac:	00c00044 	movi	r3,1
1010f1b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f1b4:	e0bffd17 	ldw	r2,-12(fp)
1010f1b8:	10800017 	ldw	r2,0(r2)
1010f1bc:	10800104 	addi	r2,r2,4
1010f1c0:	1007883a 	mov	r3,r2
1010f1c4:	e0bffd17 	ldw	r2,-12(fp)
1010f1c8:	10800817 	ldw	r2,32(r2)
1010f1cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f1d0:	e0bffe17 	ldw	r2,-8(fp)
1010f1d4:	e0ffff17 	ldw	r3,-4(fp)
1010f1d8:	d8000015 	stw	zero,0(sp)
1010f1dc:	e1fffd17 	ldw	r7,-12(fp)
1010f1e0:	01840474 	movhi	r6,4113
1010f1e4:	31bc9304 	addi	r6,r6,-3508
1010f1e8:	180b883a 	mov	r5,r3
1010f1ec:	1009883a 	mov	r4,r2
1010f1f0:	010ff300 	call	1010ff30 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f1f4:	e0bffd17 	ldw	r2,-12(fp)
1010f1f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f1fc:	e0bffd17 	ldw	r2,-12(fp)
1010f200:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f204:	d0e6d617 	ldw	r3,-25768(gp)
1010f208:	e1fffd17 	ldw	r7,-12(fp)
1010f20c:	01840474 	movhi	r6,4113
1010f210:	31bd1604 	addi	r6,r6,-2984
1010f214:	180b883a 	mov	r5,r3
1010f218:	1009883a 	mov	r4,r2
1010f21c:	010fa900 	call	1010fa90 <alt_alarm_start>
1010f220:	1000040e 	bge	r2,zero,1010f234 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f224:	e0fffd17 	ldw	r3,-12(fp)
1010f228:	00a00034 	movhi	r2,32768
1010f22c:	10bfffc4 	addi	r2,r2,-1
1010f230:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f234:	0001883a 	nop
1010f238:	e037883a 	mov	sp,fp
1010f23c:	dfc00117 	ldw	ra,4(sp)
1010f240:	df000017 	ldw	fp,0(sp)
1010f244:	dec00204 	addi	sp,sp,8
1010f248:	f800283a 	ret

1010f24c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f24c:	defff804 	addi	sp,sp,-32
1010f250:	df000715 	stw	fp,28(sp)
1010f254:	df000704 	addi	fp,sp,28
1010f258:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f25c:	e0bfff17 	ldw	r2,-4(fp)
1010f260:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010f264:	e0bffb17 	ldw	r2,-20(fp)
1010f268:	10800017 	ldw	r2,0(r2)
1010f26c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f270:	e0bffc17 	ldw	r2,-16(fp)
1010f274:	10800104 	addi	r2,r2,4
1010f278:	10800037 	ldwio	r2,0(r2)
1010f27c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010f280:	e0bffd17 	ldw	r2,-12(fp)
1010f284:	1080c00c 	andi	r2,r2,768
1010f288:	10006d26 	beq	r2,zero,1010f440 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010f28c:	e0bffd17 	ldw	r2,-12(fp)
1010f290:	1080400c 	andi	r2,r2,256
1010f294:	10003526 	beq	r2,zero,1010f36c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010f298:	00800074 	movhi	r2,1
1010f29c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f2a0:	e0bffb17 	ldw	r2,-20(fp)
1010f2a4:	10800a17 	ldw	r2,40(r2)
1010f2a8:	10800044 	addi	r2,r2,1
1010f2ac:	1081ffcc 	andi	r2,r2,2047
1010f2b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010f2b4:	e0bffb17 	ldw	r2,-20(fp)
1010f2b8:	10c00b17 	ldw	r3,44(r2)
1010f2bc:	e0bffe17 	ldw	r2,-8(fp)
1010f2c0:	18801526 	beq	r3,r2,1010f318 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010f2c4:	e0bffc17 	ldw	r2,-16(fp)
1010f2c8:	10800037 	ldwio	r2,0(r2)
1010f2cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010f2d0:	e0bff917 	ldw	r2,-28(fp)
1010f2d4:	10a0000c 	andi	r2,r2,32768
1010f2d8:	10001126 	beq	r2,zero,1010f320 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010f2dc:	e0bffb17 	ldw	r2,-20(fp)
1010f2e0:	10800a17 	ldw	r2,40(r2)
1010f2e4:	e0fff917 	ldw	r3,-28(fp)
1010f2e8:	1809883a 	mov	r4,r3
1010f2ec:	e0fffb17 	ldw	r3,-20(fp)
1010f2f0:	1885883a 	add	r2,r3,r2
1010f2f4:	10800e04 	addi	r2,r2,56
1010f2f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f2fc:	e0bffb17 	ldw	r2,-20(fp)
1010f300:	10800a17 	ldw	r2,40(r2)
1010f304:	10800044 	addi	r2,r2,1
1010f308:	10c1ffcc 	andi	r3,r2,2047
1010f30c:	e0bffb17 	ldw	r2,-20(fp)
1010f310:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010f314:	003fe206 	br	1010f2a0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010f318:	0001883a 	nop
1010f31c:	00000106 	br	1010f324 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010f320:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010f324:	e0bff917 	ldw	r2,-28(fp)
1010f328:	10bfffec 	andhi	r2,r2,65535
1010f32c:	10000f26 	beq	r2,zero,1010f36c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f330:	e0bffb17 	ldw	r2,-20(fp)
1010f334:	10c00817 	ldw	r3,32(r2)
1010f338:	00bfff84 	movi	r2,-2
1010f33c:	1886703a 	and	r3,r3,r2
1010f340:	e0bffb17 	ldw	r2,-20(fp)
1010f344:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010f348:	e0bffc17 	ldw	r2,-16(fp)
1010f34c:	10800104 	addi	r2,r2,4
1010f350:	1007883a 	mov	r3,r2
1010f354:	e0bffb17 	ldw	r2,-20(fp)
1010f358:	10800817 	ldw	r2,32(r2)
1010f35c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f360:	e0bffc17 	ldw	r2,-16(fp)
1010f364:	10800104 	addi	r2,r2,4
1010f368:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010f36c:	e0bffd17 	ldw	r2,-12(fp)
1010f370:	1080800c 	andi	r2,r2,512
1010f374:	103fbe26 	beq	r2,zero,1010f270 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010f378:	e0bffd17 	ldw	r2,-12(fp)
1010f37c:	1004d43a 	srli	r2,r2,16
1010f380:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f384:	00001406 	br	1010f3d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010f388:	e0bffc17 	ldw	r2,-16(fp)
1010f38c:	e0fffb17 	ldw	r3,-20(fp)
1010f390:	18c00d17 	ldw	r3,52(r3)
1010f394:	e13ffb17 	ldw	r4,-20(fp)
1010f398:	20c7883a 	add	r3,r4,r3
1010f39c:	18c20e04 	addi	r3,r3,2104
1010f3a0:	18c00003 	ldbu	r3,0(r3)
1010f3a4:	18c03fcc 	andi	r3,r3,255
1010f3a8:	18c0201c 	xori	r3,r3,128
1010f3ac:	18ffe004 	addi	r3,r3,-128
1010f3b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f3b4:	e0bffb17 	ldw	r2,-20(fp)
1010f3b8:	10800d17 	ldw	r2,52(r2)
1010f3bc:	10800044 	addi	r2,r2,1
1010f3c0:	10c1ffcc 	andi	r3,r2,2047
1010f3c4:	e0bffb17 	ldw	r2,-20(fp)
1010f3c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010f3cc:	e0bffa17 	ldw	r2,-24(fp)
1010f3d0:	10bfffc4 	addi	r2,r2,-1
1010f3d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f3d8:	e0bffa17 	ldw	r2,-24(fp)
1010f3dc:	10000526 	beq	r2,zero,1010f3f4 <altera_avalon_jtag_uart_irq+0x1a8>
1010f3e0:	e0bffb17 	ldw	r2,-20(fp)
1010f3e4:	10c00d17 	ldw	r3,52(r2)
1010f3e8:	e0bffb17 	ldw	r2,-20(fp)
1010f3ec:	10800c17 	ldw	r2,48(r2)
1010f3f0:	18bfe51e 	bne	r3,r2,1010f388 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010f3f4:	e0bffa17 	ldw	r2,-24(fp)
1010f3f8:	103f9d26 	beq	r2,zero,1010f270 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f3fc:	e0bffb17 	ldw	r2,-20(fp)
1010f400:	10c00817 	ldw	r3,32(r2)
1010f404:	00bfff44 	movi	r2,-3
1010f408:	1886703a 	and	r3,r3,r2
1010f40c:	e0bffb17 	ldw	r2,-20(fp)
1010f410:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f414:	e0bffb17 	ldw	r2,-20(fp)
1010f418:	10800017 	ldw	r2,0(r2)
1010f41c:	10800104 	addi	r2,r2,4
1010f420:	1007883a 	mov	r3,r2
1010f424:	e0bffb17 	ldw	r2,-20(fp)
1010f428:	10800817 	ldw	r2,32(r2)
1010f42c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f430:	e0bffc17 	ldw	r2,-16(fp)
1010f434:	10800104 	addi	r2,r2,4
1010f438:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010f43c:	003f8c06 	br	1010f270 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010f440:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010f444:	0001883a 	nop
1010f448:	e037883a 	mov	sp,fp
1010f44c:	df000017 	ldw	fp,0(sp)
1010f450:	dec00104 	addi	sp,sp,4
1010f454:	f800283a 	ret

1010f458 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010f458:	defff804 	addi	sp,sp,-32
1010f45c:	df000715 	stw	fp,28(sp)
1010f460:	df000704 	addi	fp,sp,28
1010f464:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010f468:	e0bffb17 	ldw	r2,-20(fp)
1010f46c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010f470:	e0bff917 	ldw	r2,-28(fp)
1010f474:	10800017 	ldw	r2,0(r2)
1010f478:	10800104 	addi	r2,r2,4
1010f47c:	10800037 	ldwio	r2,0(r2)
1010f480:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010f484:	e0bffa17 	ldw	r2,-24(fp)
1010f488:	1081000c 	andi	r2,r2,1024
1010f48c:	10000b26 	beq	r2,zero,1010f4bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010f490:	e0bff917 	ldw	r2,-28(fp)
1010f494:	10800017 	ldw	r2,0(r2)
1010f498:	10800104 	addi	r2,r2,4
1010f49c:	1007883a 	mov	r3,r2
1010f4a0:	e0bff917 	ldw	r2,-28(fp)
1010f4a4:	10800817 	ldw	r2,32(r2)
1010f4a8:	10810014 	ori	r2,r2,1024
1010f4ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f4b0:	e0bff917 	ldw	r2,-28(fp)
1010f4b4:	10000915 	stw	zero,36(r2)
1010f4b8:	00000a06 	br	1010f4e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f4bc:	e0bff917 	ldw	r2,-28(fp)
1010f4c0:	10c00917 	ldw	r3,36(r2)
1010f4c4:	00a00034 	movhi	r2,32768
1010f4c8:	10bfff04 	addi	r2,r2,-4
1010f4cc:	10c00536 	bltu	r2,r3,1010f4e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f4d0:	e0bff917 	ldw	r2,-28(fp)
1010f4d4:	10800917 	ldw	r2,36(r2)
1010f4d8:	10c00044 	addi	r3,r2,1
1010f4dc:	e0bff917 	ldw	r2,-28(fp)
1010f4e0:	10c00915 	stw	r3,36(r2)
1010f4e4:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f4e8:	e037883a 	mov	sp,fp
1010f4ec:	df000017 	ldw	fp,0(sp)
1010f4f0:	dec00104 	addi	sp,sp,4
1010f4f4:	f800283a 	ret

1010f4f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f4f8:	defffd04 	addi	sp,sp,-12
1010f4fc:	df000215 	stw	fp,8(sp)
1010f500:	df000204 	addi	fp,sp,8
1010f504:	e13ffe15 	stw	r4,-8(fp)
1010f508:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f50c:	00000506 	br	1010f524 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f510:	e0bfff17 	ldw	r2,-4(fp)
1010f514:	1090000c 	andi	r2,r2,16384
1010f518:	10000226 	beq	r2,zero,1010f524 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f51c:	00bffd44 	movi	r2,-11
1010f520:	00000b06 	br	1010f550 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f524:	e0bffe17 	ldw	r2,-8(fp)
1010f528:	10c00d17 	ldw	r3,52(r2)
1010f52c:	e0bffe17 	ldw	r2,-8(fp)
1010f530:	10800c17 	ldw	r2,48(r2)
1010f534:	18800526 	beq	r3,r2,1010f54c <altera_avalon_jtag_uart_close+0x54>
1010f538:	e0bffe17 	ldw	r2,-8(fp)
1010f53c:	10c00917 	ldw	r3,36(r2)
1010f540:	e0bffe17 	ldw	r2,-8(fp)
1010f544:	10800117 	ldw	r2,4(r2)
1010f548:	18bff136 	bltu	r3,r2,1010f510 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f54c:	0005883a 	mov	r2,zero
}
1010f550:	e037883a 	mov	sp,fp
1010f554:	df000017 	ldw	fp,0(sp)
1010f558:	dec00104 	addi	sp,sp,4
1010f55c:	f800283a 	ret

1010f560 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f560:	defffa04 	addi	sp,sp,-24
1010f564:	df000515 	stw	fp,20(sp)
1010f568:	df000504 	addi	fp,sp,20
1010f56c:	e13ffd15 	stw	r4,-12(fp)
1010f570:	e17ffe15 	stw	r5,-8(fp)
1010f574:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010f578:	00bff9c4 	movi	r2,-25
1010f57c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010f580:	e0bffe17 	ldw	r2,-8(fp)
1010f584:	10da8060 	cmpeqi	r3,r2,27137
1010f588:	1800031e 	bne	r3,zero,1010f598 <altera_avalon_jtag_uart_ioctl+0x38>
1010f58c:	109a80a0 	cmpeqi	r2,r2,27138
1010f590:	1000181e 	bne	r2,zero,1010f5f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010f594:	00002906 	br	1010f63c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010f598:	e0bffd17 	ldw	r2,-12(fp)
1010f59c:	10c00117 	ldw	r3,4(r2)
1010f5a0:	00a00034 	movhi	r2,32768
1010f5a4:	10bfffc4 	addi	r2,r2,-1
1010f5a8:	18802126 	beq	r3,r2,1010f630 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010f5ac:	e0bfff17 	ldw	r2,-4(fp)
1010f5b0:	10800017 	ldw	r2,0(r2)
1010f5b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010f5b8:	e0bffc17 	ldw	r2,-16(fp)
1010f5bc:	10800090 	cmplti	r2,r2,2
1010f5c0:	1000061e 	bne	r2,zero,1010f5dc <altera_avalon_jtag_uart_ioctl+0x7c>
1010f5c4:	e0fffc17 	ldw	r3,-16(fp)
1010f5c8:	00a00034 	movhi	r2,32768
1010f5cc:	10bfffc4 	addi	r2,r2,-1
1010f5d0:	18800226 	beq	r3,r2,1010f5dc <altera_avalon_jtag_uart_ioctl+0x7c>
1010f5d4:	e0bffc17 	ldw	r2,-16(fp)
1010f5d8:	00000206 	br	1010f5e4 <altera_avalon_jtag_uart_ioctl+0x84>
1010f5dc:	00a00034 	movhi	r2,32768
1010f5e0:	10bfff84 	addi	r2,r2,-2
1010f5e4:	e0fffd17 	ldw	r3,-12(fp)
1010f5e8:	18800115 	stw	r2,4(r3)
      rc = 0;
1010f5ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f5f0:	00000f06 	br	1010f630 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010f5f4:	e0bffd17 	ldw	r2,-12(fp)
1010f5f8:	10c00117 	ldw	r3,4(r2)
1010f5fc:	00a00034 	movhi	r2,32768
1010f600:	10bfffc4 	addi	r2,r2,-1
1010f604:	18800c26 	beq	r3,r2,1010f638 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010f608:	e0bffd17 	ldw	r2,-12(fp)
1010f60c:	10c00917 	ldw	r3,36(r2)
1010f610:	e0bffd17 	ldw	r2,-12(fp)
1010f614:	10800117 	ldw	r2,4(r2)
1010f618:	1885803a 	cmpltu	r2,r3,r2
1010f61c:	10c03fcc 	andi	r3,r2,255
1010f620:	e0bfff17 	ldw	r2,-4(fp)
1010f624:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010f628:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f62c:	00000206 	br	1010f638 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010f630:	0001883a 	nop
1010f634:	00000106 	br	1010f63c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010f638:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010f63c:	e0bffb17 	ldw	r2,-20(fp)
}
1010f640:	e037883a 	mov	sp,fp
1010f644:	df000017 	ldw	fp,0(sp)
1010f648:	dec00104 	addi	sp,sp,4
1010f64c:	f800283a 	ret

1010f650 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010f650:	defff304 	addi	sp,sp,-52
1010f654:	dfc00c15 	stw	ra,48(sp)
1010f658:	df000b15 	stw	fp,44(sp)
1010f65c:	df000b04 	addi	fp,sp,44
1010f660:	e13ffc15 	stw	r4,-16(fp)
1010f664:	e17ffd15 	stw	r5,-12(fp)
1010f668:	e1bffe15 	stw	r6,-8(fp)
1010f66c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010f670:	e0bffd17 	ldw	r2,-12(fp)
1010f674:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f678:	00004706 	br	1010f798 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010f67c:	e0bffc17 	ldw	r2,-16(fp)
1010f680:	10800a17 	ldw	r2,40(r2)
1010f684:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010f688:	e0bffc17 	ldw	r2,-16(fp)
1010f68c:	10800b17 	ldw	r2,44(r2)
1010f690:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010f694:	e0fff717 	ldw	r3,-36(fp)
1010f698:	e0bff817 	ldw	r2,-32(fp)
1010f69c:	18800536 	bltu	r3,r2,1010f6b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010f6a0:	e0fff717 	ldw	r3,-36(fp)
1010f6a4:	e0bff817 	ldw	r2,-32(fp)
1010f6a8:	1885c83a 	sub	r2,r3,r2
1010f6ac:	e0bff615 	stw	r2,-40(fp)
1010f6b0:	00000406 	br	1010f6c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010f6b4:	00c20004 	movi	r3,2048
1010f6b8:	e0bff817 	ldw	r2,-32(fp)
1010f6bc:	1885c83a 	sub	r2,r3,r2
1010f6c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f6c4:	e0bff617 	ldw	r2,-40(fp)
1010f6c8:	10001e26 	beq	r2,zero,1010f744 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010f6cc:	e0fffe17 	ldw	r3,-8(fp)
1010f6d0:	e0bff617 	ldw	r2,-40(fp)
1010f6d4:	1880022e 	bgeu	r3,r2,1010f6e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010f6d8:	e0bffe17 	ldw	r2,-8(fp)
1010f6dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010f6e0:	e0bffc17 	ldw	r2,-16(fp)
1010f6e4:	10c00e04 	addi	r3,r2,56
1010f6e8:	e0bff817 	ldw	r2,-32(fp)
1010f6ec:	1885883a 	add	r2,r3,r2
1010f6f0:	e1bff617 	ldw	r6,-40(fp)
1010f6f4:	100b883a 	mov	r5,r2
1010f6f8:	e13ff517 	ldw	r4,-44(fp)
1010f6fc:	01077f80 	call	101077f8 <memcpy>
      ptr   += n;
1010f700:	e0fff517 	ldw	r3,-44(fp)
1010f704:	e0bff617 	ldw	r2,-40(fp)
1010f708:	1885883a 	add	r2,r3,r2
1010f70c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010f710:	e0fffe17 	ldw	r3,-8(fp)
1010f714:	e0bff617 	ldw	r2,-40(fp)
1010f718:	1885c83a 	sub	r2,r3,r2
1010f71c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f720:	e0fff817 	ldw	r3,-32(fp)
1010f724:	e0bff617 	ldw	r2,-40(fp)
1010f728:	1885883a 	add	r2,r3,r2
1010f72c:	10c1ffcc 	andi	r3,r2,2047
1010f730:	e0bffc17 	ldw	r2,-16(fp)
1010f734:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010f738:	e0bffe17 	ldw	r2,-8(fp)
1010f73c:	00bfcf16 	blt	zero,r2,1010f67c <altera_avalon_jtag_uart_read+0x2c>
1010f740:	00000106 	br	1010f748 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010f744:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010f748:	e0fff517 	ldw	r3,-44(fp)
1010f74c:	e0bffd17 	ldw	r2,-12(fp)
1010f750:	1880141e 	bne	r3,r2,1010f7a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010f754:	e0bfff17 	ldw	r2,-4(fp)
1010f758:	1090000c 	andi	r2,r2,16384
1010f75c:	1000131e 	bne	r2,zero,1010f7ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010f760:	0001883a 	nop
1010f764:	e0bffc17 	ldw	r2,-16(fp)
1010f768:	10c00a17 	ldw	r3,40(r2)
1010f76c:	e0bff717 	ldw	r2,-36(fp)
1010f770:	1880051e 	bne	r3,r2,1010f788 <altera_avalon_jtag_uart_read+0x138>
1010f774:	e0bffc17 	ldw	r2,-16(fp)
1010f778:	10c00917 	ldw	r3,36(r2)
1010f77c:	e0bffc17 	ldw	r2,-16(fp)
1010f780:	10800117 	ldw	r2,4(r2)
1010f784:	18bff736 	bltu	r3,r2,1010f764 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010f788:	e0bffc17 	ldw	r2,-16(fp)
1010f78c:	10c00a17 	ldw	r3,40(r2)
1010f790:	e0bff717 	ldw	r2,-36(fp)
1010f794:	18800726 	beq	r3,r2,1010f7b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f798:	e0bffe17 	ldw	r2,-8(fp)
1010f79c:	00bfb716 	blt	zero,r2,1010f67c <altera_avalon_jtag_uart_read+0x2c>
1010f7a0:	00000506 	br	1010f7b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010f7a4:	0001883a 	nop
1010f7a8:	00000306 	br	1010f7b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010f7ac:	0001883a 	nop
1010f7b0:	00000106 	br	1010f7b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010f7b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010f7b8:	e0fff517 	ldw	r3,-44(fp)
1010f7bc:	e0bffd17 	ldw	r2,-12(fp)
1010f7c0:	18801826 	beq	r3,r2,1010f824 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f7c4:	0005303a 	rdctl	r2,status
1010f7c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f7cc:	e0fffb17 	ldw	r3,-20(fp)
1010f7d0:	00bfff84 	movi	r2,-2
1010f7d4:	1884703a 	and	r2,r3,r2
1010f7d8:	1001703a 	wrctl	status,r2
  
  return context;
1010f7dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010f7e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f7e4:	e0bffc17 	ldw	r2,-16(fp)
1010f7e8:	10800817 	ldw	r2,32(r2)
1010f7ec:	10c00054 	ori	r3,r2,1
1010f7f0:	e0bffc17 	ldw	r2,-16(fp)
1010f7f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f7f8:	e0bffc17 	ldw	r2,-16(fp)
1010f7fc:	10800017 	ldw	r2,0(r2)
1010f800:	10800104 	addi	r2,r2,4
1010f804:	1007883a 	mov	r3,r2
1010f808:	e0bffc17 	ldw	r2,-16(fp)
1010f80c:	10800817 	ldw	r2,32(r2)
1010f810:	18800035 	stwio	r2,0(r3)
1010f814:	e0bffa17 	ldw	r2,-24(fp)
1010f818:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f81c:	e0bff917 	ldw	r2,-28(fp)
1010f820:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010f824:	e0fff517 	ldw	r3,-44(fp)
1010f828:	e0bffd17 	ldw	r2,-12(fp)
1010f82c:	18800426 	beq	r3,r2,1010f840 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010f830:	e0fff517 	ldw	r3,-44(fp)
1010f834:	e0bffd17 	ldw	r2,-12(fp)
1010f838:	1885c83a 	sub	r2,r3,r2
1010f83c:	00000606 	br	1010f858 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010f840:	e0bfff17 	ldw	r2,-4(fp)
1010f844:	1090000c 	andi	r2,r2,16384
1010f848:	10000226 	beq	r2,zero,1010f854 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010f84c:	00bffd44 	movi	r2,-11
1010f850:	00000106 	br	1010f858 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010f854:	00bffec4 	movi	r2,-5
}
1010f858:	e037883a 	mov	sp,fp
1010f85c:	dfc00117 	ldw	ra,4(sp)
1010f860:	df000017 	ldw	fp,0(sp)
1010f864:	dec00204 	addi	sp,sp,8
1010f868:	f800283a 	ret

1010f86c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010f86c:	defff304 	addi	sp,sp,-52
1010f870:	dfc00c15 	stw	ra,48(sp)
1010f874:	df000b15 	stw	fp,44(sp)
1010f878:	df000b04 	addi	fp,sp,44
1010f87c:	e13ffc15 	stw	r4,-16(fp)
1010f880:	e17ffd15 	stw	r5,-12(fp)
1010f884:	e1bffe15 	stw	r6,-8(fp)
1010f888:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010f88c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010f890:	e0bffd17 	ldw	r2,-12(fp)
1010f894:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f898:	00003706 	br	1010f978 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010f89c:	e0bffc17 	ldw	r2,-16(fp)
1010f8a0:	10800c17 	ldw	r2,48(r2)
1010f8a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010f8a8:	e0bffc17 	ldw	r2,-16(fp)
1010f8ac:	10800d17 	ldw	r2,52(r2)
1010f8b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010f8b4:	e0fff917 	ldw	r3,-28(fp)
1010f8b8:	e0bff517 	ldw	r2,-44(fp)
1010f8bc:	1880062e 	bgeu	r3,r2,1010f8d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010f8c0:	e0fff517 	ldw	r3,-44(fp)
1010f8c4:	e0bff917 	ldw	r2,-28(fp)
1010f8c8:	1885c83a 	sub	r2,r3,r2
1010f8cc:	10bfffc4 	addi	r2,r2,-1
1010f8d0:	e0bff615 	stw	r2,-40(fp)
1010f8d4:	00000b06 	br	1010f904 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010f8d8:	e0bff517 	ldw	r2,-44(fp)
1010f8dc:	10000526 	beq	r2,zero,1010f8f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010f8e0:	00c20004 	movi	r3,2048
1010f8e4:	e0bff917 	ldw	r2,-28(fp)
1010f8e8:	1885c83a 	sub	r2,r3,r2
1010f8ec:	e0bff615 	stw	r2,-40(fp)
1010f8f0:	00000406 	br	1010f904 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010f8f4:	00c1ffc4 	movi	r3,2047
1010f8f8:	e0bff917 	ldw	r2,-28(fp)
1010f8fc:	1885c83a 	sub	r2,r3,r2
1010f900:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f904:	e0bff617 	ldw	r2,-40(fp)
1010f908:	10001e26 	beq	r2,zero,1010f984 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010f90c:	e0fffe17 	ldw	r3,-8(fp)
1010f910:	e0bff617 	ldw	r2,-40(fp)
1010f914:	1880022e 	bgeu	r3,r2,1010f920 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010f918:	e0bffe17 	ldw	r2,-8(fp)
1010f91c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010f920:	e0bffc17 	ldw	r2,-16(fp)
1010f924:	10c20e04 	addi	r3,r2,2104
1010f928:	e0bff917 	ldw	r2,-28(fp)
1010f92c:	1885883a 	add	r2,r3,r2
1010f930:	e1bff617 	ldw	r6,-40(fp)
1010f934:	e17ffd17 	ldw	r5,-12(fp)
1010f938:	1009883a 	mov	r4,r2
1010f93c:	01077f80 	call	101077f8 <memcpy>
      ptr   += n;
1010f940:	e0fffd17 	ldw	r3,-12(fp)
1010f944:	e0bff617 	ldw	r2,-40(fp)
1010f948:	1885883a 	add	r2,r3,r2
1010f94c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010f950:	e0fffe17 	ldw	r3,-8(fp)
1010f954:	e0bff617 	ldw	r2,-40(fp)
1010f958:	1885c83a 	sub	r2,r3,r2
1010f95c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f960:	e0fff917 	ldw	r3,-28(fp)
1010f964:	e0bff617 	ldw	r2,-40(fp)
1010f968:	1885883a 	add	r2,r3,r2
1010f96c:	10c1ffcc 	andi	r3,r2,2047
1010f970:	e0bffc17 	ldw	r2,-16(fp)
1010f974:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f978:	e0bffe17 	ldw	r2,-8(fp)
1010f97c:	00bfc716 	blt	zero,r2,1010f89c <altera_avalon_jtag_uart_write+0x30>
1010f980:	00000106 	br	1010f988 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010f984:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f988:	0005303a 	rdctl	r2,status
1010f98c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f990:	e0fffb17 	ldw	r3,-20(fp)
1010f994:	00bfff84 	movi	r2,-2
1010f998:	1884703a 	and	r2,r3,r2
1010f99c:	1001703a 	wrctl	status,r2
  
  return context;
1010f9a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010f9a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f9a8:	e0bffc17 	ldw	r2,-16(fp)
1010f9ac:	10800817 	ldw	r2,32(r2)
1010f9b0:	10c00094 	ori	r3,r2,2
1010f9b4:	e0bffc17 	ldw	r2,-16(fp)
1010f9b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f9bc:	e0bffc17 	ldw	r2,-16(fp)
1010f9c0:	10800017 	ldw	r2,0(r2)
1010f9c4:	10800104 	addi	r2,r2,4
1010f9c8:	1007883a 	mov	r3,r2
1010f9cc:	e0bffc17 	ldw	r2,-16(fp)
1010f9d0:	10800817 	ldw	r2,32(r2)
1010f9d4:	18800035 	stwio	r2,0(r3)
1010f9d8:	e0bffa17 	ldw	r2,-24(fp)
1010f9dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f9e0:	e0bff817 	ldw	r2,-32(fp)
1010f9e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010f9e8:	e0bffe17 	ldw	r2,-8(fp)
1010f9ec:	0080100e 	bge	zero,r2,1010fa30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010f9f0:	e0bfff17 	ldw	r2,-4(fp)
1010f9f4:	1090000c 	andi	r2,r2,16384
1010f9f8:	1000101e 	bne	r2,zero,1010fa3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010f9fc:	0001883a 	nop
1010fa00:	e0bffc17 	ldw	r2,-16(fp)
1010fa04:	10c00d17 	ldw	r3,52(r2)
1010fa08:	e0bff517 	ldw	r2,-44(fp)
1010fa0c:	1880051e 	bne	r3,r2,1010fa24 <altera_avalon_jtag_uart_write+0x1b8>
1010fa10:	e0bffc17 	ldw	r2,-16(fp)
1010fa14:	10c00917 	ldw	r3,36(r2)
1010fa18:	e0bffc17 	ldw	r2,-16(fp)
1010fa1c:	10800117 	ldw	r2,4(r2)
1010fa20:	18bff736 	bltu	r3,r2,1010fa00 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010fa24:	e0bffc17 	ldw	r2,-16(fp)
1010fa28:	10800917 	ldw	r2,36(r2)
1010fa2c:	1000051e 	bne	r2,zero,1010fa44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010fa30:	e0bffe17 	ldw	r2,-8(fp)
1010fa34:	00bfd016 	blt	zero,r2,1010f978 <altera_avalon_jtag_uart_write+0x10c>
1010fa38:	00000306 	br	1010fa48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010fa3c:	0001883a 	nop
1010fa40:	00000106 	br	1010fa48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010fa44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010fa48:	e0fffd17 	ldw	r3,-12(fp)
1010fa4c:	e0bff717 	ldw	r2,-36(fp)
1010fa50:	18800426 	beq	r3,r2,1010fa64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010fa54:	e0fffd17 	ldw	r3,-12(fp)
1010fa58:	e0bff717 	ldw	r2,-36(fp)
1010fa5c:	1885c83a 	sub	r2,r3,r2
1010fa60:	00000606 	br	1010fa7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010fa64:	e0bfff17 	ldw	r2,-4(fp)
1010fa68:	1090000c 	andi	r2,r2,16384
1010fa6c:	10000226 	beq	r2,zero,1010fa78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010fa70:	00bffd44 	movi	r2,-11
1010fa74:	00000106 	br	1010fa7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010fa78:	00bffec4 	movi	r2,-5
}
1010fa7c:	e037883a 	mov	sp,fp
1010fa80:	dfc00117 	ldw	ra,4(sp)
1010fa84:	df000017 	ldw	fp,0(sp)
1010fa88:	dec00204 	addi	sp,sp,8
1010fa8c:	f800283a 	ret

1010fa90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010fa90:	defff504 	addi	sp,sp,-44
1010fa94:	df000a15 	stw	fp,40(sp)
1010fa98:	df000a04 	addi	fp,sp,40
1010fa9c:	e13ffc15 	stw	r4,-16(fp)
1010faa0:	e17ffd15 	stw	r5,-12(fp)
1010faa4:	e1bffe15 	stw	r6,-8(fp)
1010faa8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010faac:	e03ff615 	stw	zero,-40(fp)
1010fab0:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
1010fab4:	10003c26 	beq	r2,zero,1010fba8 <alt_alarm_start+0x118>
  {
    if (alarm)
1010fab8:	e0bffc17 	ldw	r2,-16(fp)
1010fabc:	10003826 	beq	r2,zero,1010fba0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010fac0:	e0bffc17 	ldw	r2,-16(fp)
1010fac4:	e0fffe17 	ldw	r3,-8(fp)
1010fac8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010facc:	e0bffc17 	ldw	r2,-16(fp)
1010fad0:	e0ffff17 	ldw	r3,-4(fp)
1010fad4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fad8:	0005303a 	rdctl	r2,status
1010fadc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fae0:	e0fff917 	ldw	r3,-28(fp)
1010fae4:	00bfff84 	movi	r2,-2
1010fae8:	1884703a 	and	r2,r3,r2
1010faec:	1001703a 	wrctl	status,r2
  
  return context;
1010faf0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010faf4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010faf8:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
1010fafc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010fb00:	e0fffd17 	ldw	r3,-12(fp)
1010fb04:	e0bff617 	ldw	r2,-40(fp)
1010fb08:	1885883a 	add	r2,r3,r2
1010fb0c:	10c00044 	addi	r3,r2,1
1010fb10:	e0bffc17 	ldw	r2,-16(fp)
1010fb14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010fb18:	e0bffc17 	ldw	r2,-16(fp)
1010fb1c:	10c00217 	ldw	r3,8(r2)
1010fb20:	e0bff617 	ldw	r2,-40(fp)
1010fb24:	1880042e 	bgeu	r3,r2,1010fb38 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1010fb28:	e0bffc17 	ldw	r2,-16(fp)
1010fb2c:	00c00044 	movi	r3,1
1010fb30:	10c00405 	stb	r3,16(r2)
1010fb34:	00000206 	br	1010fb40 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1010fb38:	e0bffc17 	ldw	r2,-16(fp)
1010fb3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010fb40:	e0bffc17 	ldw	r2,-16(fp)
1010fb44:	d0e00e04 	addi	r3,gp,-32712
1010fb48:	e0fffa15 	stw	r3,-24(fp)
1010fb4c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010fb50:	e0bffb17 	ldw	r2,-20(fp)
1010fb54:	e0fffa17 	ldw	r3,-24(fp)
1010fb58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010fb5c:	e0bffa17 	ldw	r2,-24(fp)
1010fb60:	10c00017 	ldw	r3,0(r2)
1010fb64:	e0bffb17 	ldw	r2,-20(fp)
1010fb68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010fb6c:	e0bffa17 	ldw	r2,-24(fp)
1010fb70:	10800017 	ldw	r2,0(r2)
1010fb74:	e0fffb17 	ldw	r3,-20(fp)
1010fb78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010fb7c:	e0bffa17 	ldw	r2,-24(fp)
1010fb80:	e0fffb17 	ldw	r3,-20(fp)
1010fb84:	10c00015 	stw	r3,0(r2)
1010fb88:	e0bff817 	ldw	r2,-32(fp)
1010fb8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fb90:	e0bff717 	ldw	r2,-36(fp)
1010fb94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1010fb98:	0005883a 	mov	r2,zero
1010fb9c:	00000306 	br	1010fbac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1010fba0:	00bffa84 	movi	r2,-22
1010fba4:	00000106 	br	1010fbac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1010fba8:	00bfde84 	movi	r2,-134
  }
}
1010fbac:	e037883a 	mov	sp,fp
1010fbb0:	df000017 	ldw	fp,0(sp)
1010fbb4:	dec00104 	addi	sp,sp,4
1010fbb8:	f800283a 	ret

1010fbbc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1010fbbc:	defffa04 	addi	sp,sp,-24
1010fbc0:	dfc00515 	stw	ra,20(sp)
1010fbc4:	df000415 	stw	fp,16(sp)
1010fbc8:	df000404 	addi	fp,sp,16
1010fbcc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1010fbd0:	008000c4 	movi	r2,3
1010fbd4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1010fbd8:	e0fffd17 	ldw	r3,-12(fp)
1010fbdc:	008003f4 	movhi	r2,15
1010fbe0:	10909004 	addi	r2,r2,16960
1010fbe4:	1885383a 	mul	r2,r3,r2
1010fbe8:	100b883a 	mov	r5,r2
1010fbec:	0100bef4 	movhi	r4,763
1010fbf0:	213c2004 	addi	r4,r4,-3968
1010fbf4:	0101c500 	call	10101c50 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1010fbf8:	100b883a 	mov	r5,r2
1010fbfc:	01200034 	movhi	r4,32768
1010fc00:	213fffc4 	addi	r4,r4,-1
1010fc04:	0101c500 	call	10101c50 <__udivsi3>
1010fc08:	100b883a 	mov	r5,r2
1010fc0c:	e13fff17 	ldw	r4,-4(fp)
1010fc10:	0101c500 	call	10101c50 <__udivsi3>
1010fc14:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1010fc18:	e0bffe17 	ldw	r2,-8(fp)
1010fc1c:	10002a26 	beq	r2,zero,1010fcc8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1010fc20:	e03ffc15 	stw	zero,-16(fp)
1010fc24:	00001706 	br	1010fc84 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1010fc28:	00a00034 	movhi	r2,32768
1010fc2c:	10bfffc4 	addi	r2,r2,-1
1010fc30:	10bfffc4 	addi	r2,r2,-1
1010fc34:	103ffe1e 	bne	r2,zero,1010fc30 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1010fc38:	e0fffd17 	ldw	r3,-12(fp)
1010fc3c:	008003f4 	movhi	r2,15
1010fc40:	10909004 	addi	r2,r2,16960
1010fc44:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1010fc48:	100b883a 	mov	r5,r2
1010fc4c:	0100bef4 	movhi	r4,763
1010fc50:	213c2004 	addi	r4,r4,-3968
1010fc54:	0101c500 	call	10101c50 <__udivsi3>
1010fc58:	100b883a 	mov	r5,r2
1010fc5c:	01200034 	movhi	r4,32768
1010fc60:	213fffc4 	addi	r4,r4,-1
1010fc64:	0101c500 	call	10101c50 <__udivsi3>
1010fc68:	1007883a 	mov	r3,r2
1010fc6c:	e0bfff17 	ldw	r2,-4(fp)
1010fc70:	10c5c83a 	sub	r2,r2,r3
1010fc74:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1010fc78:	e0bffc17 	ldw	r2,-16(fp)
1010fc7c:	10800044 	addi	r2,r2,1
1010fc80:	e0bffc15 	stw	r2,-16(fp)
1010fc84:	e0fffc17 	ldw	r3,-16(fp)
1010fc88:	e0bffe17 	ldw	r2,-8(fp)
1010fc8c:	18bfe616 	blt	r3,r2,1010fc28 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1010fc90:	e0fffd17 	ldw	r3,-12(fp)
1010fc94:	008003f4 	movhi	r2,15
1010fc98:	10909004 	addi	r2,r2,16960
1010fc9c:	1885383a 	mul	r2,r3,r2
1010fca0:	100b883a 	mov	r5,r2
1010fca4:	0100bef4 	movhi	r4,763
1010fca8:	213c2004 	addi	r4,r4,-3968
1010fcac:	0101c500 	call	10101c50 <__udivsi3>
1010fcb0:	1007883a 	mov	r3,r2
1010fcb4:	e0bfff17 	ldw	r2,-4(fp)
1010fcb8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1010fcbc:	10bfffc4 	addi	r2,r2,-1
1010fcc0:	103ffe1e 	bne	r2,zero,1010fcbc <alt_busy_sleep+0x100>
1010fcc4:	00000d06 	br	1010fcfc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1010fcc8:	e0fffd17 	ldw	r3,-12(fp)
1010fccc:	008003f4 	movhi	r2,15
1010fcd0:	10909004 	addi	r2,r2,16960
1010fcd4:	1885383a 	mul	r2,r3,r2
1010fcd8:	100b883a 	mov	r5,r2
1010fcdc:	0100bef4 	movhi	r4,763
1010fce0:	213c2004 	addi	r4,r4,-3968
1010fce4:	0101c500 	call	10101c50 <__udivsi3>
1010fce8:	1007883a 	mov	r3,r2
1010fcec:	e0bfff17 	ldw	r2,-4(fp)
1010fcf0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1010fcf4:	10bfffc4 	addi	r2,r2,-1
1010fcf8:	00bffe16 	blt	zero,r2,1010fcf4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1010fcfc:	0005883a 	mov	r2,zero
}
1010fd00:	e037883a 	mov	sp,fp
1010fd04:	dfc00117 	ldw	ra,4(sp)
1010fd08:	df000017 	ldw	fp,0(sp)
1010fd0c:	dec00204 	addi	sp,sp,8
1010fd10:	f800283a 	ret

1010fd14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1010fd14:	defffe04 	addi	sp,sp,-8
1010fd18:	df000115 	stw	fp,4(sp)
1010fd1c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010fd20:	e03fff15 	stw	zero,-4(fp)
1010fd24:	00000506 	br	1010fd3c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1010fd28:	e0bfff17 	ldw	r2,-4(fp)
1010fd2c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010fd30:	e0bfff17 	ldw	r2,-4(fp)
1010fd34:	10800804 	addi	r2,r2,32
1010fd38:	e0bfff15 	stw	r2,-4(fp)
1010fd3c:	e0bfff17 	ldw	r2,-4(fp)
1010fd40:	10820030 	cmpltui	r2,r2,2048
1010fd44:	103ff81e 	bne	r2,zero,1010fd28 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1010fd48:	0001883a 	nop
1010fd4c:	e037883a 	mov	sp,fp
1010fd50:	df000017 	ldw	fp,0(sp)
1010fd54:	dec00104 	addi	sp,sp,4
1010fd58:	f800283a 	ret

1010fd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fd5c:	defffe04 	addi	sp,sp,-8
1010fd60:	dfc00115 	stw	ra,4(sp)
1010fd64:	df000015 	stw	fp,0(sp)
1010fd68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fd6c:	d0a00b17 	ldw	r2,-32724(gp)
1010fd70:	10000326 	beq	r2,zero,1010fd80 <alt_get_errno+0x24>
1010fd74:	d0a00b17 	ldw	r2,-32724(gp)
1010fd78:	103ee83a 	callr	r2
1010fd7c:	00000106 	br	1010fd84 <alt_get_errno+0x28>
1010fd80:	d0a6d104 	addi	r2,gp,-25788
}
1010fd84:	e037883a 	mov	sp,fp
1010fd88:	dfc00117 	ldw	ra,4(sp)
1010fd8c:	df000017 	ldw	fp,0(sp)
1010fd90:	dec00204 	addi	sp,sp,8
1010fd94:	f800283a 	ret

1010fd98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010fd98:	defffa04 	addi	sp,sp,-24
1010fd9c:	dfc00515 	stw	ra,20(sp)
1010fda0:	df000415 	stw	fp,16(sp)
1010fda4:	df000404 	addi	fp,sp,16
1010fda8:	e13ffe15 	stw	r4,-8(fp)
1010fdac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1010fdb0:	e0bffe17 	ldw	r2,-8(fp)
1010fdb4:	10000326 	beq	r2,zero,1010fdc4 <alt_dev_llist_insert+0x2c>
1010fdb8:	e0bffe17 	ldw	r2,-8(fp)
1010fdbc:	10800217 	ldw	r2,8(r2)
1010fdc0:	1000061e 	bne	r2,zero,1010fddc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1010fdc4:	010fd5c0 	call	1010fd5c <alt_get_errno>
1010fdc8:	1007883a 	mov	r3,r2
1010fdcc:	00800584 	movi	r2,22
1010fdd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1010fdd4:	00bffa84 	movi	r2,-22
1010fdd8:	00001306 	br	1010fe28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1010fddc:	e0bffe17 	ldw	r2,-8(fp)
1010fde0:	e0ffff17 	ldw	r3,-4(fp)
1010fde4:	e0fffc15 	stw	r3,-16(fp)
1010fde8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010fdec:	e0bffd17 	ldw	r2,-12(fp)
1010fdf0:	e0fffc17 	ldw	r3,-16(fp)
1010fdf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010fdf8:	e0bffc17 	ldw	r2,-16(fp)
1010fdfc:	10c00017 	ldw	r3,0(r2)
1010fe00:	e0bffd17 	ldw	r2,-12(fp)
1010fe04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010fe08:	e0bffc17 	ldw	r2,-16(fp)
1010fe0c:	10800017 	ldw	r2,0(r2)
1010fe10:	e0fffd17 	ldw	r3,-12(fp)
1010fe14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010fe18:	e0bffc17 	ldw	r2,-16(fp)
1010fe1c:	e0fffd17 	ldw	r3,-12(fp)
1010fe20:	10c00015 	stw	r3,0(r2)

  return 0;  
1010fe24:	0005883a 	mov	r2,zero
}
1010fe28:	e037883a 	mov	sp,fp
1010fe2c:	dfc00117 	ldw	ra,4(sp)
1010fe30:	df000017 	ldw	fp,0(sp)
1010fe34:	dec00204 	addi	sp,sp,8
1010fe38:	f800283a 	ret

1010fe3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010fe3c:	defffd04 	addi	sp,sp,-12
1010fe40:	dfc00215 	stw	ra,8(sp)
1010fe44:	df000115 	stw	fp,4(sp)
1010fe48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010fe4c:	00840474 	movhi	r2,4113
1010fe50:	10838904 	addi	r2,r2,3620
1010fe54:	e0bfff15 	stw	r2,-4(fp)
1010fe58:	00000606 	br	1010fe74 <_do_ctors+0x38>
        (*ctor) (); 
1010fe5c:	e0bfff17 	ldw	r2,-4(fp)
1010fe60:	10800017 	ldw	r2,0(r2)
1010fe64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010fe68:	e0bfff17 	ldw	r2,-4(fp)
1010fe6c:	10bfff04 	addi	r2,r2,-4
1010fe70:	e0bfff15 	stw	r2,-4(fp)
1010fe74:	e0ffff17 	ldw	r3,-4(fp)
1010fe78:	00840474 	movhi	r2,4113
1010fe7c:	10838a04 	addi	r2,r2,3624
1010fe80:	18bff62e 	bgeu	r3,r2,1010fe5c <_do_ctors+0x20>
        (*ctor) (); 
}
1010fe84:	0001883a 	nop
1010fe88:	e037883a 	mov	sp,fp
1010fe8c:	dfc00117 	ldw	ra,4(sp)
1010fe90:	df000017 	ldw	fp,0(sp)
1010fe94:	dec00204 	addi	sp,sp,8
1010fe98:	f800283a 	ret

1010fe9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010fe9c:	defffd04 	addi	sp,sp,-12
1010fea0:	dfc00215 	stw	ra,8(sp)
1010fea4:	df000115 	stw	fp,4(sp)
1010fea8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010feac:	00840474 	movhi	r2,4113
1010feb0:	10838904 	addi	r2,r2,3620
1010feb4:	e0bfff15 	stw	r2,-4(fp)
1010feb8:	00000606 	br	1010fed4 <_do_dtors+0x38>
        (*dtor) (); 
1010febc:	e0bfff17 	ldw	r2,-4(fp)
1010fec0:	10800017 	ldw	r2,0(r2)
1010fec4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010fec8:	e0bfff17 	ldw	r2,-4(fp)
1010fecc:	10bfff04 	addi	r2,r2,-4
1010fed0:	e0bfff15 	stw	r2,-4(fp)
1010fed4:	e0ffff17 	ldw	r3,-4(fp)
1010fed8:	00840474 	movhi	r2,4113
1010fedc:	10838a04 	addi	r2,r2,3624
1010fee0:	18bff62e 	bgeu	r3,r2,1010febc <_do_dtors+0x20>
        (*dtor) (); 
}
1010fee4:	0001883a 	nop
1010fee8:	e037883a 	mov	sp,fp
1010feec:	dfc00117 	ldw	ra,4(sp)
1010fef0:	df000017 	ldw	fp,0(sp)
1010fef4:	dec00204 	addi	sp,sp,8
1010fef8:	f800283a 	ret

1010fefc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1010fefc:	defffe04 	addi	sp,sp,-8
1010ff00:	dfc00115 	stw	ra,4(sp)
1010ff04:	df000015 	stw	fp,0(sp)
1010ff08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1010ff0c:	01440004 	movi	r5,4096
1010ff10:	0009883a 	mov	r4,zero
1010ff14:	01109680 	call	10110968 <alt_icache_flush>
#endif
}
1010ff18:	0001883a 	nop
1010ff1c:	e037883a 	mov	sp,fp
1010ff20:	dfc00117 	ldw	ra,4(sp)
1010ff24:	df000017 	ldw	fp,0(sp)
1010ff28:	dec00204 	addi	sp,sp,8
1010ff2c:	f800283a 	ret

1010ff30 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010ff30:	defff904 	addi	sp,sp,-28
1010ff34:	dfc00615 	stw	ra,24(sp)
1010ff38:	df000515 	stw	fp,20(sp)
1010ff3c:	df000504 	addi	fp,sp,20
1010ff40:	e13ffc15 	stw	r4,-16(fp)
1010ff44:	e17ffd15 	stw	r5,-12(fp)
1010ff48:	e1bffe15 	stw	r6,-8(fp)
1010ff4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010ff50:	e0800217 	ldw	r2,8(fp)
1010ff54:	d8800015 	stw	r2,0(sp)
1010ff58:	e1ffff17 	ldw	r7,-4(fp)
1010ff5c:	e1bffe17 	ldw	r6,-8(fp)
1010ff60:	e17ffd17 	ldw	r5,-12(fp)
1010ff64:	e13ffc17 	ldw	r4,-16(fp)
1010ff68:	01100e00 	call	101100e0 <alt_iic_isr_register>
}  
1010ff6c:	e037883a 	mov	sp,fp
1010ff70:	dfc00117 	ldw	ra,4(sp)
1010ff74:	df000017 	ldw	fp,0(sp)
1010ff78:	dec00204 	addi	sp,sp,8
1010ff7c:	f800283a 	ret

1010ff80 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010ff80:	defff904 	addi	sp,sp,-28
1010ff84:	df000615 	stw	fp,24(sp)
1010ff88:	df000604 	addi	fp,sp,24
1010ff8c:	e13ffe15 	stw	r4,-8(fp)
1010ff90:	e17fff15 	stw	r5,-4(fp)
1010ff94:	e0bfff17 	ldw	r2,-4(fp)
1010ff98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ff9c:	0005303a 	rdctl	r2,status
1010ffa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ffa4:	e0fffb17 	ldw	r3,-20(fp)
1010ffa8:	00bfff84 	movi	r2,-2
1010ffac:	1884703a 	and	r2,r3,r2
1010ffb0:	1001703a 	wrctl	status,r2
  
  return context;
1010ffb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010ffb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1010ffbc:	00c00044 	movi	r3,1
1010ffc0:	e0bffa17 	ldw	r2,-24(fp)
1010ffc4:	1884983a 	sll	r2,r3,r2
1010ffc8:	1007883a 	mov	r3,r2
1010ffcc:	d0a6d517 	ldw	r2,-25772(gp)
1010ffd0:	1884b03a 	or	r2,r3,r2
1010ffd4:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010ffd8:	d0a6d517 	ldw	r2,-25772(gp)
1010ffdc:	100170fa 	wrctl	ienable,r2
1010ffe0:	e0bffc17 	ldw	r2,-16(fp)
1010ffe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ffe8:	e0bffd17 	ldw	r2,-12(fp)
1010ffec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010fff0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1010fff4:	0001883a 	nop
}
1010fff8:	e037883a 	mov	sp,fp
1010fffc:	df000017 	ldw	fp,0(sp)
10110000:	dec00104 	addi	sp,sp,4
10110004:	f800283a 	ret

10110008 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110008:	defff904 	addi	sp,sp,-28
1011000c:	df000615 	stw	fp,24(sp)
10110010:	df000604 	addi	fp,sp,24
10110014:	e13ffe15 	stw	r4,-8(fp)
10110018:	e17fff15 	stw	r5,-4(fp)
1011001c:	e0bfff17 	ldw	r2,-4(fp)
10110020:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110024:	0005303a 	rdctl	r2,status
10110028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011002c:	e0fffb17 	ldw	r3,-20(fp)
10110030:	00bfff84 	movi	r2,-2
10110034:	1884703a 	and	r2,r3,r2
10110038:	1001703a 	wrctl	status,r2
  
  return context;
1011003c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110040:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10110044:	00c00044 	movi	r3,1
10110048:	e0bffa17 	ldw	r2,-24(fp)
1011004c:	1884983a 	sll	r2,r3,r2
10110050:	0084303a 	nor	r2,zero,r2
10110054:	1007883a 	mov	r3,r2
10110058:	d0a6d517 	ldw	r2,-25772(gp)
1011005c:	1884703a 	and	r2,r3,r2
10110060:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110064:	d0a6d517 	ldw	r2,-25772(gp)
10110068:	100170fa 	wrctl	ienable,r2
1011006c:	e0bffc17 	ldw	r2,-16(fp)
10110070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110074:	e0bffd17 	ldw	r2,-12(fp)
10110078:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1011007c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10110080:	0001883a 	nop
}
10110084:	e037883a 	mov	sp,fp
10110088:	df000017 	ldw	fp,0(sp)
1011008c:	dec00104 	addi	sp,sp,4
10110090:	f800283a 	ret

10110094 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10110094:	defffc04 	addi	sp,sp,-16
10110098:	df000315 	stw	fp,12(sp)
1011009c:	df000304 	addi	fp,sp,12
101100a0:	e13ffe15 	stw	r4,-8(fp)
101100a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101100a8:	000530fa 	rdctl	r2,ienable
101100ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101100b0:	00c00044 	movi	r3,1
101100b4:	e0bfff17 	ldw	r2,-4(fp)
101100b8:	1884983a 	sll	r2,r3,r2
101100bc:	1007883a 	mov	r3,r2
101100c0:	e0bffd17 	ldw	r2,-12(fp)
101100c4:	1884703a 	and	r2,r3,r2
101100c8:	1004c03a 	cmpne	r2,r2,zero
101100cc:	10803fcc 	andi	r2,r2,255
}
101100d0:	e037883a 	mov	sp,fp
101100d4:	df000017 	ldw	fp,0(sp)
101100d8:	dec00104 	addi	sp,sp,4
101100dc:	f800283a 	ret

101100e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101100e0:	defff504 	addi	sp,sp,-44
101100e4:	dfc00a15 	stw	ra,40(sp)
101100e8:	df000915 	stw	fp,36(sp)
101100ec:	df000904 	addi	fp,sp,36
101100f0:	e13ffc15 	stw	r4,-16(fp)
101100f4:	e17ffd15 	stw	r5,-12(fp)
101100f8:	e1bffe15 	stw	r6,-8(fp)
101100fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110100:	00bffa84 	movi	r2,-22
10110104:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10110108:	e0bffd17 	ldw	r2,-12(fp)
1011010c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110110:	e0bff817 	ldw	r2,-32(fp)
10110114:	10800808 	cmpgei	r2,r2,32
10110118:	1000271e 	bne	r2,zero,101101b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011011c:	0005303a 	rdctl	r2,status
10110120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110124:	e0fffb17 	ldw	r3,-20(fp)
10110128:	00bfff84 	movi	r2,-2
1011012c:	1884703a 	and	r2,r3,r2
10110130:	1001703a 	wrctl	status,r2
  
  return context;
10110134:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10110138:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1011013c:	00840474 	movhi	r2,4113
10110140:	1091fe04 	addi	r2,r2,18424
10110144:	e0fff817 	ldw	r3,-32(fp)
10110148:	180690fa 	slli	r3,r3,3
1011014c:	10c5883a 	add	r2,r2,r3
10110150:	e0fffe17 	ldw	r3,-8(fp)
10110154:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10110158:	00840474 	movhi	r2,4113
1011015c:	1091fe04 	addi	r2,r2,18424
10110160:	e0fff817 	ldw	r3,-32(fp)
10110164:	180690fa 	slli	r3,r3,3
10110168:	10c5883a 	add	r2,r2,r3
1011016c:	10800104 	addi	r2,r2,4
10110170:	e0ffff17 	ldw	r3,-4(fp)
10110174:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10110178:	e0bffe17 	ldw	r2,-8(fp)
1011017c:	10000526 	beq	r2,zero,10110194 <alt_iic_isr_register+0xb4>
10110180:	e0bff817 	ldw	r2,-32(fp)
10110184:	100b883a 	mov	r5,r2
10110188:	e13ffc17 	ldw	r4,-16(fp)
1011018c:	010ff800 	call	1010ff80 <alt_ic_irq_enable>
10110190:	00000406 	br	101101a4 <alt_iic_isr_register+0xc4>
10110194:	e0bff817 	ldw	r2,-32(fp)
10110198:	100b883a 	mov	r5,r2
1011019c:	e13ffc17 	ldw	r4,-16(fp)
101101a0:	01100080 	call	10110008 <alt_ic_irq_disable>
101101a4:	e0bff715 	stw	r2,-36(fp)
101101a8:	e0bffa17 	ldw	r2,-24(fp)
101101ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101101b0:	e0bff917 	ldw	r2,-28(fp)
101101b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
101101b8:	e0bff717 	ldw	r2,-36(fp)
}
101101bc:	e037883a 	mov	sp,fp
101101c0:	dfc00117 	ldw	ra,4(sp)
101101c4:	df000017 	ldw	fp,0(sp)
101101c8:	dec00204 	addi	sp,sp,8
101101cc:	f800283a 	ret

101101d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
101101d0:	defff904 	addi	sp,sp,-28
101101d4:	dfc00615 	stw	ra,24(sp)
101101d8:	df000515 	stw	fp,20(sp)
101101dc:	df000504 	addi	fp,sp,20
101101e0:	e13ffc15 	stw	r4,-16(fp)
101101e4:	e17ffd15 	stw	r5,-12(fp)
101101e8:	e1bffe15 	stw	r6,-8(fp)
101101ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
101101f0:	e1bfff17 	ldw	r6,-4(fp)
101101f4:	e17ffe17 	ldw	r5,-8(fp)
101101f8:	e13ffd17 	ldw	r4,-12(fp)
101101fc:	01104100 	call	10110410 <open>
10110200:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110204:	e0bffb17 	ldw	r2,-20(fp)
10110208:	10001c16 	blt	r2,zero,1011027c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1011020c:	00840474 	movhi	r2,4113
10110210:	1086a304 	addi	r2,r2,6796
10110214:	e0fffb17 	ldw	r3,-20(fp)
10110218:	18c00324 	muli	r3,r3,12
1011021c:	10c5883a 	add	r2,r2,r3
10110220:	10c00017 	ldw	r3,0(r2)
10110224:	e0bffc17 	ldw	r2,-16(fp)
10110228:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1011022c:	00840474 	movhi	r2,4113
10110230:	1086a304 	addi	r2,r2,6796
10110234:	e0fffb17 	ldw	r3,-20(fp)
10110238:	18c00324 	muli	r3,r3,12
1011023c:	10c5883a 	add	r2,r2,r3
10110240:	10800104 	addi	r2,r2,4
10110244:	10c00017 	ldw	r3,0(r2)
10110248:	e0bffc17 	ldw	r2,-16(fp)
1011024c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10110250:	00840474 	movhi	r2,4113
10110254:	1086a304 	addi	r2,r2,6796
10110258:	e0fffb17 	ldw	r3,-20(fp)
1011025c:	18c00324 	muli	r3,r3,12
10110260:	10c5883a 	add	r2,r2,r3
10110264:	10800204 	addi	r2,r2,8
10110268:	10c00017 	ldw	r3,0(r2)
1011026c:	e0bffc17 	ldw	r2,-16(fp)
10110270:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10110274:	e13ffb17 	ldw	r4,-20(fp)
10110278:	010ecfc0 	call	1010ecfc <alt_release_fd>
  }
} 
1011027c:	0001883a 	nop
10110280:	e037883a 	mov	sp,fp
10110284:	dfc00117 	ldw	ra,4(sp)
10110288:	df000017 	ldw	fp,0(sp)
1011028c:	dec00204 	addi	sp,sp,8
10110290:	f800283a 	ret

10110294 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10110294:	defffb04 	addi	sp,sp,-20
10110298:	dfc00415 	stw	ra,16(sp)
1011029c:	df000315 	stw	fp,12(sp)
101102a0:	df000304 	addi	fp,sp,12
101102a4:	e13ffd15 	stw	r4,-12(fp)
101102a8:	e17ffe15 	stw	r5,-8(fp)
101102ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
101102b0:	01c07fc4 	movi	r7,511
101102b4:	01800044 	movi	r6,1
101102b8:	e17ffd17 	ldw	r5,-12(fp)
101102bc:	01040474 	movhi	r4,4113
101102c0:	2106a604 	addi	r4,r4,6808
101102c4:	01101d00 	call	101101d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
101102c8:	01c07fc4 	movi	r7,511
101102cc:	000d883a 	mov	r6,zero
101102d0:	e17ffe17 	ldw	r5,-8(fp)
101102d4:	01040474 	movhi	r4,4113
101102d8:	2106a304 	addi	r4,r4,6796
101102dc:	01101d00 	call	101101d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
101102e0:	01c07fc4 	movi	r7,511
101102e4:	01800044 	movi	r6,1
101102e8:	e17fff17 	ldw	r5,-4(fp)
101102ec:	01040474 	movhi	r4,4113
101102f0:	2106a904 	addi	r4,r4,6820
101102f4:	01101d00 	call	101101d0 <alt_open_fd>
}  
101102f8:	0001883a 	nop
101102fc:	e037883a 	mov	sp,fp
10110300:	dfc00117 	ldw	ra,4(sp)
10110304:	df000017 	ldw	fp,0(sp)
10110308:	dec00204 	addi	sp,sp,8
1011030c:	f800283a 	ret

10110310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10110310:	defffe04 	addi	sp,sp,-8
10110314:	dfc00115 	stw	ra,4(sp)
10110318:	df000015 	stw	fp,0(sp)
1011031c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10110320:	d0a00b17 	ldw	r2,-32724(gp)
10110324:	10000326 	beq	r2,zero,10110334 <alt_get_errno+0x24>
10110328:	d0a00b17 	ldw	r2,-32724(gp)
1011032c:	103ee83a 	callr	r2
10110330:	00000106 	br	10110338 <alt_get_errno+0x28>
10110334:	d0a6d104 	addi	r2,gp,-25788
}
10110338:	e037883a 	mov	sp,fp
1011033c:	dfc00117 	ldw	ra,4(sp)
10110340:	df000017 	ldw	fp,0(sp)
10110344:	dec00204 	addi	sp,sp,8
10110348:	f800283a 	ret

1011034c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1011034c:	defffd04 	addi	sp,sp,-12
10110350:	df000215 	stw	fp,8(sp)
10110354:	df000204 	addi	fp,sp,8
10110358:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1011035c:	e0bfff17 	ldw	r2,-4(fp)
10110360:	10800217 	ldw	r2,8(r2)
10110364:	10d00034 	orhi	r3,r2,16384
10110368:	e0bfff17 	ldw	r2,-4(fp)
1011036c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10110370:	e03ffe15 	stw	zero,-8(fp)
10110374:	00001d06 	br	101103ec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10110378:	00840474 	movhi	r2,4113
1011037c:	1086a304 	addi	r2,r2,6796
10110380:	e0fffe17 	ldw	r3,-8(fp)
10110384:	18c00324 	muli	r3,r3,12
10110388:	10c5883a 	add	r2,r2,r3
1011038c:	10c00017 	ldw	r3,0(r2)
10110390:	e0bfff17 	ldw	r2,-4(fp)
10110394:	10800017 	ldw	r2,0(r2)
10110398:	1880111e 	bne	r3,r2,101103e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1011039c:	00840474 	movhi	r2,4113
101103a0:	1086a304 	addi	r2,r2,6796
101103a4:	e0fffe17 	ldw	r3,-8(fp)
101103a8:	18c00324 	muli	r3,r3,12
101103ac:	10c5883a 	add	r2,r2,r3
101103b0:	10800204 	addi	r2,r2,8
101103b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101103b8:	1000090e 	bge	r2,zero,101103e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
101103bc:	e0bffe17 	ldw	r2,-8(fp)
101103c0:	10c00324 	muli	r3,r2,12
101103c4:	00840474 	movhi	r2,4113
101103c8:	1086a304 	addi	r2,r2,6796
101103cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101103d0:	e0bfff17 	ldw	r2,-4(fp)
101103d4:	18800226 	beq	r3,r2,101103e0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
101103d8:	00bffcc4 	movi	r2,-13
101103dc:	00000806 	br	10110400 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
101103e0:	e0bffe17 	ldw	r2,-8(fp)
101103e4:	10800044 	addi	r2,r2,1
101103e8:	e0bffe15 	stw	r2,-8(fp)
101103ec:	d0a00a17 	ldw	r2,-32728(gp)
101103f0:	1007883a 	mov	r3,r2
101103f4:	e0bffe17 	ldw	r2,-8(fp)
101103f8:	18bfdf2e 	bgeu	r3,r2,10110378 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
101103fc:	0005883a 	mov	r2,zero
}
10110400:	e037883a 	mov	sp,fp
10110404:	df000017 	ldw	fp,0(sp)
10110408:	dec00104 	addi	sp,sp,4
1011040c:	f800283a 	ret

10110410 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10110410:	defff604 	addi	sp,sp,-40
10110414:	dfc00915 	stw	ra,36(sp)
10110418:	df000815 	stw	fp,32(sp)
1011041c:	df000804 	addi	fp,sp,32
10110420:	e13ffd15 	stw	r4,-12(fp)
10110424:	e17ffe15 	stw	r5,-8(fp)
10110428:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1011042c:	00bfffc4 	movi	r2,-1
10110430:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10110434:	00bffb44 	movi	r2,-19
10110438:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1011043c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10110440:	d1600804 	addi	r5,gp,-32736
10110444:	e13ffd17 	ldw	r4,-12(fp)
10110448:	011072c0 	call	1011072c <alt_find_dev>
1011044c:	e0bff815 	stw	r2,-32(fp)
10110450:	e0bff817 	ldw	r2,-32(fp)
10110454:	1000051e 	bne	r2,zero,1011046c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10110458:	e13ffd17 	ldw	r4,-12(fp)
1011045c:	01107bc0 	call	101107bc <alt_find_file>
10110460:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10110464:	00800044 	movi	r2,1
10110468:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1011046c:	e0bff817 	ldw	r2,-32(fp)
10110470:	10002926 	beq	r2,zero,10110518 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10110474:	e13ff817 	ldw	r4,-32(fp)
10110478:	01108c40 	call	101108c4 <alt_get_fd>
1011047c:	e0bff915 	stw	r2,-28(fp)
10110480:	e0bff917 	ldw	r2,-28(fp)
10110484:	1000030e 	bge	r2,zero,10110494 <open+0x84>
    {
      status = index;
10110488:	e0bff917 	ldw	r2,-28(fp)
1011048c:	e0bffa15 	stw	r2,-24(fp)
10110490:	00002306 	br	10110520 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10110494:	e0bff917 	ldw	r2,-28(fp)
10110498:	10c00324 	muli	r3,r2,12
1011049c:	00840474 	movhi	r2,4113
101104a0:	1086a304 	addi	r2,r2,6796
101104a4:	1885883a 	add	r2,r3,r2
101104a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
101104ac:	e0fffe17 	ldw	r3,-8(fp)
101104b0:	00900034 	movhi	r2,16384
101104b4:	10bfffc4 	addi	r2,r2,-1
101104b8:	1886703a 	and	r3,r3,r2
101104bc:	e0bffc17 	ldw	r2,-16(fp)
101104c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
101104c4:	e0bffb17 	ldw	r2,-20(fp)
101104c8:	1000051e 	bne	r2,zero,101104e0 <open+0xd0>
101104cc:	e13ffc17 	ldw	r4,-16(fp)
101104d0:	011034c0 	call	1011034c <alt_file_locked>
101104d4:	e0bffa15 	stw	r2,-24(fp)
101104d8:	e0bffa17 	ldw	r2,-24(fp)
101104dc:	10001016 	blt	r2,zero,10110520 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
101104e0:	e0bff817 	ldw	r2,-32(fp)
101104e4:	10800317 	ldw	r2,12(r2)
101104e8:	10000826 	beq	r2,zero,1011050c <open+0xfc>
101104ec:	e0bff817 	ldw	r2,-32(fp)
101104f0:	10800317 	ldw	r2,12(r2)
101104f4:	e1ffff17 	ldw	r7,-4(fp)
101104f8:	e1bffe17 	ldw	r6,-8(fp)
101104fc:	e17ffd17 	ldw	r5,-12(fp)
10110500:	e13ffc17 	ldw	r4,-16(fp)
10110504:	103ee83a 	callr	r2
10110508:	00000106 	br	10110510 <open+0x100>
1011050c:	0005883a 	mov	r2,zero
10110510:	e0bffa15 	stw	r2,-24(fp)
10110514:	00000206 	br	10110520 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10110518:	00bffb44 	movi	r2,-19
1011051c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10110520:	e0bffa17 	ldw	r2,-24(fp)
10110524:	1000090e 	bge	r2,zero,1011054c <open+0x13c>
  {
    alt_release_fd (index);  
10110528:	e13ff917 	ldw	r4,-28(fp)
1011052c:	010ecfc0 	call	1010ecfc <alt_release_fd>
    ALT_ERRNO = -status;
10110530:	01103100 	call	10110310 <alt_get_errno>
10110534:	1007883a 	mov	r3,r2
10110538:	e0bffa17 	ldw	r2,-24(fp)
1011053c:	0085c83a 	sub	r2,zero,r2
10110540:	18800015 	stw	r2,0(r3)
    return -1;
10110544:	00bfffc4 	movi	r2,-1
10110548:	00000106 	br	10110550 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1011054c:	e0bff917 	ldw	r2,-28(fp)
}
10110550:	e037883a 	mov	sp,fp
10110554:	dfc00117 	ldw	ra,4(sp)
10110558:	df000017 	ldw	fp,0(sp)
1011055c:	dec00204 	addi	sp,sp,8
10110560:	f800283a 	ret

10110564 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110564:	defffa04 	addi	sp,sp,-24
10110568:	df000515 	stw	fp,20(sp)
1011056c:	df000504 	addi	fp,sp,20
10110570:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110574:	0005303a 	rdctl	r2,status
10110578:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011057c:	e0fffc17 	ldw	r3,-16(fp)
10110580:	00bfff84 	movi	r2,-2
10110584:	1884703a 	and	r2,r3,r2
10110588:	1001703a 	wrctl	status,r2
  
  return context;
1011058c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10110590:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110594:	e0bfff17 	ldw	r2,-4(fp)
10110598:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1011059c:	e0bffd17 	ldw	r2,-12(fp)
101105a0:	10800017 	ldw	r2,0(r2)
101105a4:	e0fffd17 	ldw	r3,-12(fp)
101105a8:	18c00117 	ldw	r3,4(r3)
101105ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101105b0:	e0bffd17 	ldw	r2,-12(fp)
101105b4:	10800117 	ldw	r2,4(r2)
101105b8:	e0fffd17 	ldw	r3,-12(fp)
101105bc:	18c00017 	ldw	r3,0(r3)
101105c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101105c4:	e0bffd17 	ldw	r2,-12(fp)
101105c8:	e0fffd17 	ldw	r3,-12(fp)
101105cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101105d0:	e0bffd17 	ldw	r2,-12(fp)
101105d4:	e0fffd17 	ldw	r3,-12(fp)
101105d8:	10c00015 	stw	r3,0(r2)
101105dc:	e0bffb17 	ldw	r2,-20(fp)
101105e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101105e4:	e0bffe17 	ldw	r2,-8(fp)
101105e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
101105ec:	0001883a 	nop
101105f0:	e037883a 	mov	sp,fp
101105f4:	df000017 	ldw	fp,0(sp)
101105f8:	dec00104 	addi	sp,sp,4
101105fc:	f800283a 	ret

10110600 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10110600:	defffb04 	addi	sp,sp,-20
10110604:	dfc00415 	stw	ra,16(sp)
10110608:	df000315 	stw	fp,12(sp)
1011060c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10110610:	d0a00e17 	ldw	r2,-32712(gp)
10110614:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10110618:	d0a6d717 	ldw	r2,-25764(gp)
1011061c:	10800044 	addi	r2,r2,1
10110620:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110624:	00002e06 	br	101106e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10110628:	e0bffd17 	ldw	r2,-12(fp)
1011062c:	10800017 	ldw	r2,0(r2)
10110630:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10110634:	e0bffd17 	ldw	r2,-12(fp)
10110638:	10800403 	ldbu	r2,16(r2)
1011063c:	10803fcc 	andi	r2,r2,255
10110640:	10000426 	beq	r2,zero,10110654 <alt_tick+0x54>
10110644:	d0a6d717 	ldw	r2,-25764(gp)
10110648:	1000021e 	bne	r2,zero,10110654 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1011064c:	e0bffd17 	ldw	r2,-12(fp)
10110650:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10110654:	e0bffd17 	ldw	r2,-12(fp)
10110658:	10800217 	ldw	r2,8(r2)
1011065c:	d0e6d717 	ldw	r3,-25764(gp)
10110660:	18801d36 	bltu	r3,r2,101106d8 <alt_tick+0xd8>
10110664:	e0bffd17 	ldw	r2,-12(fp)
10110668:	10800403 	ldbu	r2,16(r2)
1011066c:	10803fcc 	andi	r2,r2,255
10110670:	1000191e 	bne	r2,zero,101106d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10110674:	e0bffd17 	ldw	r2,-12(fp)
10110678:	10800317 	ldw	r2,12(r2)
1011067c:	e0fffd17 	ldw	r3,-12(fp)
10110680:	18c00517 	ldw	r3,20(r3)
10110684:	1809883a 	mov	r4,r3
10110688:	103ee83a 	callr	r2
1011068c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10110690:	e0bfff17 	ldw	r2,-4(fp)
10110694:	1000031e 	bne	r2,zero,101106a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10110698:	e13ffd17 	ldw	r4,-12(fp)
1011069c:	01105640 	call	10110564 <alt_alarm_stop>
101106a0:	00000d06 	br	101106d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101106a4:	e0bffd17 	ldw	r2,-12(fp)
101106a8:	10c00217 	ldw	r3,8(r2)
101106ac:	e0bfff17 	ldw	r2,-4(fp)
101106b0:	1887883a 	add	r3,r3,r2
101106b4:	e0bffd17 	ldw	r2,-12(fp)
101106b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101106bc:	e0bffd17 	ldw	r2,-12(fp)
101106c0:	10c00217 	ldw	r3,8(r2)
101106c4:	d0a6d717 	ldw	r2,-25764(gp)
101106c8:	1880032e 	bgeu	r3,r2,101106d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
101106cc:	e0bffd17 	ldw	r2,-12(fp)
101106d0:	00c00044 	movi	r3,1
101106d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
101106d8:	e0bffe17 	ldw	r2,-8(fp)
101106dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
101106e0:	e0fffd17 	ldw	r3,-12(fp)
101106e4:	d0a00e04 	addi	r2,gp,-32712
101106e8:	18bfcf1e 	bne	r3,r2,10110628 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
101106ec:	0001883a 	nop
}
101106f0:	0001883a 	nop
101106f4:	e037883a 	mov	sp,fp
101106f8:	dfc00117 	ldw	ra,4(sp)
101106fc:	df000017 	ldw	fp,0(sp)
10110700:	dec00204 	addi	sp,sp,8
10110704:	f800283a 	ret

10110708 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10110708:	deffff04 	addi	sp,sp,-4
1011070c:	df000015 	stw	fp,0(sp)
10110710:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10110714:	000170fa 	wrctl	ienable,zero
}
10110718:	0001883a 	nop
1011071c:	e037883a 	mov	sp,fp
10110720:	df000017 	ldw	fp,0(sp)
10110724:	dec00104 	addi	sp,sp,4
10110728:	f800283a 	ret

1011072c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1011072c:	defffa04 	addi	sp,sp,-24
10110730:	dfc00515 	stw	ra,20(sp)
10110734:	df000415 	stw	fp,16(sp)
10110738:	df000404 	addi	fp,sp,16
1011073c:	e13ffe15 	stw	r4,-8(fp)
10110740:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10110744:	e0bfff17 	ldw	r2,-4(fp)
10110748:	10800017 	ldw	r2,0(r2)
1011074c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10110750:	e13ffe17 	ldw	r4,-8(fp)
10110754:	0101e6c0 	call	10101e6c <strlen>
10110758:	10800044 	addi	r2,r2,1
1011075c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110760:	00000d06 	br	10110798 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10110764:	e0bffc17 	ldw	r2,-16(fp)
10110768:	10800217 	ldw	r2,8(r2)
1011076c:	e0fffd17 	ldw	r3,-12(fp)
10110770:	180d883a 	mov	r6,r3
10110774:	e17ffe17 	ldw	r5,-8(fp)
10110778:	1009883a 	mov	r4,r2
1011077c:	0110ae00 	call	10110ae0 <memcmp>
10110780:	1000021e 	bne	r2,zero,1011078c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10110784:	e0bffc17 	ldw	r2,-16(fp)
10110788:	00000706 	br	101107a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1011078c:	e0bffc17 	ldw	r2,-16(fp)
10110790:	10800017 	ldw	r2,0(r2)
10110794:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110798:	e0fffc17 	ldw	r3,-16(fp)
1011079c:	e0bfff17 	ldw	r2,-4(fp)
101107a0:	18bff01e 	bne	r3,r2,10110764 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
101107a4:	0005883a 	mov	r2,zero
}
101107a8:	e037883a 	mov	sp,fp
101107ac:	dfc00117 	ldw	ra,4(sp)
101107b0:	df000017 	ldw	fp,0(sp)
101107b4:	dec00204 	addi	sp,sp,8
101107b8:	f800283a 	ret

101107bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
101107bc:	defffb04 	addi	sp,sp,-20
101107c0:	dfc00415 	stw	ra,16(sp)
101107c4:	df000315 	stw	fp,12(sp)
101107c8:	df000304 	addi	fp,sp,12
101107cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
101107d0:	d0a00617 	ldw	r2,-32744(gp)
101107d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101107d8:	00003106 	br	101108a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
101107dc:	e0bffd17 	ldw	r2,-12(fp)
101107e0:	10800217 	ldw	r2,8(r2)
101107e4:	1009883a 	mov	r4,r2
101107e8:	0101e6c0 	call	10101e6c <strlen>
101107ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
101107f0:	e0bffd17 	ldw	r2,-12(fp)
101107f4:	10c00217 	ldw	r3,8(r2)
101107f8:	e0bffe17 	ldw	r2,-8(fp)
101107fc:	10bfffc4 	addi	r2,r2,-1
10110800:	1885883a 	add	r2,r3,r2
10110804:	10800003 	ldbu	r2,0(r2)
10110808:	10803fcc 	andi	r2,r2,255
1011080c:	1080201c 	xori	r2,r2,128
10110810:	10bfe004 	addi	r2,r2,-128
10110814:	10800bd8 	cmpnei	r2,r2,47
10110818:	1000031e 	bne	r2,zero,10110828 <alt_find_file+0x6c>
    {
      len -= 1;
1011081c:	e0bffe17 	ldw	r2,-8(fp)
10110820:	10bfffc4 	addi	r2,r2,-1
10110824:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110828:	e0bffe17 	ldw	r2,-8(fp)
1011082c:	e0ffff17 	ldw	r3,-4(fp)
10110830:	1885883a 	add	r2,r3,r2
10110834:	10800003 	ldbu	r2,0(r2)
10110838:	10803fcc 	andi	r2,r2,255
1011083c:	1080201c 	xori	r2,r2,128
10110840:	10bfe004 	addi	r2,r2,-128
10110844:	10800be0 	cmpeqi	r2,r2,47
10110848:	1000081e 	bne	r2,zero,1011086c <alt_find_file+0xb0>
1011084c:	e0bffe17 	ldw	r2,-8(fp)
10110850:	e0ffff17 	ldw	r3,-4(fp)
10110854:	1885883a 	add	r2,r3,r2
10110858:	10800003 	ldbu	r2,0(r2)
1011085c:	10803fcc 	andi	r2,r2,255
10110860:	1080201c 	xori	r2,r2,128
10110864:	10bfe004 	addi	r2,r2,-128
10110868:	10000a1e 	bne	r2,zero,10110894 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1011086c:	e0bffd17 	ldw	r2,-12(fp)
10110870:	10800217 	ldw	r2,8(r2)
10110874:	e0fffe17 	ldw	r3,-8(fp)
10110878:	180d883a 	mov	r6,r3
1011087c:	e17fff17 	ldw	r5,-4(fp)
10110880:	1009883a 	mov	r4,r2
10110884:	0110ae00 	call	10110ae0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110888:	1000021e 	bne	r2,zero,10110894 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1011088c:	e0bffd17 	ldw	r2,-12(fp)
10110890:	00000706 	br	101108b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10110894:	e0bffd17 	ldw	r2,-12(fp)
10110898:	10800017 	ldw	r2,0(r2)
1011089c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101108a0:	e0fffd17 	ldw	r3,-12(fp)
101108a4:	d0a00604 	addi	r2,gp,-32744
101108a8:	18bfcc1e 	bne	r3,r2,101107dc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101108ac:	0005883a 	mov	r2,zero
}
101108b0:	e037883a 	mov	sp,fp
101108b4:	dfc00117 	ldw	ra,4(sp)
101108b8:	df000017 	ldw	fp,0(sp)
101108bc:	dec00204 	addi	sp,sp,8
101108c0:	f800283a 	ret

101108c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101108c4:	defffc04 	addi	sp,sp,-16
101108c8:	df000315 	stw	fp,12(sp)
101108cc:	df000304 	addi	fp,sp,12
101108d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
101108d4:	00bffa04 	movi	r2,-24
101108d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101108dc:	e03ffd15 	stw	zero,-12(fp)
101108e0:	00001906 	br	10110948 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
101108e4:	00840474 	movhi	r2,4113
101108e8:	1086a304 	addi	r2,r2,6796
101108ec:	e0fffd17 	ldw	r3,-12(fp)
101108f0:	18c00324 	muli	r3,r3,12
101108f4:	10c5883a 	add	r2,r2,r3
101108f8:	10800017 	ldw	r2,0(r2)
101108fc:	10000f1e 	bne	r2,zero,1011093c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10110900:	00840474 	movhi	r2,4113
10110904:	1086a304 	addi	r2,r2,6796
10110908:	e0fffd17 	ldw	r3,-12(fp)
1011090c:	18c00324 	muli	r3,r3,12
10110910:	10c5883a 	add	r2,r2,r3
10110914:	e0ffff17 	ldw	r3,-4(fp)
10110918:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1011091c:	d0e00a17 	ldw	r3,-32728(gp)
10110920:	e0bffd17 	ldw	r2,-12(fp)
10110924:	1880020e 	bge	r3,r2,10110930 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10110928:	e0bffd17 	ldw	r2,-12(fp)
1011092c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10110930:	e0bffd17 	ldw	r2,-12(fp)
10110934:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110938:	00000606 	br	10110954 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1011093c:	e0bffd17 	ldw	r2,-12(fp)
10110940:	10800044 	addi	r2,r2,1
10110944:	e0bffd15 	stw	r2,-12(fp)
10110948:	e0bffd17 	ldw	r2,-12(fp)
1011094c:	10800810 	cmplti	r2,r2,32
10110950:	103fe41e 	bne	r2,zero,101108e4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110954:	e0bffe17 	ldw	r2,-8(fp)
}
10110958:	e037883a 	mov	sp,fp
1011095c:	df000017 	ldw	fp,0(sp)
10110960:	dec00104 	addi	sp,sp,4
10110964:	f800283a 	ret

10110968 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10110968:	defffb04 	addi	sp,sp,-20
1011096c:	df000415 	stw	fp,16(sp)
10110970:	df000404 	addi	fp,sp,16
10110974:	e13ffe15 	stw	r4,-8(fp)
10110978:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1011097c:	e0bfff17 	ldw	r2,-4(fp)
10110980:	10840070 	cmpltui	r2,r2,4097
10110984:	1000021e 	bne	r2,zero,10110990 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10110988:	00840004 	movi	r2,4096
1011098c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10110990:	e0fffe17 	ldw	r3,-8(fp)
10110994:	e0bfff17 	ldw	r2,-4(fp)
10110998:	1885883a 	add	r2,r3,r2
1011099c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101109a0:	e0bffe17 	ldw	r2,-8(fp)
101109a4:	e0bffc15 	stw	r2,-16(fp)
101109a8:	00000506 	br	101109c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
101109ac:	e0bffc17 	ldw	r2,-16(fp)
101109b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101109b4:	e0bffc17 	ldw	r2,-16(fp)
101109b8:	10800804 	addi	r2,r2,32
101109bc:	e0bffc15 	stw	r2,-16(fp)
101109c0:	e0fffc17 	ldw	r3,-16(fp)
101109c4:	e0bffd17 	ldw	r2,-12(fp)
101109c8:	18bff836 	bltu	r3,r2,101109ac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
101109cc:	e0bffe17 	ldw	r2,-8(fp)
101109d0:	108007cc 	andi	r2,r2,31
101109d4:	10000226 	beq	r2,zero,101109e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
101109d8:	e0bffc17 	ldw	r2,-16(fp)
101109dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
101109e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
101109e4:	0001883a 	nop
101109e8:	e037883a 	mov	sp,fp
101109ec:	df000017 	ldw	fp,0(sp)
101109f0:	dec00104 	addi	sp,sp,4
101109f4:	f800283a 	ret

101109f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101109f8:	defffe04 	addi	sp,sp,-8
101109fc:	df000115 	stw	fp,4(sp)
10110a00:	df000104 	addi	fp,sp,4
10110a04:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110a08:	e0bfff17 	ldw	r2,-4(fp)
10110a0c:	10bffe84 	addi	r2,r2,-6
10110a10:	10c00428 	cmpgeui	r3,r2,16
10110a14:	18001a1e 	bne	r3,zero,10110a80 <alt_exception_cause_generated_bad_addr+0x88>
10110a18:	100690ba 	slli	r3,r2,2
10110a1c:	00840474 	movhi	r2,4113
10110a20:	10828c04 	addi	r2,r2,2608
10110a24:	1885883a 	add	r2,r3,r2
10110a28:	10800017 	ldw	r2,0(r2)
10110a2c:	1000683a 	jmp	r2
10110a30:	10110a70 	cmpltui	zero,r2,17449
10110a34:	10110a70 	cmpltui	zero,r2,17449
10110a38:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a3c:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a40:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a44:	10110a70 	cmpltui	zero,r2,17449
10110a48:	10110a78 	rdprs	zero,r2,17449
10110a4c:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a50:	10110a70 	cmpltui	zero,r2,17449
10110a54:	10110a70 	cmpltui	zero,r2,17449
10110a58:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a5c:	10110a70 	cmpltui	zero,r2,17449
10110a60:	10110a78 	rdprs	zero,r2,17449
10110a64:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a68:	10110a80 	call	110110a8 <__alt_data_end+0xef10a8>
10110a6c:	10110a70 	cmpltui	zero,r2,17449
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110a70:	00800044 	movi	r2,1
10110a74:	00000306 	br	10110a84 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110a78:	0005883a 	mov	r2,zero
10110a7c:	00000106 	br	10110a84 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110a80:	0005883a 	mov	r2,zero
  }
}
10110a84:	e037883a 	mov	sp,fp
10110a88:	df000017 	ldw	fp,0(sp)
10110a8c:	dec00104 	addi	sp,sp,4
10110a90:	f800283a 	ret

10110a94 <atexit>:
10110a94:	200b883a 	mov	r5,r4
10110a98:	000f883a 	mov	r7,zero
10110a9c:	000d883a 	mov	r6,zero
10110aa0:	0009883a 	mov	r4,zero
10110aa4:	0110b5c1 	jmpi	10110b5c <__register_exitproc>

10110aa8 <exit>:
10110aa8:	defffe04 	addi	sp,sp,-8
10110aac:	000b883a 	mov	r5,zero
10110ab0:	dc000015 	stw	r16,0(sp)
10110ab4:	dfc00115 	stw	ra,4(sp)
10110ab8:	2021883a 	mov	r16,r4
10110abc:	0110c740 	call	10110c74 <__call_exitprocs>
10110ac0:	00840474 	movhi	r2,4113
10110ac4:	108b1b04 	addi	r2,r2,11372
10110ac8:	11000017 	ldw	r4,0(r2)
10110acc:	20800f17 	ldw	r2,60(r4)
10110ad0:	10000126 	beq	r2,zero,10110ad8 <exit+0x30>
10110ad4:	103ee83a 	callr	r2
10110ad8:	8009883a 	mov	r4,r16
10110adc:	0110df40 	call	10110df4 <_exit>

10110ae0 <memcmp>:
10110ae0:	01c000c4 	movi	r7,3
10110ae4:	3980192e 	bgeu	r7,r6,10110b4c <memcmp+0x6c>
10110ae8:	2144b03a 	or	r2,r4,r5
10110aec:	11c4703a 	and	r2,r2,r7
10110af0:	10000f26 	beq	r2,zero,10110b30 <memcmp+0x50>
10110af4:	20800003 	ldbu	r2,0(r4)
10110af8:	28c00003 	ldbu	r3,0(r5)
10110afc:	10c0151e 	bne	r2,r3,10110b54 <memcmp+0x74>
10110b00:	31bfff84 	addi	r6,r6,-2
10110b04:	01ffffc4 	movi	r7,-1
10110b08:	00000406 	br	10110b1c <memcmp+0x3c>
10110b0c:	20800003 	ldbu	r2,0(r4)
10110b10:	28c00003 	ldbu	r3,0(r5)
10110b14:	31bfffc4 	addi	r6,r6,-1
10110b18:	10c00e1e 	bne	r2,r3,10110b54 <memcmp+0x74>
10110b1c:	21000044 	addi	r4,r4,1
10110b20:	29400044 	addi	r5,r5,1
10110b24:	31fff91e 	bne	r6,r7,10110b0c <memcmp+0x2c>
10110b28:	0005883a 	mov	r2,zero
10110b2c:	f800283a 	ret
10110b30:	20c00017 	ldw	r3,0(r4)
10110b34:	28800017 	ldw	r2,0(r5)
10110b38:	18bfee1e 	bne	r3,r2,10110af4 <memcmp+0x14>
10110b3c:	31bfff04 	addi	r6,r6,-4
10110b40:	21000104 	addi	r4,r4,4
10110b44:	29400104 	addi	r5,r5,4
10110b48:	39bff936 	bltu	r7,r6,10110b30 <memcmp+0x50>
10110b4c:	303fe91e 	bne	r6,zero,10110af4 <memcmp+0x14>
10110b50:	003ff506 	br	10110b28 <memcmp+0x48>
10110b54:	10c5c83a 	sub	r2,r2,r3
10110b58:	f800283a 	ret

10110b5c <__register_exitproc>:
10110b5c:	defffa04 	addi	sp,sp,-24
10110b60:	dc000315 	stw	r16,12(sp)
10110b64:	04040474 	movhi	r16,4113
10110b68:	840b1b04 	addi	r16,r16,11372
10110b6c:	80c00017 	ldw	r3,0(r16)
10110b70:	dc400415 	stw	r17,16(sp)
10110b74:	dfc00515 	stw	ra,20(sp)
10110b78:	18805217 	ldw	r2,328(r3)
10110b7c:	2023883a 	mov	r17,r4
10110b80:	10003726 	beq	r2,zero,10110c60 <__register_exitproc+0x104>
10110b84:	10c00117 	ldw	r3,4(r2)
10110b88:	010007c4 	movi	r4,31
10110b8c:	20c00e16 	blt	r4,r3,10110bc8 <__register_exitproc+0x6c>
10110b90:	1a000044 	addi	r8,r3,1
10110b94:	8800221e 	bne	r17,zero,10110c20 <__register_exitproc+0xc4>
10110b98:	18c00084 	addi	r3,r3,2
10110b9c:	18c7883a 	add	r3,r3,r3
10110ba0:	18c7883a 	add	r3,r3,r3
10110ba4:	12000115 	stw	r8,4(r2)
10110ba8:	10c7883a 	add	r3,r2,r3
10110bac:	19400015 	stw	r5,0(r3)
10110bb0:	0005883a 	mov	r2,zero
10110bb4:	dfc00517 	ldw	ra,20(sp)
10110bb8:	dc400417 	ldw	r17,16(sp)
10110bbc:	dc000317 	ldw	r16,12(sp)
10110bc0:	dec00604 	addi	sp,sp,24
10110bc4:	f800283a 	ret
10110bc8:	00800034 	movhi	r2,0
10110bcc:	10800004 	addi	r2,r2,0
10110bd0:	10002626 	beq	r2,zero,10110c6c <__register_exitproc+0x110>
10110bd4:	01006404 	movi	r4,400
10110bd8:	d9400015 	stw	r5,0(sp)
10110bdc:	d9800115 	stw	r6,4(sp)
10110be0:	d9c00215 	stw	r7,8(sp)
10110be4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10110be8:	d9400017 	ldw	r5,0(sp)
10110bec:	d9800117 	ldw	r6,4(sp)
10110bf0:	d9c00217 	ldw	r7,8(sp)
10110bf4:	10001d26 	beq	r2,zero,10110c6c <__register_exitproc+0x110>
10110bf8:	81000017 	ldw	r4,0(r16)
10110bfc:	10000115 	stw	zero,4(r2)
10110c00:	02000044 	movi	r8,1
10110c04:	22405217 	ldw	r9,328(r4)
10110c08:	0007883a 	mov	r3,zero
10110c0c:	12400015 	stw	r9,0(r2)
10110c10:	20805215 	stw	r2,328(r4)
10110c14:	10006215 	stw	zero,392(r2)
10110c18:	10006315 	stw	zero,396(r2)
10110c1c:	883fde26 	beq	r17,zero,10110b98 <__register_exitproc+0x3c>
10110c20:	18c9883a 	add	r4,r3,r3
10110c24:	2109883a 	add	r4,r4,r4
10110c28:	1109883a 	add	r4,r2,r4
10110c2c:	21802215 	stw	r6,136(r4)
10110c30:	01800044 	movi	r6,1
10110c34:	12406217 	ldw	r9,392(r2)
10110c38:	30cc983a 	sll	r6,r6,r3
10110c3c:	4992b03a 	or	r9,r9,r6
10110c40:	12406215 	stw	r9,392(r2)
10110c44:	21c04215 	stw	r7,264(r4)
10110c48:	01000084 	movi	r4,2
10110c4c:	893fd21e 	bne	r17,r4,10110b98 <__register_exitproc+0x3c>
10110c50:	11006317 	ldw	r4,396(r2)
10110c54:	218cb03a 	or	r6,r4,r6
10110c58:	11806315 	stw	r6,396(r2)
10110c5c:	003fce06 	br	10110b98 <__register_exitproc+0x3c>
10110c60:	18805304 	addi	r2,r3,332
10110c64:	18805215 	stw	r2,328(r3)
10110c68:	003fc606 	br	10110b84 <__register_exitproc+0x28>
10110c6c:	00bfffc4 	movi	r2,-1
10110c70:	003fd006 	br	10110bb4 <__register_exitproc+0x58>

10110c74 <__call_exitprocs>:
10110c74:	defff504 	addi	sp,sp,-44
10110c78:	df000915 	stw	fp,36(sp)
10110c7c:	dd400615 	stw	r21,24(sp)
10110c80:	dc800315 	stw	r18,12(sp)
10110c84:	dfc00a15 	stw	ra,40(sp)
10110c88:	ddc00815 	stw	r23,32(sp)
10110c8c:	dd800715 	stw	r22,28(sp)
10110c90:	dd000515 	stw	r20,20(sp)
10110c94:	dcc00415 	stw	r19,16(sp)
10110c98:	dc400215 	stw	r17,8(sp)
10110c9c:	dc000115 	stw	r16,4(sp)
10110ca0:	d9000015 	stw	r4,0(sp)
10110ca4:	2839883a 	mov	fp,r5
10110ca8:	04800044 	movi	r18,1
10110cac:	057fffc4 	movi	r21,-1
10110cb0:	00840474 	movhi	r2,4113
10110cb4:	108b1b04 	addi	r2,r2,11372
10110cb8:	12000017 	ldw	r8,0(r2)
10110cbc:	45005217 	ldw	r20,328(r8)
10110cc0:	44c05204 	addi	r19,r8,328
10110cc4:	a0001c26 	beq	r20,zero,10110d38 <__call_exitprocs+0xc4>
10110cc8:	a0800117 	ldw	r2,4(r20)
10110ccc:	15ffffc4 	addi	r23,r2,-1
10110cd0:	b8000d16 	blt	r23,zero,10110d08 <__call_exitprocs+0x94>
10110cd4:	14000044 	addi	r16,r2,1
10110cd8:	8421883a 	add	r16,r16,r16
10110cdc:	8421883a 	add	r16,r16,r16
10110ce0:	84402004 	addi	r17,r16,128
10110ce4:	a463883a 	add	r17,r20,r17
10110ce8:	a421883a 	add	r16,r20,r16
10110cec:	e0001e26 	beq	fp,zero,10110d68 <__call_exitprocs+0xf4>
10110cf0:	80804017 	ldw	r2,256(r16)
10110cf4:	e0801c26 	beq	fp,r2,10110d68 <__call_exitprocs+0xf4>
10110cf8:	bdffffc4 	addi	r23,r23,-1
10110cfc:	843fff04 	addi	r16,r16,-4
10110d00:	8c7fff04 	addi	r17,r17,-4
10110d04:	bd7ff91e 	bne	r23,r21,10110cec <__call_exitprocs+0x78>
10110d08:	00800034 	movhi	r2,0
10110d0c:	10800004 	addi	r2,r2,0
10110d10:	10000926 	beq	r2,zero,10110d38 <__call_exitprocs+0xc4>
10110d14:	a0800117 	ldw	r2,4(r20)
10110d18:	1000301e 	bne	r2,zero,10110ddc <__call_exitprocs+0x168>
10110d1c:	a0800017 	ldw	r2,0(r20)
10110d20:	10003226 	beq	r2,zero,10110dec <__call_exitprocs+0x178>
10110d24:	a009883a 	mov	r4,r20
10110d28:	98800015 	stw	r2,0(r19)
10110d2c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10110d30:	9d000017 	ldw	r20,0(r19)
10110d34:	a03fe41e 	bne	r20,zero,10110cc8 <__call_exitprocs+0x54>
10110d38:	dfc00a17 	ldw	ra,40(sp)
10110d3c:	df000917 	ldw	fp,36(sp)
10110d40:	ddc00817 	ldw	r23,32(sp)
10110d44:	dd800717 	ldw	r22,28(sp)
10110d48:	dd400617 	ldw	r21,24(sp)
10110d4c:	dd000517 	ldw	r20,20(sp)
10110d50:	dcc00417 	ldw	r19,16(sp)
10110d54:	dc800317 	ldw	r18,12(sp)
10110d58:	dc400217 	ldw	r17,8(sp)
10110d5c:	dc000117 	ldw	r16,4(sp)
10110d60:	dec00b04 	addi	sp,sp,44
10110d64:	f800283a 	ret
10110d68:	a0800117 	ldw	r2,4(r20)
10110d6c:	80c00017 	ldw	r3,0(r16)
10110d70:	10bfffc4 	addi	r2,r2,-1
10110d74:	15c01426 	beq	r2,r23,10110dc8 <__call_exitprocs+0x154>
10110d78:	80000015 	stw	zero,0(r16)
10110d7c:	183fde26 	beq	r3,zero,10110cf8 <__call_exitprocs+0x84>
10110d80:	95c8983a 	sll	r4,r18,r23
10110d84:	a0806217 	ldw	r2,392(r20)
10110d88:	a5800117 	ldw	r22,4(r20)
10110d8c:	2084703a 	and	r2,r4,r2
10110d90:	10000b26 	beq	r2,zero,10110dc0 <__call_exitprocs+0x14c>
10110d94:	a0806317 	ldw	r2,396(r20)
10110d98:	2088703a 	and	r4,r4,r2
10110d9c:	20000c1e 	bne	r4,zero,10110dd0 <__call_exitprocs+0x15c>
10110da0:	89400017 	ldw	r5,0(r17)
10110da4:	d9000017 	ldw	r4,0(sp)
10110da8:	183ee83a 	callr	r3
10110dac:	a0800117 	ldw	r2,4(r20)
10110db0:	15bfbf1e 	bne	r2,r22,10110cb0 <__call_exitprocs+0x3c>
10110db4:	98800017 	ldw	r2,0(r19)
10110db8:	153fcf26 	beq	r2,r20,10110cf8 <__call_exitprocs+0x84>
10110dbc:	003fbc06 	br	10110cb0 <__call_exitprocs+0x3c>
10110dc0:	183ee83a 	callr	r3
10110dc4:	003ff906 	br	10110dac <__call_exitprocs+0x138>
10110dc8:	a5c00115 	stw	r23,4(r20)
10110dcc:	003feb06 	br	10110d7c <__call_exitprocs+0x108>
10110dd0:	89000017 	ldw	r4,0(r17)
10110dd4:	183ee83a 	callr	r3
10110dd8:	003ff406 	br	10110dac <__call_exitprocs+0x138>
10110ddc:	a0800017 	ldw	r2,0(r20)
10110de0:	a027883a 	mov	r19,r20
10110de4:	1029883a 	mov	r20,r2
10110de8:	003fb606 	br	10110cc4 <__call_exitprocs+0x50>
10110dec:	0005883a 	mov	r2,zero
10110df0:	003ffb06 	br	10110de0 <__call_exitprocs+0x16c>

10110df4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10110df4:	defffd04 	addi	sp,sp,-12
10110df8:	df000215 	stw	fp,8(sp)
10110dfc:	df000204 	addi	fp,sp,8
10110e00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10110e04:	0001883a 	nop
10110e08:	e0bfff17 	ldw	r2,-4(fp)
10110e0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10110e10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10110e14:	10000226 	beq	r2,zero,10110e20 <_exit+0x2c>
    ALT_SIM_FAIL();
10110e18:	002af070 	cmpltui	zero,zero,43969
10110e1c:	00000106 	br	10110e24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10110e20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10110e24:	003fff06 	br	10110e24 <_exit+0x30>
